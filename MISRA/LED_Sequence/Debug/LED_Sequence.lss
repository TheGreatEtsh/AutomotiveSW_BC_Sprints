
LED_Sequence.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000065a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000065a  000006ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  000006fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000136e  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000936  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a58  00000000  00000000  0000250c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066b  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000794  00000000  00000000  0000371b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003eaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	8f 00       	.word	0x008f	; ????
  56:	9c 00       	.word	0x009c	; ????
  58:	a9 00       	.word	0x00a9	; ????
  5a:	b6 00       	.word	0x00b6	; ????
  5c:	c3 00       	.word	0x00c3	; ????
  5e:	d0 00       	.word	0x00d0	; ????
  60:	dd 00       	.word	0x00dd	; ????
  62:	ea 00       	.word	0x00ea	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ea e5       	ldi	r30, 0x5A	; 90
  78:	f6 e0       	ldi	r31, 0x06	; 6
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	ac e6       	ldi	r26, 0x6C	; 108
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	ae 36       	cpi	r26, 0x6E	; 110
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 9b 01 	call	0x336	; 0x336 <main>
  9a:	0c 94 2b 03 	jmp	0x656	; 0x656 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <APP_initModules>:
	LED_init();
}

void APP_ledUnitTesting (void)
{
	LED_on(LED_1);
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	83 e4       	ldi	r24, 0x43	; 67
  a6:	0e 94 04 01 	call	0x208	; 0x208 <BUTTON_init>
  aa:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_init>
  ae:	08 95       	ret

000000b0 <APP_ledSequenceV_1>:

void APP_ledSequenceV_1 (void)
{
	static uint8_t_  counter;
	static uint8_t_ buttonState = 0;
	BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &buttonState);
  b0:	4d e6       	ldi	r20, 0x6D	; 109
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	64 e0       	ldi	r22, 0x04	; 4
  b6:	83 e4       	ldi	r24, 0x43	; 67
  b8:	0e 94 0a 01 	call	0x214	; 0x214 <BUTTON_read>
	if (buttonState)
  bc:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <buttonState.1829>
  c0:	88 23       	and	r24, r24
  c2:	09 f4       	brne	.+2      	; 0xc6 <APP_ledSequenceV_1+0x16>
  c4:	a0 c0       	rjmp	.+320    	; 0x206 <APP_ledSequenceV_1+0x156>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	86 e7       	ldi	r24, 0x76	; 118
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <APP_ledSequenceV_1+0x1c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <APP_ledSequenceV_1+0x26>
  d6:	00 00       	nop
	{
		_delay_ms(60);
		BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &buttonState);
  d8:	4d e6       	ldi	r20, 0x6D	; 109
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	64 e0       	ldi	r22, 0x04	; 4
  de:	83 e4       	ldi	r24, 0x43	; 67
  e0:	0e 94 0a 01 	call	0x214	; 0x214 <BUTTON_read>
		if(buttonState)
  e4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <buttonState.1829>
  e8:	88 23       	and	r24, r24
  ea:	09 f4       	brne	.+2      	; 0xee <APP_ledSequenceV_1+0x3e>
  ec:	8c c0       	rjmp	.+280    	; 0x206 <APP_ledSequenceV_1+0x156>
		{
			BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &buttonState);
  ee:	4d e6       	ldi	r20, 0x6D	; 109
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	64 e0       	ldi	r22, 0x04	; 4
  f4:	83 e4       	ldi	r24, 0x43	; 67
  f6:	0e 94 0a 01 	call	0x214	; 0x214 <BUTTON_read>
			counter++;
  fa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  fe:	e1 e0       	ldi	r30, 0x01	; 1
 100:	e8 0f       	add	r30, r24
 102:	e0 93 6c 00 	sts	0x006C, r30	; 0x80006c <__data_end>
			switch(counter)
 106:	8e 2f       	mov	r24, r30
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	e8 30       	cpi	r30, 0x08	; 8
 110:	f1 05       	cpc	r31, r1
 112:	08 f0       	brcs	.+2      	; 0x116 <APP_ledSequenceV_1+0x66>
 114:	74 c0       	rjmp	.+232    	; 0x1fe <APP_ledSequenceV_1+0x14e>
 116:	e6 5d       	subi	r30, 0xD6	; 214
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	0c 94 25 03 	jmp	0x64a	; 0x64a <__tablejump2__>
			{
				case 1: 
					LED_on(LED_0);	
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_off(LED_1);	
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_off(LED_2);	
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_off(LED_3);	
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
									break;
 136:	63 c0       	rjmp	.+198    	; 0x1fe <APP_ledSequenceV_1+0x14e>
									
				case 2: 
					LED_on(LED_0);	
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_on(LED_1);	
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_off(LED_2);	
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_off(LED_3);
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
									break;
 150:	56 c0       	rjmp	.+172    	; 0x1fe <APP_ledSequenceV_1+0x14e>
									
				case 3: 
					LED_on(LED_0);	
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_on(LED_1);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_on(LED_2);	
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_off(LED_3);					
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
									break;
 16a:	49 c0       	rjmp	.+146    	; 0x1fe <APP_ledSequenceV_1+0x14e>
									
				case 4: 
					LED_on(LED_0);	
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_on(LED_1);	
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_on(LED_2);	
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_on(LED_3);	
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
									break;
 184:	3c c0       	rjmp	.+120    	; 0x1fe <APP_ledSequenceV_1+0x14e>
									
				case 5: 
					LED_off(LED_0);	
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_on(LED_1);	
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_on(LED_2);	
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_on(LED_3);					
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
									break;
 19e:	2f c0       	rjmp	.+94     	; 0x1fe <APP_ledSequenceV_1+0x14e>
									
				case 6: 
					LED_off(LED_0);	
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_off(LED_1);	
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_on(LED_2);	
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
					LED_on(LED_3);	
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
									break;
 1b8:	22 c0       	rjmp	.+68     	; 0x1fe <APP_ledSequenceV_1+0x14e>
									
				case 7: 
					LED_off(LED_0);	
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_off(LED_1);	
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_off(LED_2);	
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_on(LED_3);	
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 37 01 	call	0x26e	; 0x26e <LED_on>
									break;
 1d2:	15 c0       	rjmp	.+42     	; 0x1fe <APP_ledSequenceV_1+0x14e>
									
				case 8: 
					LED_off(LED_0);	
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_off(LED_1); 
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_off(LED_2);	
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					LED_off(LED_3);	
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LED_off>
					counter = 0;	break;
 1ec:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <APP_ledSequenceV_1+0x14e>
					break;
				 
			}
			while(buttonState)
			{
				BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &buttonState);
 1f2:	4d e6       	ldi	r20, 0x6D	; 109
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	64 e0       	ldi	r22, 0x04	; 4
 1f8:	83 e4       	ldi	r24, 0x43	; 67
 1fa:	0e 94 0a 01 	call	0x214	; 0x214 <BUTTON_read>
					
				default:
					break;
				 
			}
			while(buttonState)
 1fe:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <buttonState.1829>
 202:	81 11       	cpse	r24, r1
 204:	f6 cf       	rjmp	.-20     	; 0x1f2 <APP_ledSequenceV_1+0x142>
 206:	08 95       	ret

00000208 <BUTTON_init>:


EN_buttonError_t BUTTON_init(uint8_t_ buttonPort, uint8_t_ buttonPin)
{
	EN_buttonError_t error = BUTTON_OK;
	if (dio_init(buttonPort, buttonPin, DIO_INPUT) != DIO_OK)
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	0e 94 a0 01 	call	0x340	; 0x340 <dio_init>
 20e:	81 11       	cpse	r24, r1
	{
		error = BUTTON_NOK;
 210:	81 e0       	ldi	r24, 0x01	; 1
		/*BUTTON_OK*/
	}
	
	
	return error;
}
 212:	08 95       	ret

00000214 <BUTTON_read>:

EN_buttonError_t BUTTON_read(uint8_t_ buttonPort, uint8_t_ buttonPin, uint8_t_ *buttonState)
{
	EN_buttonError_t error = BUTTON_OK;
	
	if (dio_read(buttonPort, buttonPin, buttonState) != DIO_OK)
 214:	0e 94 b6 02 	call	0x56c	; 0x56c <dio_read>
 218:	81 11       	cpse	r24, r1
	{
		error = BUTTON_NOK;
 21a:	81 e0       	ldi	r24, 0x01	; 1
	{
		/*BUTTON_OK*/
	}
	
	return error;
 21c:	08 95       	ret

0000021e <LED_init>:

extern str_LED_config_t cst_str_LED_config[LED_NUMBER_OF_LEDS];


enu_LED_status_t LED_init(void)
{
 21e:	cf 93       	push	r28
	enu_LED_status_t en_a_error = LED_OK;
	
	for(uint8_t_ counter = 0; counter < LED_NUMBER_OF_LEDS; counter++)	
 220:	c0 e0       	ldi	r28, 0x00	; 0
extern str_LED_config_t cst_str_LED_config[LED_NUMBER_OF_LEDS];


enu_LED_status_t LED_init(void)
{
	enu_LED_status_t en_a_error = LED_OK;
 222:	80 e0       	ldi	r24, 0x00	; 0
	
	for(uint8_t_ counter = 0; counter < LED_NUMBER_OF_LEDS; counter++)	
 224:	20 c0       	rjmp	.+64     	; 0x266 <LED_init+0x48>
	{
		
		if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
 226:	2c 2f       	mov	r18, r28
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	f9 01       	movw	r30, r18
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	e2 0f       	add	r30, r18
 232:	f3 1f       	adc	r31, r19
 234:	e0 5a       	subi	r30, 0xA0	; 160
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	85 34       	cpi	r24, 0x45	; 69
 23c:	80 f4       	brcc	.+32     	; 0x25e <LED_init+0x40>
		{
			
			en_a_error = LED_WRONG_LED_PORT;
		}
		else if (cst_str_LED_config[counter].uint8_ledPin > 7)
 23e:	f9 01       	movw	r30, r18
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	2e 0f       	add	r18, r30
 246:	3f 1f       	adc	r19, r31
 248:	f9 01       	movw	r30, r18
 24a:	e0 5a       	subi	r30, 0xA0	; 160
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	62 81       	ldd	r22, Z+2	; 0x02
 250:	68 30       	cpi	r22, 0x08	; 8
 252:	38 f4       	brcc	.+14     	; 0x262 <LED_init+0x44>
		{
			en_a_error = LED_WRONG_LED_PIN;
		}
		else
		{
			dio_init(cst_str_LED_config[counter].uint8_ledPort, 
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	0e 94 a0 01 	call	0x340	; 0x340 <dio_init>
						cst_str_LED_config[counter].uint8_ledPin, 
						DIO_OUTPUT);
			en_a_error = LED_OK;
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	03 c0       	rjmp	.+6      	; 0x264 <LED_init+0x46>
	{
		
		if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
		{
			
			en_a_error = LED_WRONG_LED_PORT;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	01 c0       	rjmp	.+2      	; 0x264 <LED_init+0x46>
		}
		else if (cst_str_LED_config[counter].uint8_ledPin > 7)
		{
			en_a_error = LED_WRONG_LED_PIN;
 262:	82 e0       	ldi	r24, 0x02	; 2

enu_LED_status_t LED_init(void)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	for(uint8_t_ counter = 0; counter < LED_NUMBER_OF_LEDS; counter++)	
 264:	cf 5f       	subi	r28, 0xFF	; 255
 266:	c4 30       	cpi	r28, 0x04	; 4
 268:	f0 f2       	brcs	.-68     	; 0x226 <LED_init+0x8>
			en_a_error = LED_OK;
		}
		
	}
	return en_a_error;
}
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <LED_on>:

enu_LED_status_t LED_on(uint8_t_ uint8_ledID)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	uint8_t_ counter = 0;
 26e:	90 e0       	ldi	r25, 0x00	; 0
	for (;counter < LED_NUMBER_OF_LEDS; counter++)
 270:	0e c0       	rjmp	.+28     	; 0x28e <LED_on+0x20>
	{
		if (uint8_ledID == cst_str_LED_config[counter].uint8_ledID)
 272:	29 2f       	mov	r18, r25
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	f9 01       	movw	r30, r18
 278:	ee 0f       	add	r30, r30
 27a:	ff 1f       	adc	r31, r31
 27c:	2e 0f       	add	r18, r30
 27e:	3f 1f       	adc	r19, r31
 280:	f9 01       	movw	r30, r18
 282:	e0 5a       	subi	r30, 0xA0	; 160
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	20 81       	ld	r18, Z
 288:	28 17       	cp	r18, r24
 28a:	19 f0       	breq	.+6      	; 0x292 <LED_on+0x24>
enu_LED_status_t LED_on(uint8_t_ uint8_ledID)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	uint8_t_ counter = 0;
	for (;counter < LED_NUMBER_OF_LEDS; counter++)
 28c:	9f 5f       	subi	r25, 0xFF	; 255
 28e:	94 30       	cpi	r25, 0x04	; 4
 290:	80 f3       	brcs	.-32     	; 0x272 <LED_on+0x4>
		{
			break;
		}
	}
	
	if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
 292:	29 2f       	mov	r18, r25
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	e2 0f       	add	r30, r18
 29e:	f3 1f       	adc	r31, r19
 2a0:	e0 5a       	subi	r30, 0xA0	; 160
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	81 81       	ldd	r24, Z+1	; 0x01
 2a6:	85 34       	cpi	r24, 0x45	; 69
 2a8:	80 f4       	brcc	.+32     	; 0x2ca <LED_on+0x5c>
	{
		en_a_error = LED_WRONG_LED_PORT;
	}
	else if (cst_str_LED_config[counter].uint8_ledPin > 7)
 2aa:	f9 01       	movw	r30, r18
 2ac:	ee 0f       	add	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	2e 0f       	add	r18, r30
 2b2:	3f 1f       	adc	r19, r31
 2b4:	f9 01       	movw	r30, r18
 2b6:	e0 5a       	subi	r30, 0xA0	; 160
 2b8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ba:	62 81       	ldd	r22, Z+2	; 0x02
 2bc:	68 30       	cpi	r22, 0x08	; 8
 2be:	38 f4       	brcc	.+14     	; 0x2ce <LED_on+0x60>
	{
		en_a_error = LED_WRONG_LED_PIN;
	}
	else
	{
		dio_write(cst_str_LED_config[counter].uint8_ledPort,
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	0e 94 2b 02 	call	0x456	; 0x456 <dio_write>
					cst_str_LED_config[counter].uint8_ledPin, 
					DIO_HIGH);
		en_a_error = LED_OK;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	08 95       	ret
		}
	}
	
	if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
	{
		en_a_error = LED_WRONG_LED_PORT;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	08 95       	ret
	}
	else if (cst_str_LED_config[counter].uint8_ledPin > 7)
	{
		en_a_error = LED_WRONG_LED_PIN;
 2ce:	82 e0       	ldi	r24, 0x02	; 2
					DIO_HIGH);
		en_a_error = LED_OK;
	}
	
	return en_a_error;
}
 2d0:	08 95       	ret

000002d2 <LED_off>:

enu_LED_status_t LED_off(uint8_t_ uint8_ledID)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	uint8_t_ counter = 0;
 2d2:	90 e0       	ldi	r25, 0x00	; 0
	for (;counter < LED_NUMBER_OF_LEDS; counter++)
 2d4:	0e c0       	rjmp	.+28     	; 0x2f2 <LED_off+0x20>
	{
		if (uint8_ledID == cst_str_LED_config[counter].uint8_ledID)
 2d6:	29 2f       	mov	r18, r25
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	f9 01       	movw	r30, r18
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	2e 0f       	add	r18, r30
 2e2:	3f 1f       	adc	r19, r31
 2e4:	f9 01       	movw	r30, r18
 2e6:	e0 5a       	subi	r30, 0xA0	; 160
 2e8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ea:	20 81       	ld	r18, Z
 2ec:	28 17       	cp	r18, r24
 2ee:	19 f0       	breq	.+6      	; 0x2f6 <LED_off+0x24>
enu_LED_status_t LED_off(uint8_t_ uint8_ledID)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	uint8_t_ counter = 0;
	for (;counter < LED_NUMBER_OF_LEDS; counter++)
 2f0:	9f 5f       	subi	r25, 0xFF	; 255
 2f2:	94 30       	cpi	r25, 0x04	; 4
 2f4:	80 f3       	brcs	.-32     	; 0x2d6 <LED_off+0x4>
		{
			break;
		}
	}
	
	if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
 2f6:	29 2f       	mov	r18, r25
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	f9 01       	movw	r30, r18
 2fc:	ee 0f       	add	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	e2 0f       	add	r30, r18
 302:	f3 1f       	adc	r31, r19
 304:	e0 5a       	subi	r30, 0xA0	; 160
 306:	ff 4f       	sbci	r31, 0xFF	; 255
 308:	81 81       	ldd	r24, Z+1	; 0x01
 30a:	85 34       	cpi	r24, 0x45	; 69
 30c:	80 f4       	brcc	.+32     	; 0x32e <LED_off+0x5c>
	{
		en_a_error = LED_WRONG_LED_PORT;
	}
	else if (cst_str_LED_config[counter].uint8_ledPin > 7)
 30e:	f9 01       	movw	r30, r18
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	2e 0f       	add	r18, r30
 316:	3f 1f       	adc	r19, r31
 318:	f9 01       	movw	r30, r18
 31a:	e0 5a       	subi	r30, 0xA0	; 160
 31c:	ff 4f       	sbci	r31, 0xFF	; 255
 31e:	62 81       	ldd	r22, Z+2	; 0x02
 320:	68 30       	cpi	r22, 0x08	; 8
 322:	38 f4       	brcc	.+14     	; 0x332 <LED_off+0x60>
	{
		en_a_error = LED_WRONG_LED_PIN;
	}
	else
	{
		dio_write(cst_str_LED_config[counter].uint8_ledPort,
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	0e 94 2b 02 	call	0x456	; 0x456 <dio_write>
					cst_str_LED_config[counter].uint8_ledPin,
					DIO_LOW);
		en_a_error = LED_OK;
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret
		}
	}
	
	if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
	{
		en_a_error = LED_WRONG_LED_PORT;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret
	}
	else if (cst_str_LED_config[counter].uint8_ledPin > 7)
	{
		en_a_error = LED_WRONG_LED_PIN;
 332:	82 e0       	ldi	r24, 0x02	; 2
					DIO_LOW);
		en_a_error = LED_OK;
	}
	
	return en_a_error;
}
 334:	08 95       	ret

00000336 <main>:

int main(void)
{
    /* Replace with your application code */
	
	APP_initModules();
 336:	0e 94 51 00 	call	0xa2	; 0xa2 <APP_initModules>
	
	
    while (1) 
    {
		APP_ledSequenceV_1();
 33a:	0e 94 58 00 	call	0xb0	; 0xb0 <APP_ledSequenceV_1>
 33e:	fd cf       	rjmp	.-6      	; 0x33a <main+0x4>

00000340 <dio_init>:
	else
	{
		error = DIO_WRONG_PIN_NUMBER;
	}
	return error;
}
 340:	68 30       	cpi	r22, 0x08	; 8
 342:	08 f0       	brcs	.+2      	; 0x346 <dio_init+0x6>
 344:	80 c0       	rjmp	.+256    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 346:	44 23       	and	r20, r20
 348:	21 f0       	breq	.+8      	; 0x352 <dio_init+0x12>
 34a:	41 30       	cpi	r20, 0x01	; 1
 34c:	09 f4       	brne	.+2      	; 0x350 <dio_init+0x10>
 34e:	40 c0       	rjmp	.+128    	; 0x3d0 <dio_init+0x90>
 350:	7c c0       	rjmp	.+248    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 352:	82 34       	cpi	r24, 0x42	; 66
 354:	b1 f0       	breq	.+44     	; 0x382 <dio_init+0x42>
 356:	18 f4       	brcc	.+6      	; 0x35e <dio_init+0x1e>
 358:	81 34       	cpi	r24, 0x41	; 65
 35a:	31 f0       	breq	.+12     	; 0x368 <dio_init+0x28>
 35c:	78 c0       	rjmp	.+240    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 35e:	83 34       	cpi	r24, 0x43	; 67
 360:	e9 f0       	breq	.+58     	; 0x39c <dio_init+0x5c>
 362:	84 34       	cpi	r24, 0x44	; 68
 364:	41 f1       	breq	.+80     	; 0x3b6 <dio_init+0x76>
 366:	73 c0       	rjmp	.+230    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 368:	2a b3       	in	r18, 0x1a	; 26
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <dio_init+0x34>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <dio_init+0x30>
 378:	80 95       	com	r24
 37a:	82 23       	and	r24, r18
 37c:	8a bb       	out	0x1a, r24	; 26
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	08 95       	ret
 382:	27 b3       	in	r18, 0x17	; 23
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <dio_init+0x4e>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <dio_init+0x4a>
 392:	80 95       	com	r24
 394:	82 23       	and	r24, r18
 396:	87 bb       	out	0x17, r24	; 23
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	08 95       	ret
 39c:	24 b3       	in	r18, 0x14	; 20
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <dio_init+0x68>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <dio_init+0x64>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	84 bb       	out	0x14, r24	; 20
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
 3b6:	21 b3       	in	r18, 0x11	; 17
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <dio_init+0x82>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <dio_init+0x7e>
 3c6:	80 95       	com	r24
 3c8:	82 23       	and	r24, r18
 3ca:	81 bb       	out	0x11, r24	; 17
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	08 95       	ret
 3d0:	82 34       	cpi	r24, 0x42	; 66
 3d2:	a9 f0       	breq	.+42     	; 0x3fe <dio_init+0xbe>
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <dio_init+0x9c>
 3d6:	81 34       	cpi	r24, 0x41	; 65
 3d8:	31 f0       	breq	.+12     	; 0x3e6 <dio_init+0xa6>
 3da:	3b c0       	rjmp	.+118    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 3dc:	83 34       	cpi	r24, 0x43	; 67
 3de:	d9 f0       	breq	.+54     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3e0:	84 34       	cpi	r24, 0x44	; 68
 3e2:	29 f1       	breq	.+74     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 3e4:	36 c0       	rjmp	.+108    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 3e6:	2a b3       	in	r18, 0x1a	; 26
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <dio_init+0xb2>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <dio_init+0xae>
 3f6:	82 2b       	or	r24, r18
 3f8:	8a bb       	out	0x1a, r24	; 26
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
 3fe:	27 b3       	in	r18, 0x17	; 23
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	82 2b       	or	r24, r18
 410:	87 bb       	out	0x17, r24	; 23
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	08 95       	ret
 416:	24 b3       	in	r18, 0x14	; 20
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	82 2b       	or	r24, r18
 428:	84 bb       	out	0x14, r24	; 20
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret
 42e:	21 b3       	in	r18, 0x11	; 17
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	82 2b       	or	r24, r18
 440:	81 bb       	out	0x11, r24	; 17
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	08 95       	ret
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	08 95       	ret
 44a:	84 e0       	ldi	r24, 0x04	; 4
 44c:	08 95       	ret
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	08 95       	ret
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	08 95       	ret

00000456 <dio_write>:
 456:	68 30       	cpi	r22, 0x08	; 8
 458:	08 f0       	brcs	.+2      	; 0x45c <dio_write+0x6>
 45a:	80 c0       	rjmp	.+256    	; 0x55c <dio_write+0x106>
 45c:	44 23       	and	r20, r20
 45e:	21 f0       	breq	.+8      	; 0x468 <dio_write+0x12>
 460:	41 30       	cpi	r20, 0x01	; 1
 462:	09 f4       	brne	.+2      	; 0x466 <dio_write+0x10>
 464:	40 c0       	rjmp	.+128    	; 0x4e6 <dio_write+0x90>
 466:	7c c0       	rjmp	.+248    	; 0x560 <dio_write+0x10a>
 468:	82 34       	cpi	r24, 0x42	; 66
 46a:	b1 f0       	breq	.+44     	; 0x498 <dio_write+0x42>
 46c:	18 f4       	brcc	.+6      	; 0x474 <dio_write+0x1e>
 46e:	81 34       	cpi	r24, 0x41	; 65
 470:	31 f0       	breq	.+12     	; 0x47e <dio_write+0x28>
 472:	78 c0       	rjmp	.+240    	; 0x564 <dio_write+0x10e>
 474:	83 34       	cpi	r24, 0x43	; 67
 476:	e9 f0       	breq	.+58     	; 0x4b2 <dio_write+0x5c>
 478:	84 34       	cpi	r24, 0x44	; 68
 47a:	41 f1       	breq	.+80     	; 0x4cc <dio_write+0x76>
 47c:	73 c0       	rjmp	.+230    	; 0x564 <dio_write+0x10e>
 47e:	2b b3       	in	r18, 0x1b	; 27
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <dio_write+0x34>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <dio_write+0x30>
 48e:	80 95       	com	r24
 490:	82 23       	and	r24, r18
 492:	8b bb       	out	0x1b, r24	; 27
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	08 95       	ret
 498:	28 b3       	in	r18, 0x18	; 24
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <dio_write+0x4e>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <dio_write+0x4a>
 4a8:	80 95       	com	r24
 4aa:	82 23       	and	r24, r18
 4ac:	88 bb       	out	0x18, r24	; 24
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	08 95       	ret
 4b2:	25 b3       	in	r18, 0x15	; 21
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <dio_write+0x68>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	6a 95       	dec	r22
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <dio_write+0x64>
 4c2:	80 95       	com	r24
 4c4:	82 23       	and	r24, r18
 4c6:	85 bb       	out	0x15, r24	; 21
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	08 95       	ret
 4cc:	22 b3       	in	r18, 0x12	; 18
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <dio_write+0x82>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	6a 95       	dec	r22
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <dio_write+0x7e>
 4dc:	80 95       	com	r24
 4de:	82 23       	and	r24, r18
 4e0:	82 bb       	out	0x12, r24	; 18
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	08 95       	ret
 4e6:	82 34       	cpi	r24, 0x42	; 66
 4e8:	a9 f0       	breq	.+42     	; 0x514 <dio_write+0xbe>
 4ea:	18 f4       	brcc	.+6      	; 0x4f2 <dio_write+0x9c>
 4ec:	81 34       	cpi	r24, 0x41	; 65
 4ee:	31 f0       	breq	.+12     	; 0x4fc <dio_write+0xa6>
 4f0:	3b c0       	rjmp	.+118    	; 0x568 <dio_write+0x112>
 4f2:	83 34       	cpi	r24, 0x43	; 67
 4f4:	d9 f0       	breq	.+54     	; 0x52c <dio_write+0xd6>
 4f6:	84 34       	cpi	r24, 0x44	; 68
 4f8:	29 f1       	breq	.+74     	; 0x544 <dio_write+0xee>
 4fa:	36 c0       	rjmp	.+108    	; 0x568 <dio_write+0x112>
 4fc:	2b b3       	in	r18, 0x1b	; 27
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <dio_write+0xb2>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <dio_write+0xae>
 50c:	82 2b       	or	r24, r18
 50e:	8b bb       	out	0x1b, r24	; 27
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret
 514:	28 b3       	in	r18, 0x18	; 24
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	02 c0       	rjmp	.+4      	; 0x520 <dio_write+0xca>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	6a 95       	dec	r22
 522:	e2 f7       	brpl	.-8      	; 0x51c <dio_write+0xc6>
 524:	82 2b       	or	r24, r18
 526:	88 bb       	out	0x18, r24	; 24
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
 52c:	25 b3       	in	r18, 0x15	; 21
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <dio_write+0xe2>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	6a 95       	dec	r22
 53a:	e2 f7       	brpl	.-8      	; 0x534 <dio_write+0xde>
 53c:	82 2b       	or	r24, r18
 53e:	85 bb       	out	0x15, r24	; 21
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	08 95       	ret
 544:	22 b3       	in	r18, 0x12	; 18
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <dio_write+0xfa>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	6a 95       	dec	r22
 552:	e2 f7       	brpl	.-8      	; 0x54c <dio_write+0xf6>
 554:	82 2b       	or	r24, r18
 556:	82 bb       	out	0x12, r24	; 18
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	08 95       	ret
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	08 95       	ret
 560:	83 e0       	ldi	r24, 0x03	; 3
 562:	08 95       	ret
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	08 95       	ret
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	08 95       	ret

0000056c <dio_read>:
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_dio_status_t_ dio_read(uint8_t_ uint8_portNumber, uint8_t_ uint8_pinNumber, uint8_t_ *uint8_value)		// Read dio
{
	enu_dio_status_t_ error = DIO_OK;
	if (TRUE == (uint8_pinNumber < 8))
 56c:	68 30       	cpi	r22, 0x08	; 8
 56e:	08 f0       	brcs	.+2      	; 0x572 <dio_read+0x6>
 570:	68 c0       	rjmp	.+208    	; 0x642 <dio_read+0xd6>
	{

		switch(uint8_portNumber)
 572:	82 34       	cpi	r24, 0x42	; 66
 574:	09 f1       	breq	.+66     	; 0x5b8 <dio_read+0x4c>
 576:	18 f4       	brcc	.+6      	; 0x57e <dio_read+0x12>
 578:	81 34       	cpi	r24, 0x41	; 65
 57a:	39 f0       	breq	.+14     	; 0x58a <dio_read+0x1e>
 57c:	64 c0       	rjmp	.+200    	; 0x646 <dio_read+0xda>
 57e:	83 34       	cpi	r24, 0x43	; 67
 580:	91 f1       	breq	.+100    	; 0x5e6 <dio_read+0x7a>
 582:	84 34       	cpi	r24, 0x44	; 68
 584:	09 f4       	brne	.+2      	; 0x588 <dio_read+0x1c>
 586:	46 c0       	rjmp	.+140    	; 0x614 <dio_read+0xa8>
 588:	5e c0       	rjmp	.+188    	; 0x646 <dio_read+0xda>
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
 58a:	79 b3       	in	r23, 0x19	; 25
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	9c 01       	movw	r18, r24
 592:	06 2e       	mov	r0, r22
 594:	02 c0       	rjmp	.+4      	; 0x59a <dio_read+0x2e>
 596:	22 0f       	add	r18, r18
 598:	33 1f       	adc	r19, r19
 59a:	0a 94       	dec	r0
 59c:	e2 f7       	brpl	.-8      	; 0x596 <dio_read+0x2a>
 59e:	87 2f       	mov	r24, r23
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	82 23       	and	r24, r18
 5a4:	93 23       	and	r25, r19
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <dio_read+0x40>
 5a8:	95 95       	asr	r25
 5aa:	87 95       	ror	r24
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <dio_read+0x3c>
 5b0:	fa 01       	movw	r30, r20
 5b2:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_dio_status_t_ dio_read(uint8_t_ uint8_portNumber, uint8_t_ uint8_pinNumber, uint8_t_ *uint8_value)		// Read dio
{
	enu_dio_status_t_ error = DIO_OK;
 5b4:	80 e0       	ldi	r24, 0x00	; 0
	if (TRUE == (uint8_pinNumber < 8))
	{

		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
 5b6:	08 95       	ret
			case DIO_PORT_B:	*uint8_value = GET_BIT(PINB,uint8_pinNumber);		break;
 5b8:	76 b3       	in	r23, 0x16	; 22
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	9c 01       	movw	r18, r24
 5c0:	06 2e       	mov	r0, r22
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <dio_read+0x5c>
 5c4:	22 0f       	add	r18, r18
 5c6:	33 1f       	adc	r19, r19
 5c8:	0a 94       	dec	r0
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <dio_read+0x58>
 5cc:	87 2f       	mov	r24, r23
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	82 23       	and	r24, r18
 5d2:	93 23       	and	r25, r19
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <dio_read+0x6e>
 5d6:	95 95       	asr	r25
 5d8:	87 95       	ror	r24
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <dio_read+0x6a>
 5de:	fa 01       	movw	r30, r20
 5e0:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_dio_status_t_ dio_read(uint8_t_ uint8_portNumber, uint8_t_ uint8_pinNumber, uint8_t_ *uint8_value)		// Read dio
{
	enu_dio_status_t_ error = DIO_OK;
 5e2:	80 e0       	ldi	r24, 0x00	; 0
	{

		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
			case DIO_PORT_B:	*uint8_value = GET_BIT(PINB,uint8_pinNumber);		break;
 5e4:	08 95       	ret
			case DIO_PORT_C:	*uint8_value = GET_BIT(PINC,uint8_pinNumber);		break;
 5e6:	73 b3       	in	r23, 0x13	; 19
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	9c 01       	movw	r18, r24
 5ee:	06 2e       	mov	r0, r22
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <dio_read+0x8a>
 5f2:	22 0f       	add	r18, r18
 5f4:	33 1f       	adc	r19, r19
 5f6:	0a 94       	dec	r0
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <dio_read+0x86>
 5fa:	87 2f       	mov	r24, r23
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	82 23       	and	r24, r18
 600:	93 23       	and	r25, r19
 602:	02 c0       	rjmp	.+4      	; 0x608 <dio_read+0x9c>
 604:	95 95       	asr	r25
 606:	87 95       	ror	r24
 608:	6a 95       	dec	r22
 60a:	e2 f7       	brpl	.-8      	; 0x604 <dio_read+0x98>
 60c:	fa 01       	movw	r30, r20
 60e:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_dio_status_t_ dio_read(uint8_t_ uint8_portNumber, uint8_t_ uint8_pinNumber, uint8_t_ *uint8_value)		// Read dio
{
	enu_dio_status_t_ error = DIO_OK;
 610:	80 e0       	ldi	r24, 0x00	; 0

		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
			case DIO_PORT_B:	*uint8_value = GET_BIT(PINB,uint8_pinNumber);		break;
			case DIO_PORT_C:	*uint8_value = GET_BIT(PINC,uint8_pinNumber);		break;
 612:	08 95       	ret
			case DIO_PORT_D:	*uint8_value = GET_BIT(PIND,uint8_pinNumber);		break;
 614:	70 b3       	in	r23, 0x10	; 16
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	9c 01       	movw	r18, r24
 61c:	06 2e       	mov	r0, r22
 61e:	02 c0       	rjmp	.+4      	; 0x624 <dio_read+0xb8>
 620:	22 0f       	add	r18, r18
 622:	33 1f       	adc	r19, r19
 624:	0a 94       	dec	r0
 626:	e2 f7       	brpl	.-8      	; 0x620 <dio_read+0xb4>
 628:	87 2f       	mov	r24, r23
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	82 23       	and	r24, r18
 62e:	93 23       	and	r25, r19
 630:	02 c0       	rjmp	.+4      	; 0x636 <dio_read+0xca>
 632:	95 95       	asr	r25
 634:	87 95       	ror	r24
 636:	6a 95       	dec	r22
 638:	e2 f7       	brpl	.-8      	; 0x632 <dio_read+0xc6>
 63a:	fa 01       	movw	r30, r20
 63c:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_dio_status_t_ dio_read(uint8_t_ uint8_portNumber, uint8_t_ uint8_pinNumber, uint8_t_ *uint8_value)		// Read dio
{
	enu_dio_status_t_ error = DIO_OK;
 63e:	80 e0       	ldi	r24, 0x00	; 0
		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
			case DIO_PORT_B:	*uint8_value = GET_BIT(PINB,uint8_pinNumber);		break;
			case DIO_PORT_C:	*uint8_value = GET_BIT(PINC,uint8_pinNumber);		break;
			case DIO_PORT_D:	*uint8_value = GET_BIT(PIND,uint8_pinNumber);		break;
 640:	08 95       	ret
			default:		error = DIO_WRONG_PORT_NUMBER;				break;
		}
	}
	else
	{
		error = DIO_WRONG_PIN_NUMBER;
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	08 95       	ret
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
			case DIO_PORT_B:	*uint8_value = GET_BIT(PINB,uint8_pinNumber);		break;
			case DIO_PORT_C:	*uint8_value = GET_BIT(PINC,uint8_pinNumber);		break;
			case DIO_PORT_D:	*uint8_value = GET_BIT(PIND,uint8_pinNumber);		break;
			default:		error = DIO_WRONG_PORT_NUMBER;				break;
 646:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = DIO_WRONG_PIN_NUMBER;
	}
	return error;
}
 648:	08 95       	ret

0000064a <__tablejump2__>:
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	05 90       	lpm	r0, Z+
 650:	f4 91       	lpm	r31, Z
 652:	e0 2d       	mov	r30, r0
 654:	09 94       	ijmp

00000656 <_exit>:
 656:	f8 94       	cli

00000658 <__stop_program>:
 658:	ff cf       	rjmp	.-2      	; 0x658 <__stop_program>
