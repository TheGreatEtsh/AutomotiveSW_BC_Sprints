
LED_Sequence.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000149e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000149e  00001532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800072  00800072  00001544  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001de5  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c52  00000000  00000000  00003565  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001258  00000000  00000000  000041b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000470  00000000  00000000  00005410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bd1  00000000  00000000  00005880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001616  00000000  00000000  00006451  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00007a67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_1>
       8:	0c 94 42 04 	jmp	0x884	; 0x884 <__vector_2>
       c:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	c3 00       	.word	0x00c3	; ????
      56:	d0 00       	.word	0x00d0	; ????
      58:	dd 00       	.word	0x00dd	; ????
      5a:	ea 00       	.word	0x00ea	; ????
      5c:	f7 00       	.word	0x00f7	; ????
      5e:	04 01       	movw	r0, r8
      60:	11 01       	movw	r2, r2
      62:	1e 01       	movw	r2, r28

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e9       	ldi	r30, 0x9E	; 158
      78:	f4 e1       	ldi	r31, 0x14	; 20
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	a2 e7       	ldi	r26, 0x72	; 114
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a2 3a       	cpi	r26, 0xA2	; 162
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 43 02 	call	0x486	; 0x486 <main>
      9a:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <button1Task>:

}

void button1Task(void)
{
	switch (blinkMode)
      a2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <blinkMode>
      a6:	82 30       	cpi	r24, 0x02	; 2
      a8:	e9 f0       	breq	.+58     	; 0xe4 <button1Task+0x42>
      aa:	28 f4       	brcc	.+10     	; 0xb6 <button1Task+0x14>
      ac:	88 23       	and	r24, r24
      ae:	41 f0       	breq	.+16     	; 0xc0 <button1Task+0x1e>
      b0:	81 30       	cpi	r24, 0x01	; 1
      b2:	79 f0       	breq	.+30     	; 0xd2 <button1Task+0x30>
      b4:	08 95       	ret
      b6:	83 30       	cpi	r24, 0x03	; 3
      b8:	f1 f0       	breq	.+60     	; 0xf6 <button1Task+0x54>
      ba:	84 30       	cpi	r24, 0x04	; 4
      bc:	29 f1       	breq	.+74     	; 0x108 <button1Task+0x66>
      be:	08 95       	ret
	{
		case BLINK_1:	timeOn = 1; timeOff = 9;	blinkMode = BLINK_2;	break;
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timeOn>
      c6:	99 e0       	ldi	r25, 0x09	; 9
      c8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
      cc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <blinkMode>
      d0:	08 95       	ret
		case BLINK_2:	timeOn = 2;	timeOff = 8;	blinkMode = BLINK_3;	break;
      d2:	82 e0       	ldi	r24, 0x02	; 2
      d4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timeOn>
      d8:	98 e0       	ldi	r25, 0x08	; 8
      da:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
      de:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <blinkMode>
      e2:	08 95       	ret
		case BLINK_3:	timeOn = 3;	timeOff = 7;	blinkMode = BLINK_4;	break;
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timeOn>
      ea:	97 e0       	ldi	r25, 0x07	; 7
      ec:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
      f0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <blinkMode>
      f4:	08 95       	ret
		case BLINK_4:	timeOn = 5;	timeOff = 5;	blinkMode = BLINK_5;	break;
      f6:	85 e0       	ldi	r24, 0x05	; 5
      f8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timeOn>
      fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     100:	84 e0       	ldi	r24, 0x04	; 4
     102:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <blinkMode>
     106:	08 95       	ret
		case BLINK_5:	timeOn = 8;	timeOff = 2;	blinkMode = BLINK_1;	break;
     108:	88 e0       	ldi	r24, 0x08	; 8
     10a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timeOn>
     10e:	82 e0       	ldi	r24, 0x02	; 2
     110:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     114:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <blinkMode>
     118:	08 95       	ret

0000011a <APP_initModules>:
volatile uint8_t_ state = TURN_ON;


void APP_initModules(void)
{
	BUTTON_init(BUTTON_0_PORT, BUTTON_0_Pin);
     11a:	64 e0       	ldi	r22, 0x04	; 4
     11c:	83 e4       	ldi	r24, 0x43	; 67
     11e:	0e 94 ac 01 	call	0x358	; 0x358 <BUTTON_init>
	LED_init();
     122:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_init>
	
	EXTINT_Init(INT_0);
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 cd 03 	call	0x79a	; 0x79a <EXTINT_Init>
	EXTINT_setCallBackInt(INT_0, button1Task);
     12c:	61 e5       	ldi	r22, 0x51	; 81
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 01 04 	call	0x802	; 0x802 <EXTINT_setCallBackInt>
	
	timer_init();
     136:	0e 94 94 04 	call	0x928	; 0x928 <timer_init>
	timer_set_time(TIMER_0, 100);
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	68 ec       	ldi	r22, 0xC8	; 200
     140:	72 e4       	ldi	r23, 0x42	; 66
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 1e 05 	call	0xa3c	; 0xa3c <timer_set_time>
	timer_set_callback(TIMER_0, sysTickTask);
     148:	63 e7       	ldi	r22, 0x73	; 115
     14a:	71 e0       	ldi	r23, 0x01	; 1
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	0e 94 6c 07 	call	0xed8	; 0xed8 <timer_set_callback>
	timer_resume(TIMER_0);
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	0e 94 75 06 	call	0xcea	; 0xcea <timer_resume>
     158:	08 95       	ret

0000015a <button0Task>:
		}
	}
}

void button0Task (uint8_t_* counter, uint8_t_ state)
{
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	ec 01       	movw	r28, r24
	switch (state)
     160:	66 23       	and	r22, r22
     162:	21 f0       	breq	.+8      	; 0x16c <button0Task+0x12>
     164:	61 30       	cpi	r22, 0x01	; 1
     166:	09 f4       	brne	.+2      	; 0x16a <button0Task+0x10>
     168:	77 c0       	rjmp	.+238    	; 0x258 <button0Task+0xfe>
     16a:	82 c0       	rjmp	.+260    	; 0x270 <button0Task+0x116>
	{
		case TURN_ON:
		switch(*counter)
     16c:	e8 81       	ld	r30, Y
     16e:	8e 2f       	mov	r24, r30
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	fc 01       	movw	r30, r24
     174:	31 97       	sbiw	r30, 0x01	; 1
     176:	e8 30       	cpi	r30, 0x08	; 8
     178:	f1 05       	cpc	r31, r1
     17a:	08 f0       	brcs	.+2      	; 0x17e <button0Task+0x24>
     17c:	79 c0       	rjmp	.+242    	; 0x270 <button0Task+0x116>
     17e:	e6 5d       	subi	r30, 0xD6	; 214
     180:	ff 4f       	sbci	r31, 0xFF	; 255
     182:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__tablejump2__>
		{
			case 1:
			LED_on(LED_0);
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_off(LED_1);
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_off(LED_2);
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_off(LED_3);
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			break;
     19e:	68 c0       	rjmp	.+208    	; 0x270 <button0Task+0x116>
			
			case 2:
			LED_on(LED_0);
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_on(LED_1);
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_off(LED_2);
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_off(LED_3);
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			break;
     1b8:	5b c0       	rjmp	.+182    	; 0x270 <button0Task+0x116>
			
			case 3:
			LED_on(LED_0);
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_on(LED_1);
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_on(LED_2);
     1c6:	82 e0       	ldi	r24, 0x02	; 2
     1c8:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_off(LED_3);
     1cc:	83 e0       	ldi	r24, 0x03	; 3
     1ce:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			break;
     1d2:	4e c0       	rjmp	.+156    	; 0x270 <button0Task+0x116>
			
			case 4:
			LED_on(LED_0);
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_on(LED_1);
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_on(LED_2);
     1e0:	82 e0       	ldi	r24, 0x02	; 2
     1e2:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_on(LED_3);
     1e6:	83 e0       	ldi	r24, 0x03	; 3
     1e8:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			break;
     1ec:	41 c0       	rjmp	.+130    	; 0x270 <button0Task+0x116>
			
			case 5:
			LED_off(LED_0);
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_on(LED_1);
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_on(LED_2);
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_on(LED_3);
     200:	83 e0       	ldi	r24, 0x03	; 3
     202:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			break;
     206:	34 c0       	rjmp	.+104    	; 0x270 <button0Task+0x116>
			
			case 6:
			LED_off(LED_0);
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_off(LED_1);
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_on(LED_2);
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			LED_on(LED_3);
     21a:	83 e0       	ldi	r24, 0x03	; 3
     21c:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			break;
     220:	27 c0       	rjmp	.+78     	; 0x270 <button0Task+0x116>
			
			case 7:
			LED_off(LED_0);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_off(LED_1);
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_off(LED_2);
     22e:	82 e0       	ldi	r24, 0x02	; 2
     230:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_on(LED_3);
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	0e 94 df 01 	call	0x3be	; 0x3be <LED_on>
			break;
     23a:	1a c0       	rjmp	.+52     	; 0x270 <button0Task+0x116>
			
			case 8:
			LED_off(LED_0);
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_off(LED_1);
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_off(LED_2);
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			LED_off(LED_3);
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
			*counter = 0;	break;
     254:	18 82       	st	Y, r1
     256:	0c c0       	rjmp	.+24     	; 0x270 <button0Task+0x116>
			
		}
		break;
		
		case TURN_OFF:
		LED_off(LED_0);
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
		LED_off(LED_1);
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
		LED_off(LED_2);
     264:	82 e0       	ldi	r24, 0x02	; 2
     266:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
		LED_off(LED_3);
     26a:	83 e0       	ldi	r24, 0x03	; 3
     26c:	0e 94 11 02 	call	0x422	; 0x422 <LED_off>
		
		default:
		break;
	}

}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <APP_ledSequenceV_3>:
}



void APP_ledSequenceV_3 (void)
{
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	1f 92       	push	r1
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
	while (1)
	{
		
		uint8_t_ button0State = 0;
     280:	19 82       	std	Y+1, r1	; 0x01
		BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &button0State);
     282:	ae 01       	movw	r20, r28
     284:	4f 5f       	subi	r20, 0xFF	; 255
     286:	5f 4f       	sbci	r21, 0xFF	; 255
     288:	64 e0       	ldi	r22, 0x04	; 4
     28a:	83 e4       	ldi	r24, 0x43	; 67
     28c:	0e 94 b2 01 	call	0x364	; 0x364 <BUTTON_read>
		if (button0State)
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	88 23       	and	r24, r24
     294:	a9 f3       	breq	.-22     	; 0x280 <APP_ledSequenceV_3+0xa>
		{
			BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &button0State);
     296:	ae 01       	movw	r20, r28
     298:	4f 5f       	subi	r20, 0xFF	; 255
     29a:	5f 4f       	sbci	r21, 0xFF	; 255
     29c:	64 e0       	ldi	r22, 0x04	; 4
     29e:	83 e4       	ldi	r24, 0x43	; 67
     2a0:	0e 94 b2 01 	call	0x364	; 0x364 <BUTTON_read>
			if(button0State)
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	88 23       	and	r24, r24
     2a8:	59 f3       	breq	.-42     	; 0x280 <APP_ledSequenceV_3+0xa>
			{
				BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &button0State);
     2aa:	ae 01       	movw	r20, r28
     2ac:	4f 5f       	subi	r20, 0xFF	; 255
     2ae:	5f 4f       	sbci	r21, 0xFF	; 255
     2b0:	64 e0       	ldi	r22, 0x04	; 4
     2b2:	83 e4       	ldi	r24, 0x43	; 67
     2b4:	0e 94 b2 01 	call	0x364	; 0x364 <BUTTON_read>
				counter++;
     2b8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <counter>
     2bc:	8f 5f       	subi	r24, 0xFF	; 255
     2be:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <counter>
				button0Task(&counter, state);
     2c2:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <__data_end>
     2c6:	84 e7       	ldi	r24, 0x74	; 116
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 ad 00 	call	0x15a	; 0x15a <button0Task>
				while(button0State)
     2ce:	07 c0       	rjmp	.+14     	; 0x2de <APP_ledSequenceV_3+0x68>
				{
					BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &button0State);
     2d0:	ae 01       	movw	r20, r28
     2d2:	4f 5f       	subi	r20, 0xFF	; 255
     2d4:	5f 4f       	sbci	r21, 0xFF	; 255
     2d6:	64 e0       	ldi	r22, 0x04	; 4
     2d8:	83 e4       	ldi	r24, 0x43	; 67
     2da:	0e 94 b2 01 	call	0x364	; 0x364 <BUTTON_read>
			if(button0State)
			{
				BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &button0State);
				counter++;
				button0Task(&counter, state);
				while(button0State)
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	81 11       	cpse	r24, r1
     2e2:	f6 cf       	rjmp	.-20     	; 0x2d0 <APP_ledSequenceV_3+0x5a>
     2e4:	cd cf       	rjmp	.-102    	; 0x280 <APP_ledSequenceV_3+0xa>

000002e6 <sysTickTask>:
}


void sysTickTask (void)
{
	if (tickNumber < timeOn)
     2e6:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <tickNumber>
     2ea:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <timeOn>
     2ee:	28 17       	cp	r18, r24
     2f0:	68 f4       	brcc	.+26     	; 0x30c <sysTickTask+0x26>
	{
		state = TURN_ON;
     2f2:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		button0Task(&counter, TURN_ON);
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	84 e7       	ldi	r24, 0x74	; 116
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 ad 00 	call	0x15a	; 0x15a <button0Task>
		tickNumber++;
     300:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <tickNumber>
     304:	8f 5f       	subi	r24, 0xFF	; 255
     306:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <tickNumber>
     30a:	08 95       	ret
	}
	else if (tickNumber >= timeOn && tickNumber < (timeOn+timeOff))
     30c:	28 17       	cp	r18, r24
     30e:	18 f1       	brcs	.+70     	; 0x356 <sysTickTask+0x70>
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	84 0f       	add	r24, r20
     31a:	91 1d       	adc	r25, r1
     31c:	28 17       	cp	r18, r24
     31e:	39 07       	cpc	r19, r25
     320:	d4 f4       	brge	.+52     	; 0x356 <sysTickTask+0x70>
	{
		state = TURN_OFF;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
		button0Task(&counter, TURN_OFF);
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	84 e7       	ldi	r24, 0x74	; 116
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 ad 00 	call	0x15a	; 0x15a <button0Task>
		tickNumber++;
     332:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <tickNumber>
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <tickNumber>
		if (tickNumber >= (timeOn + timeOff))
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <timeOn>
     342:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	24 0f       	add	r18, r20
     34a:	31 1d       	adc	r19, r1
     34c:	82 17       	cp	r24, r18
     34e:	93 07       	cpc	r25, r19
     350:	14 f0       	brlt	.+4      	; 0x356 <sysTickTask+0x70>
		{
			tickNumber = 0;
     352:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <tickNumber>
     356:	08 95       	ret

00000358 <BUTTON_init>:


EN_buttonError_t BUTTON_init(uint8_t_ buttonPort, uint8_t_ buttonPin)
{
	EN_buttonError_t error = BUTTON_OK;
	if (dio_init(buttonPort, buttonPin, DIO_INPUT) != DIO_OK)
     358:	40 e0       	ldi	r20, 0x00	; 0
     35a:	0e 94 48 02 	call	0x490	; 0x490 <dio_init>
     35e:	81 11       	cpse	r24, r1
	{
		error = BUTTON_NOK;
     360:	81 e0       	ldi	r24, 0x01	; 1
		/*BUTTON_OK*/
	}
	
	
	return error;
}
     362:	08 95       	ret

00000364 <BUTTON_read>:

EN_buttonError_t BUTTON_read(uint8_t_ buttonPort, uint8_t_ buttonPin, uint8_t_ *buttonState)
{
	EN_buttonError_t error = BUTTON_OK;
	
	if (dio_read(buttonPort, buttonPin, buttonState) != DIO_OK)
     364:	0e 94 5e 03 	call	0x6bc	; 0x6bc <dio_read>
     368:	81 11       	cpse	r24, r1
	{
		error = BUTTON_NOK;
     36a:	81 e0       	ldi	r24, 0x01	; 1
	{
		/*BUTTON_OK*/
	}
	
	return error;
     36c:	08 95       	ret

0000036e <LED_init>:

extern str_LED_config_t cst_str_LED_config[LED_NUMBER_OF_LEDS];


enu_LED_status_t LED_init(void)
{
     36e:	cf 93       	push	r28
	enu_LED_status_t en_a_error = LED_OK;
	
	for(uint8_t_ counter = 0; counter < LED_NUMBER_OF_LEDS; counter++)	
     370:	c0 e0       	ldi	r28, 0x00	; 0
extern str_LED_config_t cst_str_LED_config[LED_NUMBER_OF_LEDS];


enu_LED_status_t LED_init(void)
{
	enu_LED_status_t en_a_error = LED_OK;
     372:	80 e0       	ldi	r24, 0x00	; 0
	
	for(uint8_t_ counter = 0; counter < LED_NUMBER_OF_LEDS; counter++)	
     374:	20 c0       	rjmp	.+64     	; 0x3b6 <LED_init+0x48>
	{
		
		if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
     376:	2c 2f       	mov	r18, r28
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	f9 01       	movw	r30, r18
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	e2 0f       	add	r30, r18
     382:	f3 1f       	adc	r31, r19
     384:	ee 59       	subi	r30, 0x9E	; 158
     386:	ff 4f       	sbci	r31, 0xFF	; 255
     388:	81 81       	ldd	r24, Z+1	; 0x01
     38a:	85 34       	cpi	r24, 0x45	; 69
     38c:	80 f4       	brcc	.+32     	; 0x3ae <LED_init+0x40>
		{
			
			en_a_error = LED_WRONG_LED_PORT;
		}
		else if (cst_str_LED_config[counter].uint8_ledPin > 7)
     38e:	f9 01       	movw	r30, r18
     390:	ee 0f       	add	r30, r30
     392:	ff 1f       	adc	r31, r31
     394:	2e 0f       	add	r18, r30
     396:	3f 1f       	adc	r19, r31
     398:	f9 01       	movw	r30, r18
     39a:	ee 59       	subi	r30, 0x9E	; 158
     39c:	ff 4f       	sbci	r31, 0xFF	; 255
     39e:	62 81       	ldd	r22, Z+2	; 0x02
     3a0:	68 30       	cpi	r22, 0x08	; 8
     3a2:	38 f4       	brcc	.+14     	; 0x3b2 <LED_init+0x44>
		{
			en_a_error = LED_WRONG_LED_PIN;
		}
		else
		{
			dio_init(cst_str_LED_config[counter].uint8_ledPort, 
     3a4:	41 e0       	ldi	r20, 0x01	; 1
     3a6:	0e 94 48 02 	call	0x490	; 0x490 <dio_init>
						cst_str_LED_config[counter].uint8_ledPin, 
						DIO_OUTPUT);
			en_a_error = LED_OK;
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <LED_init+0x46>
	{
		
		if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
		{
			
			en_a_error = LED_WRONG_LED_PORT;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <LED_init+0x46>
		}
		else if (cst_str_LED_config[counter].uint8_ledPin > 7)
		{
			en_a_error = LED_WRONG_LED_PIN;
     3b2:	82 e0       	ldi	r24, 0x02	; 2

enu_LED_status_t LED_init(void)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	for(uint8_t_ counter = 0; counter < LED_NUMBER_OF_LEDS; counter++)	
     3b4:	cf 5f       	subi	r28, 0xFF	; 255
     3b6:	c4 30       	cpi	r28, 0x04	; 4
     3b8:	f0 f2       	brcs	.-68     	; 0x376 <LED_init+0x8>
			en_a_error = LED_OK;
		}
		
	}
	return en_a_error;
}
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <LED_on>:

enu_LED_status_t LED_on(uint8_t_ uint8_ledID)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	uint8_t_ counter = 0;
     3be:	90 e0       	ldi	r25, 0x00	; 0
	for (;counter < LED_NUMBER_OF_LEDS; counter++)
     3c0:	0e c0       	rjmp	.+28     	; 0x3de <LED_on+0x20>
	{
		if (uint8_ledID == cst_str_LED_config[counter].uint8_ledID)
     3c2:	29 2f       	mov	r18, r25
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	ee 0f       	add	r30, r30
     3ca:	ff 1f       	adc	r31, r31
     3cc:	2e 0f       	add	r18, r30
     3ce:	3f 1f       	adc	r19, r31
     3d0:	f9 01       	movw	r30, r18
     3d2:	ee 59       	subi	r30, 0x9E	; 158
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	20 81       	ld	r18, Z
     3d8:	28 17       	cp	r18, r24
     3da:	19 f0       	breq	.+6      	; 0x3e2 <LED_on+0x24>
enu_LED_status_t LED_on(uint8_t_ uint8_ledID)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	uint8_t_ counter = 0;
	for (;counter < LED_NUMBER_OF_LEDS; counter++)
     3dc:	9f 5f       	subi	r25, 0xFF	; 255
     3de:	94 30       	cpi	r25, 0x04	; 4
     3e0:	80 f3       	brcs	.-32     	; 0x3c2 <LED_on+0x4>
		{
			break;
		}
	}
	
	if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
     3e2:	29 2f       	mov	r18, r25
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	f9 01       	movw	r30, r18
     3e8:	ee 0f       	add	r30, r30
     3ea:	ff 1f       	adc	r31, r31
     3ec:	e2 0f       	add	r30, r18
     3ee:	f3 1f       	adc	r31, r19
     3f0:	ee 59       	subi	r30, 0x9E	; 158
     3f2:	ff 4f       	sbci	r31, 0xFF	; 255
     3f4:	81 81       	ldd	r24, Z+1	; 0x01
     3f6:	85 34       	cpi	r24, 0x45	; 69
     3f8:	80 f4       	brcc	.+32     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		en_a_error = LED_WRONG_LED_PORT;
	}
	else if (cst_str_LED_config[counter].uint8_ledPin > 7)
     3fa:	f9 01       	movw	r30, r18
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	2e 0f       	add	r18, r30
     402:	3f 1f       	adc	r19, r31
     404:	f9 01       	movw	r30, r18
     406:	ee 59       	subi	r30, 0x9E	; 158
     408:	ff 4f       	sbci	r31, 0xFF	; 255
     40a:	62 81       	ldd	r22, Z+2	; 0x02
     40c:	68 30       	cpi	r22, 0x08	; 8
     40e:	38 f4       	brcc	.+14     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	{
		en_a_error = LED_WRONG_LED_PIN;
	}
	else
	{
		dio_write(cst_str_LED_config[counter].uint8_ledPort,
     410:	41 e0       	ldi	r20, 0x01	; 1
     412:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <dio_write>
					cst_str_LED_config[counter].uint8_ledPin, 
					DIO_HIGH);
		en_a_error = LED_OK;
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	08 95       	ret
		}
	}
	
	if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
	{
		en_a_error = LED_WRONG_LED_PORT;
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	08 95       	ret
	}
	else if (cst_str_LED_config[counter].uint8_ledPin > 7)
	{
		en_a_error = LED_WRONG_LED_PIN;
     41e:	82 e0       	ldi	r24, 0x02	; 2
					DIO_HIGH);
		en_a_error = LED_OK;
	}
	
	return en_a_error;
}
     420:	08 95       	ret

00000422 <LED_off>:

enu_LED_status_t LED_off(uint8_t_ uint8_ledID)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	uint8_t_ counter = 0;
     422:	90 e0       	ldi	r25, 0x00	; 0
	for (;counter < LED_NUMBER_OF_LEDS; counter++)
     424:	0e c0       	rjmp	.+28     	; 0x442 <LED_off+0x20>
	{
		if (uint8_ledID == cst_str_LED_config[counter].uint8_ledID)
     426:	29 2f       	mov	r18, r25
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	f9 01       	movw	r30, r18
     42c:	ee 0f       	add	r30, r30
     42e:	ff 1f       	adc	r31, r31
     430:	2e 0f       	add	r18, r30
     432:	3f 1f       	adc	r19, r31
     434:	f9 01       	movw	r30, r18
     436:	ee 59       	subi	r30, 0x9E	; 158
     438:	ff 4f       	sbci	r31, 0xFF	; 255
     43a:	20 81       	ld	r18, Z
     43c:	28 17       	cp	r18, r24
     43e:	19 f0       	breq	.+6      	; 0x446 <LED_off+0x24>
enu_LED_status_t LED_off(uint8_t_ uint8_ledID)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	uint8_t_ counter = 0;
	for (;counter < LED_NUMBER_OF_LEDS; counter++)
     440:	9f 5f       	subi	r25, 0xFF	; 255
     442:	94 30       	cpi	r25, 0x04	; 4
     444:	80 f3       	brcs	.-32     	; 0x426 <LED_off+0x4>
		{
			break;
		}
	}
	
	if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
     446:	29 2f       	mov	r18, r25
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	f9 01       	movw	r30, r18
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	e2 0f       	add	r30, r18
     452:	f3 1f       	adc	r31, r19
     454:	ee 59       	subi	r30, 0x9E	; 158
     456:	ff 4f       	sbci	r31, 0xFF	; 255
     458:	81 81       	ldd	r24, Z+1	; 0x01
     45a:	85 34       	cpi	r24, 0x45	; 69
     45c:	80 f4       	brcc	.+32     	; 0x47e <LED_off+0x5c>
	{
		en_a_error = LED_WRONG_LED_PORT;
	}
	else if (cst_str_LED_config[counter].uint8_ledPin > 7)
     45e:	f9 01       	movw	r30, r18
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	2e 0f       	add	r18, r30
     466:	3f 1f       	adc	r19, r31
     468:	f9 01       	movw	r30, r18
     46a:	ee 59       	subi	r30, 0x9E	; 158
     46c:	ff 4f       	sbci	r31, 0xFF	; 255
     46e:	62 81       	ldd	r22, Z+2	; 0x02
     470:	68 30       	cpi	r22, 0x08	; 8
     472:	38 f4       	brcc	.+14     	; 0x482 <LED_off+0x60>
	{
		en_a_error = LED_WRONG_LED_PIN;
	}
	else
	{
		dio_write(cst_str_LED_config[counter].uint8_ledPort,
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <dio_write>
					cst_str_LED_config[counter].uint8_ledPin,
					DIO_LOW);
		en_a_error = LED_OK;
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	08 95       	ret
		}
	}
	
	if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
	{
		en_a_error = LED_WRONG_LED_PORT;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	08 95       	ret
	}
	else if (cst_str_LED_config[counter].uint8_ledPin > 7)
	{
		en_a_error = LED_WRONG_LED_PIN;
     482:	82 e0       	ldi	r24, 0x02	; 2
					DIO_LOW);
		en_a_error = LED_OK;
	}
	
	return en_a_error;
}
     484:	08 95       	ret

00000486 <main>:
#include "app.h"

int main(void)
{
    /* Replace with your application code */
	APP_initModules();
     486:	0e 94 8d 00 	call	0x11a	; 0x11a <APP_initModules>
	APP_ledSequenceV_3();
     48a:	0e 94 3b 01 	call	0x276	; 0x276 <APP_ledSequenceV_3>
     48e:	ff cf       	rjmp	.-2      	; 0x48e <main+0x8>

00000490 <dio_init>:
	else
	{
		error = DIO_WRONG_PIN_NUMBER;
	}
	return error;
}
     490:	68 30       	cpi	r22, 0x08	; 8
     492:	08 f0       	brcs	.+2      	; 0x496 <dio_init+0x6>
     494:	80 c0       	rjmp	.+256    	; 0x596 <dio_init+0x106>
     496:	44 23       	and	r20, r20
     498:	21 f0       	breq	.+8      	; 0x4a2 <dio_init+0x12>
     49a:	41 30       	cpi	r20, 0x01	; 1
     49c:	09 f4       	brne	.+2      	; 0x4a0 <dio_init+0x10>
     49e:	40 c0       	rjmp	.+128    	; 0x520 <dio_init+0x90>
     4a0:	7c c0       	rjmp	.+248    	; 0x59a <dio_init+0x10a>
     4a2:	82 34       	cpi	r24, 0x42	; 66
     4a4:	b1 f0       	breq	.+44     	; 0x4d2 <dio_init+0x42>
     4a6:	18 f4       	brcc	.+6      	; 0x4ae <dio_init+0x1e>
     4a8:	81 34       	cpi	r24, 0x41	; 65
     4aa:	31 f0       	breq	.+12     	; 0x4b8 <dio_init+0x28>
     4ac:	78 c0       	rjmp	.+240    	; 0x59e <dio_init+0x10e>
     4ae:	83 34       	cpi	r24, 0x43	; 67
     4b0:	e9 f0       	breq	.+58     	; 0x4ec <dio_init+0x5c>
     4b2:	84 34       	cpi	r24, 0x44	; 68
     4b4:	41 f1       	breq	.+80     	; 0x506 <dio_init+0x76>
     4b6:	73 c0       	rjmp	.+230    	; 0x59e <dio_init+0x10e>
     4b8:	2a b3       	in	r18, 0x1a	; 26
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <dio_init+0x34>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	6a 95       	dec	r22
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <dio_init+0x30>
     4c8:	80 95       	com	r24
     4ca:	82 23       	and	r24, r18
     4cc:	8a bb       	out	0x1a, r24	; 26
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	08 95       	ret
     4d2:	27 b3       	in	r18, 0x17	; 23
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <dio_init+0x4e>
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	6a 95       	dec	r22
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <dio_init+0x4a>
     4e2:	80 95       	com	r24
     4e4:	82 23       	and	r24, r18
     4e6:	87 bb       	out	0x17, r24	; 23
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	08 95       	ret
     4ec:	24 b3       	in	r18, 0x14	; 20
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <dio_init+0x68>
     4f4:	88 0f       	add	r24, r24
     4f6:	99 1f       	adc	r25, r25
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <dio_init+0x64>
     4fc:	80 95       	com	r24
     4fe:	82 23       	and	r24, r18
     500:	84 bb       	out	0x14, r24	; 20
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret
     506:	21 b3       	in	r18, 0x11	; 17
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	02 c0       	rjmp	.+4      	; 0x512 <dio_init+0x82>
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	6a 95       	dec	r22
     514:	e2 f7       	brpl	.-8      	; 0x50e <dio_init+0x7e>
     516:	80 95       	com	r24
     518:	82 23       	and	r24, r18
     51a:	81 bb       	out	0x11, r24	; 17
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	08 95       	ret
     520:	82 34       	cpi	r24, 0x42	; 66
     522:	a9 f0       	breq	.+42     	; 0x54e <dio_init+0xbe>
     524:	18 f4       	brcc	.+6      	; 0x52c <dio_init+0x9c>
     526:	81 34       	cpi	r24, 0x41	; 65
     528:	31 f0       	breq	.+12     	; 0x536 <dio_init+0xa6>
     52a:	3b c0       	rjmp	.+118    	; 0x5a2 <dio_init+0x112>
     52c:	83 34       	cpi	r24, 0x43	; 67
     52e:	d9 f0       	breq	.+54     	; 0x566 <dio_init+0xd6>
     530:	84 34       	cpi	r24, 0x44	; 68
     532:	29 f1       	breq	.+74     	; 0x57e <dio_init+0xee>
     534:	36 c0       	rjmp	.+108    	; 0x5a2 <dio_init+0x112>
     536:	2a b3       	in	r18, 0x1a	; 26
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	02 c0       	rjmp	.+4      	; 0x542 <dio_init+0xb2>
     53e:	88 0f       	add	r24, r24
     540:	99 1f       	adc	r25, r25
     542:	6a 95       	dec	r22
     544:	e2 f7       	brpl	.-8      	; 0x53e <dio_init+0xae>
     546:	82 2b       	or	r24, r18
     548:	8a bb       	out	0x1a, r24	; 26
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	08 95       	ret
     54e:	27 b3       	in	r18, 0x17	; 23
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	02 c0       	rjmp	.+4      	; 0x55a <dio_init+0xca>
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	6a 95       	dec	r22
     55c:	e2 f7       	brpl	.-8      	; 0x556 <dio_init+0xc6>
     55e:	82 2b       	or	r24, r18
     560:	87 bb       	out	0x17, r24	; 23
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	08 95       	ret
     566:	24 b3       	in	r18, 0x14	; 20
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <dio_init+0xe2>
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	6a 95       	dec	r22
     574:	e2 f7       	brpl	.-8      	; 0x56e <dio_init+0xde>
     576:	82 2b       	or	r24, r18
     578:	84 bb       	out	0x14, r24	; 20
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	08 95       	ret
     57e:	21 b3       	in	r18, 0x11	; 17
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	02 c0       	rjmp	.+4      	; 0x58a <dio_init+0xfa>
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	6a 95       	dec	r22
     58c:	e2 f7       	brpl	.-8      	; 0x586 <dio_init+0xf6>
     58e:	82 2b       	or	r24, r18
     590:	81 bb       	out	0x11, r24	; 17
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	08 95       	ret
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	08 95       	ret
     59a:	84 e0       	ldi	r24, 0x04	; 4
     59c:	08 95       	ret
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	08 95       	ret
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	08 95       	ret

000005a6 <dio_write>:
     5a6:	68 30       	cpi	r22, 0x08	; 8
     5a8:	08 f0       	brcs	.+2      	; 0x5ac <dio_write+0x6>
     5aa:	80 c0       	rjmp	.+256    	; 0x6ac <dio_write+0x106>
     5ac:	44 23       	and	r20, r20
     5ae:	21 f0       	breq	.+8      	; 0x5b8 <dio_write+0x12>
     5b0:	41 30       	cpi	r20, 0x01	; 1
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <dio_write+0x10>
     5b4:	40 c0       	rjmp	.+128    	; 0x636 <dio_write+0x90>
     5b6:	7c c0       	rjmp	.+248    	; 0x6b0 <dio_write+0x10a>
     5b8:	82 34       	cpi	r24, 0x42	; 66
     5ba:	b1 f0       	breq	.+44     	; 0x5e8 <dio_write+0x42>
     5bc:	18 f4       	brcc	.+6      	; 0x5c4 <dio_write+0x1e>
     5be:	81 34       	cpi	r24, 0x41	; 65
     5c0:	31 f0       	breq	.+12     	; 0x5ce <dio_write+0x28>
     5c2:	78 c0       	rjmp	.+240    	; 0x6b4 <dio_write+0x10e>
     5c4:	83 34       	cpi	r24, 0x43	; 67
     5c6:	e9 f0       	breq	.+58     	; 0x602 <dio_write+0x5c>
     5c8:	84 34       	cpi	r24, 0x44	; 68
     5ca:	41 f1       	breq	.+80     	; 0x61c <dio_write+0x76>
     5cc:	73 c0       	rjmp	.+230    	; 0x6b4 <dio_write+0x10e>
     5ce:	2b b3       	in	r18, 0x1b	; 27
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <dio_write+0x34>
     5d6:	88 0f       	add	r24, r24
     5d8:	99 1f       	adc	r25, r25
     5da:	6a 95       	dec	r22
     5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <dio_write+0x30>
     5de:	80 95       	com	r24
     5e0:	82 23       	and	r24, r18
     5e2:	8b bb       	out	0x1b, r24	; 27
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	08 95       	ret
     5e8:	28 b3       	in	r18, 0x18	; 24
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <dio_write+0x4e>
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	6a 95       	dec	r22
     5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <dio_write+0x4a>
     5f8:	80 95       	com	r24
     5fa:	82 23       	and	r24, r18
     5fc:	88 bb       	out	0x18, r24	; 24
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	08 95       	ret
     602:	25 b3       	in	r18, 0x15	; 21
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	02 c0       	rjmp	.+4      	; 0x60e <dio_write+0x68>
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	6a 95       	dec	r22
     610:	e2 f7       	brpl	.-8      	; 0x60a <dio_write+0x64>
     612:	80 95       	com	r24
     614:	82 23       	and	r24, r18
     616:	85 bb       	out	0x15, r24	; 21
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	08 95       	ret
     61c:	22 b3       	in	r18, 0x12	; 18
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	02 c0       	rjmp	.+4      	; 0x628 <dio_write+0x82>
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	6a 95       	dec	r22
     62a:	e2 f7       	brpl	.-8      	; 0x624 <dio_write+0x7e>
     62c:	80 95       	com	r24
     62e:	82 23       	and	r24, r18
     630:	82 bb       	out	0x12, r24	; 18
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	08 95       	ret
     636:	82 34       	cpi	r24, 0x42	; 66
     638:	a9 f0       	breq	.+42     	; 0x664 <dio_write+0xbe>
     63a:	18 f4       	brcc	.+6      	; 0x642 <dio_write+0x9c>
     63c:	81 34       	cpi	r24, 0x41	; 65
     63e:	31 f0       	breq	.+12     	; 0x64c <dio_write+0xa6>
     640:	3b c0       	rjmp	.+118    	; 0x6b8 <dio_write+0x112>
     642:	83 34       	cpi	r24, 0x43	; 67
     644:	d9 f0       	breq	.+54     	; 0x67c <dio_write+0xd6>
     646:	84 34       	cpi	r24, 0x44	; 68
     648:	29 f1       	breq	.+74     	; 0x694 <dio_write+0xee>
     64a:	36 c0       	rjmp	.+108    	; 0x6b8 <dio_write+0x112>
     64c:	2b b3       	in	r18, 0x1b	; 27
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	02 c0       	rjmp	.+4      	; 0x658 <dio_write+0xb2>
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	6a 95       	dec	r22
     65a:	e2 f7       	brpl	.-8      	; 0x654 <dio_write+0xae>
     65c:	82 2b       	or	r24, r18
     65e:	8b bb       	out	0x1b, r24	; 27
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	08 95       	ret
     664:	28 b3       	in	r18, 0x18	; 24
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	02 c0       	rjmp	.+4      	; 0x670 <dio_write+0xca>
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	6a 95       	dec	r22
     672:	e2 f7       	brpl	.-8      	; 0x66c <dio_write+0xc6>
     674:	82 2b       	or	r24, r18
     676:	88 bb       	out	0x18, r24	; 24
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	08 95       	ret
     67c:	25 b3       	in	r18, 0x15	; 21
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	02 c0       	rjmp	.+4      	; 0x688 <dio_write+0xe2>
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	6a 95       	dec	r22
     68a:	e2 f7       	brpl	.-8      	; 0x684 <dio_write+0xde>
     68c:	82 2b       	or	r24, r18
     68e:	85 bb       	out	0x15, r24	; 21
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	08 95       	ret
     694:	22 b3       	in	r18, 0x12	; 18
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <dio_write+0xfa>
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	6a 95       	dec	r22
     6a2:	e2 f7       	brpl	.-8      	; 0x69c <dio_write+0xf6>
     6a4:	82 2b       	or	r24, r18
     6a6:	82 bb       	out	0x12, r24	; 18
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	08 95       	ret
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	08 95       	ret
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	08 95       	ret
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	08 95       	ret
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	08 95       	ret

000006bc <dio_read>:
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_dio_status_t_ dio_read(uint8_t_ uint8_portNumber, uint8_t_ uint8_pinNumber, uint8_t_ *uint8_value)		// Read dio
{
	enu_dio_status_t_ error = DIO_OK;
	if (TRUE == (uint8_pinNumber < 8))
     6bc:	68 30       	cpi	r22, 0x08	; 8
     6be:	08 f0       	brcs	.+2      	; 0x6c2 <dio_read+0x6>
     6c0:	68 c0       	rjmp	.+208    	; 0x792 <dio_read+0xd6>
	{

		switch(uint8_portNumber)
     6c2:	82 34       	cpi	r24, 0x42	; 66
     6c4:	09 f1       	breq	.+66     	; 0x708 <dio_read+0x4c>
     6c6:	18 f4       	brcc	.+6      	; 0x6ce <dio_read+0x12>
     6c8:	81 34       	cpi	r24, 0x41	; 65
     6ca:	39 f0       	breq	.+14     	; 0x6da <dio_read+0x1e>
     6cc:	64 c0       	rjmp	.+200    	; 0x796 <dio_read+0xda>
     6ce:	83 34       	cpi	r24, 0x43	; 67
     6d0:	91 f1       	breq	.+100    	; 0x736 <dio_read+0x7a>
     6d2:	84 34       	cpi	r24, 0x44	; 68
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <dio_read+0x1c>
     6d6:	46 c0       	rjmp	.+140    	; 0x764 <dio_read+0xa8>
     6d8:	5e c0       	rjmp	.+188    	; 0x796 <dio_read+0xda>
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
     6da:	79 b3       	in	r23, 0x19	; 25
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	9c 01       	movw	r18, r24
     6e2:	06 2e       	mov	r0, r22
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <dio_read+0x2e>
     6e6:	22 0f       	add	r18, r18
     6e8:	33 1f       	adc	r19, r19
     6ea:	0a 94       	dec	r0
     6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <dio_read+0x2a>
     6ee:	87 2f       	mov	r24, r23
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	82 23       	and	r24, r18
     6f4:	93 23       	and	r25, r19
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <dio_read+0x40>
     6f8:	95 95       	asr	r25
     6fa:	87 95       	ror	r24
     6fc:	6a 95       	dec	r22
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <dio_read+0x3c>
     700:	fa 01       	movw	r30, r20
     702:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_dio_status_t_ dio_read(uint8_t_ uint8_portNumber, uint8_t_ uint8_pinNumber, uint8_t_ *uint8_value)		// Read dio
{
	enu_dio_status_t_ error = DIO_OK;
     704:	80 e0       	ldi	r24, 0x00	; 0
	if (TRUE == (uint8_pinNumber < 8))
	{

		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
     706:	08 95       	ret
			case DIO_PORT_B:	*uint8_value = GET_BIT(PINB,uint8_pinNumber);		break;
     708:	76 b3       	in	r23, 0x16	; 22
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	9c 01       	movw	r18, r24
     710:	06 2e       	mov	r0, r22
     712:	02 c0       	rjmp	.+4      	; 0x718 <dio_read+0x5c>
     714:	22 0f       	add	r18, r18
     716:	33 1f       	adc	r19, r19
     718:	0a 94       	dec	r0
     71a:	e2 f7       	brpl	.-8      	; 0x714 <dio_read+0x58>
     71c:	87 2f       	mov	r24, r23
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	82 23       	and	r24, r18
     722:	93 23       	and	r25, r19
     724:	02 c0       	rjmp	.+4      	; 0x72a <dio_read+0x6e>
     726:	95 95       	asr	r25
     728:	87 95       	ror	r24
     72a:	6a 95       	dec	r22
     72c:	e2 f7       	brpl	.-8      	; 0x726 <dio_read+0x6a>
     72e:	fa 01       	movw	r30, r20
     730:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_dio_status_t_ dio_read(uint8_t_ uint8_portNumber, uint8_t_ uint8_pinNumber, uint8_t_ *uint8_value)		// Read dio
{
	enu_dio_status_t_ error = DIO_OK;
     732:	80 e0       	ldi	r24, 0x00	; 0
	{

		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
			case DIO_PORT_B:	*uint8_value = GET_BIT(PINB,uint8_pinNumber);		break;
     734:	08 95       	ret
			case DIO_PORT_C:	*uint8_value = GET_BIT(PINC,uint8_pinNumber);		break;
     736:	73 b3       	in	r23, 0x13	; 19
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	9c 01       	movw	r18, r24
     73e:	06 2e       	mov	r0, r22
     740:	02 c0       	rjmp	.+4      	; 0x746 <dio_read+0x8a>
     742:	22 0f       	add	r18, r18
     744:	33 1f       	adc	r19, r19
     746:	0a 94       	dec	r0
     748:	e2 f7       	brpl	.-8      	; 0x742 <dio_read+0x86>
     74a:	87 2f       	mov	r24, r23
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	82 23       	and	r24, r18
     750:	93 23       	and	r25, r19
     752:	02 c0       	rjmp	.+4      	; 0x758 <dio_read+0x9c>
     754:	95 95       	asr	r25
     756:	87 95       	ror	r24
     758:	6a 95       	dec	r22
     75a:	e2 f7       	brpl	.-8      	; 0x754 <dio_read+0x98>
     75c:	fa 01       	movw	r30, r20
     75e:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_dio_status_t_ dio_read(uint8_t_ uint8_portNumber, uint8_t_ uint8_pinNumber, uint8_t_ *uint8_value)		// Read dio
{
	enu_dio_status_t_ error = DIO_OK;
     760:	80 e0       	ldi	r24, 0x00	; 0

		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
			case DIO_PORT_B:	*uint8_value = GET_BIT(PINB,uint8_pinNumber);		break;
			case DIO_PORT_C:	*uint8_value = GET_BIT(PINC,uint8_pinNumber);		break;
     762:	08 95       	ret
			case DIO_PORT_D:	*uint8_value = GET_BIT(PIND,uint8_pinNumber);		break;
     764:	70 b3       	in	r23, 0x10	; 16
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	9c 01       	movw	r18, r24
     76c:	06 2e       	mov	r0, r22
     76e:	02 c0       	rjmp	.+4      	; 0x774 <dio_read+0xb8>
     770:	22 0f       	add	r18, r18
     772:	33 1f       	adc	r19, r19
     774:	0a 94       	dec	r0
     776:	e2 f7       	brpl	.-8      	; 0x770 <dio_read+0xb4>
     778:	87 2f       	mov	r24, r23
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	82 23       	and	r24, r18
     77e:	93 23       	and	r25, r19
     780:	02 c0       	rjmp	.+4      	; 0x786 <dio_read+0xca>
     782:	95 95       	asr	r25
     784:	87 95       	ror	r24
     786:	6a 95       	dec	r22
     788:	e2 f7       	brpl	.-8      	; 0x782 <dio_read+0xc6>
     78a:	fa 01       	movw	r30, r20
     78c:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_dio_status_t_ dio_read(uint8_t_ uint8_portNumber, uint8_t_ uint8_pinNumber, uint8_t_ *uint8_value)		// Read dio
{
	enu_dio_status_t_ error = DIO_OK;
     78e:	80 e0       	ldi	r24, 0x00	; 0
		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
			case DIO_PORT_B:	*uint8_value = GET_BIT(PINB,uint8_pinNumber);		break;
			case DIO_PORT_C:	*uint8_value = GET_BIT(PINC,uint8_pinNumber);		break;
			case DIO_PORT_D:	*uint8_value = GET_BIT(PIND,uint8_pinNumber);		break;
     790:	08 95       	ret
			default:		error = DIO_WRONG_PORT_NUMBER;				break;
		}
	}
	else
	{
		error = DIO_WRONG_PIN_NUMBER;
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	08 95       	ret
		{
			case DIO_PORT_A:	*uint8_value = GET_BIT(PINA,uint8_pinNumber);		break;
			case DIO_PORT_B:	*uint8_value = GET_BIT(PINB,uint8_pinNumber);		break;
			case DIO_PORT_C:	*uint8_value = GET_BIT(PINC,uint8_pinNumber);		break;
			case DIO_PORT_D:	*uint8_value = GET_BIT(PIND,uint8_pinNumber);		break;
			default:		error = DIO_WRONG_PORT_NUMBER;				break;
     796:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = DIO_WRONG_PIN_NUMBER;
	}
	return error;
}
     798:	08 95       	ret

0000079a <EXTINT_Init>:

EN_extintError_t EXTINT_Init (uint8_t_ intNumber)
{
	EN_extintError_t error =EXTINT_OK;
	/* Step 1	->		Choose Sense Control */
	switch(intNumber)
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	61 f0       	breq	.+24     	; 0x7b6 <EXTINT_Init+0x1c>
     79e:	18 f0       	brcs	.+6      	; 0x7a6 <EXTINT_Init+0xc>
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	89 f0       	breq	.+34     	; 0x7c6 <EXTINT_Init+0x2c>
     7a4:	15 c0       	rjmp	.+42     	; 0x7d0 <EXTINT_Init+0x36>
		CLR_BIT(MCUCR,ISC01);
		#elif		SENSE_CONTROL_0		==		FALLING_EDGE
		CLR_BIT(MCUCR,ISC00);
		SET_BIT(MCUCR,ISC01);
		#elif		SENSE_CONTROL_0		==		RISING_EDGE
		SET_BIT(MCUCR,ISC00);
     7a6:	95 b7       	in	r25, 0x35	; 53
     7a8:	91 60       	ori	r25, 0x01	; 1
     7aa:	95 bf       	out	0x35, r25	; 53
		SET_BIT(MCUCR,ISC01);
     7ac:	95 b7       	in	r25, 0x35	; 53
     7ae:	92 60       	ori	r25, 0x02	; 2
     7b0:	95 bf       	out	0x35, r25	; 53
void (*EXTINT_1_callBack) (void) = NULL_PTR;
void (*EXTINT_2_callBack) (void) = NULL_PTR;

EN_extintError_t EXTINT_Init (uint8_t_ intNumber)
{
	EN_extintError_t error =EXTINT_OK;
     7b2:	20 e0       	ldi	r18, 0x00	; 0
		SET_BIT(MCUCR,ISC01);
		#elif		SENSE_CONTROL_0		==		RISING_EDGE
		SET_BIT(MCUCR,ISC00);
		SET_BIT(MCUCR,ISC01);
		#endif
		break;
     7b4:	0e c0       	rjmp	.+28     	; 0x7d2 <EXTINT_Init+0x38>
		CLR_BIT(MCUCR,ISC11);
		#elif		SENSE_CONTROL_1		==		FALLING_EDGE
		CLR_BIT(MCUCR,ISC10);
		SET_BIT(MCUCR,ISC11);
		#elif		SENSE_CONTROL_1		==		RISING_EDGE
		SET_BIT(MCUCR,ISC10);
     7b6:	95 b7       	in	r25, 0x35	; 53
     7b8:	94 60       	ori	r25, 0x04	; 4
     7ba:	95 bf       	out	0x35, r25	; 53
		SET_BIT(MCUCR,ISC11);
     7bc:	95 b7       	in	r25, 0x35	; 53
     7be:	98 60       	ori	r25, 0x08	; 8
     7c0:	95 bf       	out	0x35, r25	; 53
void (*EXTINT_1_callBack) (void) = NULL_PTR;
void (*EXTINT_2_callBack) (void) = NULL_PTR;

EN_extintError_t EXTINT_Init (uint8_t_ intNumber)
{
	EN_extintError_t error =EXTINT_OK;
     7c2:	20 e0       	ldi	r18, 0x00	; 0
		SET_BIT(MCUCR,ISC11);
		#elif		SENSE_CONTROL_1		==		RISING_EDGE
		SET_BIT(MCUCR,ISC10);
		SET_BIT(MCUCR,ISC11);
		#endif
		break;
     7c4:	06 c0       	rjmp	.+12     	; 0x7d2 <EXTINT_Init+0x38>
		
		case INT_2:
		#if			SENSE_CONTROL_2		==		FALLING_EDGE
		CLR_BIT(MCUCR,ISC2);
		#elif		SENSE_CONTROL_2		==		RISING_EDGE
		SET_BIT(MCUCSR,ISC2);
     7c6:	94 b7       	in	r25, 0x34	; 52
     7c8:	90 64       	ori	r25, 0x40	; 64
     7ca:	94 bf       	out	0x34, r25	; 52
void (*EXTINT_1_callBack) (void) = NULL_PTR;
void (*EXTINT_2_callBack) (void) = NULL_PTR;

EN_extintError_t EXTINT_Init (uint8_t_ intNumber)
{
	EN_extintError_t error =EXTINT_OK;
     7cc:	20 e0       	ldi	r18, 0x00	; 0
		#if			SENSE_CONTROL_2		==		FALLING_EDGE
		CLR_BIT(MCUCR,ISC2);
		#elif		SENSE_CONTROL_2		==		RISING_EDGE
		SET_BIT(MCUCSR,ISC2);
		#endif
		break;
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <EXTINT_Init+0x38>
		
		default: error = WRONG_INT_NUMBER;
     7d0:	21 e0       	ldi	r18, 0x01	; 1
		break;
	}
	/* Step 2	->		Enable Peripheral Interrupt */
	switch(intNumber)
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	41 f0       	breq	.+16     	; 0x7e6 <EXTINT_Init+0x4c>
     7d6:	18 f0       	brcs	.+6      	; 0x7de <EXTINT_Init+0x44>
     7d8:	82 30       	cpi	r24, 0x02	; 2
     7da:	49 f0       	breq	.+18     	; 0x7ee <EXTINT_Init+0x54>
     7dc:	0c c0       	rjmp	.+24     	; 0x7f6 <EXTINT_Init+0x5c>
	{
		case INT_0:	SET_BIT(GICR,INT0);		break;
     7de:	8b b7       	in	r24, 0x3b	; 59
     7e0:	80 64       	ori	r24, 0x40	; 64
     7e2:	8b bf       	out	0x3b, r24	; 59
     7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <EXTINT_Init+0x5e>
		case INT_1:	SET_BIT(GICR,INT1);		break;
     7e6:	8b b7       	in	r24, 0x3b	; 59
     7e8:	80 68       	ori	r24, 0x80	; 128
     7ea:	8b bf       	out	0x3b, r24	; 59
     7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <EXTINT_Init+0x5e>
		case INT_2:	SET_BIT(GICR,INT2);		break;
     7ee:	8b b7       	in	r24, 0x3b	; 59
     7f0:	80 62       	ori	r24, 0x20	; 32
     7f2:	8b bf       	out	0x3b, r24	; 59
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <EXTINT_Init+0x5e>
		default: error = WRONG_INT_NUMBER;	break;
     7f6:	21 e0       	ldi	r18, 0x01	; 1
	}
	
	
	/* Step 3	->		Enable Global Interrupt */
	SET_BIT(SREG,Ibit);
     7f8:	9f b7       	in	r25, 0x3f	; 63
     7fa:	90 68       	ori	r25, 0x80	; 128
     7fc:	9f bf       	out	0x3f, r25	; 63
	
	return error;
}
     7fe:	82 2f       	mov	r24, r18
     800:	08 95       	ret

00000802 <EXTINT_setCallBackInt>:


void EXTINT_setCallBackInt (uint8_t_ intNumber, void (*funPtr) (void))
{
	if (funPtr != NULL_PTR)
     802:	61 15       	cp	r22, r1
     804:	71 05       	cpc	r23, r1
     806:	a1 f0       	breq	.+40     	; 0x830 <EXTINT_setCallBackInt+0x2e>
	{
		
		if (intNumber == INT_0)
     808:	81 11       	cpse	r24, r1
     80a:	05 c0       	rjmp	.+10     	; 0x816 <EXTINT_setCallBackInt+0x14>
		{
			EXTINT_0_callBack = funPtr;
     80c:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <EXTINT_0_callBack+0x1>
     810:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <EXTINT_0_callBack>
     814:	08 95       	ret
		}
		else if (intNumber == INT_1)
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	29 f4       	brne	.+10     	; 0x824 <EXTINT_setCallBackInt+0x22>
		{
			EXTINT_1_callBack = funPtr;
     81a:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <EXTINT_1_callBack+0x1>
     81e:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <EXTINT_1_callBack>
     822:	08 95       	ret
		}
		else if (intNumber == INT_2)
     824:	82 30       	cpi	r24, 0x02	; 2
     826:	21 f4       	brne	.+8      	; 0x830 <EXTINT_setCallBackInt+0x2e>
		{
			EXTINT_2_callBack = funPtr;
     828:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <EXTINT_2_callBack+0x1>
     82c:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <EXTINT_2_callBack>
     830:	08 95       	ret

00000832 <__vector_1>:
	}
}


ISR(EXT_INT_0)
{
     832:	1f 92       	push	r1
     834:	0f 92       	push	r0
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	0f 92       	push	r0
     83a:	11 24       	eor	r1, r1
     83c:	2f 93       	push	r18
     83e:	3f 93       	push	r19
     840:	4f 93       	push	r20
     842:	5f 93       	push	r21
     844:	6f 93       	push	r22
     846:	7f 93       	push	r23
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	af 93       	push	r26
     84e:	bf 93       	push	r27
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
	if (EXTINT_0_callBack != NULL_PTR)
     854:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <EXTINT_0_callBack>
     858:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <EXTINT_0_callBack+0x1>
     85c:	30 97       	sbiw	r30, 0x00	; 0
     85e:	09 f0       	breq	.+2      	; 0x862 <__stack+0x3>
	{
		EXTINT_0_callBack();
     860:	09 95       	icall
	}
}
     862:	ff 91       	pop	r31
     864:	ef 91       	pop	r30
     866:	bf 91       	pop	r27
     868:	af 91       	pop	r26
     86a:	9f 91       	pop	r25
     86c:	8f 91       	pop	r24
     86e:	7f 91       	pop	r23
     870:	6f 91       	pop	r22
     872:	5f 91       	pop	r21
     874:	4f 91       	pop	r20
     876:	3f 91       	pop	r19
     878:	2f 91       	pop	r18
     87a:	0f 90       	pop	r0
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	0f 90       	pop	r0
     880:	1f 90       	pop	r1
     882:	18 95       	reti

00000884 <__vector_2>:

ISR(EXT_INT_1)
{
     884:	1f 92       	push	r1
     886:	0f 92       	push	r0
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	0f 92       	push	r0
     88c:	11 24       	eor	r1, r1
     88e:	2f 93       	push	r18
     890:	3f 93       	push	r19
     892:	4f 93       	push	r20
     894:	5f 93       	push	r21
     896:	6f 93       	push	r22
     898:	7f 93       	push	r23
     89a:	8f 93       	push	r24
     89c:	9f 93       	push	r25
     89e:	af 93       	push	r26
     8a0:	bf 93       	push	r27
     8a2:	ef 93       	push	r30
     8a4:	ff 93       	push	r31
	if (EXTINT_1_callBack != NULL_PTR)
     8a6:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXTINT_1_callBack>
     8aa:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXTINT_1_callBack+0x1>
     8ae:	30 97       	sbiw	r30, 0x00	; 0
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <__vector_2+0x30>
	{
		EXTINT_1_callBack();
     8b2:	09 95       	icall
	}
}
     8b4:	ff 91       	pop	r31
     8b6:	ef 91       	pop	r30
     8b8:	bf 91       	pop	r27
     8ba:	af 91       	pop	r26
     8bc:	9f 91       	pop	r25
     8be:	8f 91       	pop	r24
     8c0:	7f 91       	pop	r23
     8c2:	6f 91       	pop	r22
     8c4:	5f 91       	pop	r21
     8c6:	4f 91       	pop	r20
     8c8:	3f 91       	pop	r19
     8ca:	2f 91       	pop	r18
     8cc:	0f 90       	pop	r0
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	0f 90       	pop	r0
     8d2:	1f 90       	pop	r1
     8d4:	18 95       	reti

000008d6 <__vector_3>:

ISR(EXT_INT_2)
{
     8d6:	1f 92       	push	r1
     8d8:	0f 92       	push	r0
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	0f 92       	push	r0
     8de:	11 24       	eor	r1, r1
     8e0:	2f 93       	push	r18
     8e2:	3f 93       	push	r19
     8e4:	4f 93       	push	r20
     8e6:	5f 93       	push	r21
     8e8:	6f 93       	push	r22
     8ea:	7f 93       	push	r23
     8ec:	8f 93       	push	r24
     8ee:	9f 93       	push	r25
     8f0:	af 93       	push	r26
     8f2:	bf 93       	push	r27
     8f4:	ef 93       	push	r30
     8f6:	ff 93       	push	r31
	if (EXTINT_2_callBack != NULL_PTR)
     8f8:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <EXTINT_2_callBack>
     8fc:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <EXTINT_2_callBack+0x1>
     900:	30 97       	sbiw	r30, 0x00	; 0
     902:	09 f0       	breq	.+2      	; 0x906 <__vector_3+0x30>
	{
		EXTINT_2_callBack();
     904:	09 95       	icall
	}
     906:	ff 91       	pop	r31
     908:	ef 91       	pop	r30
     90a:	bf 91       	pop	r27
     90c:	af 91       	pop	r26
     90e:	9f 91       	pop	r25
     910:	8f 91       	pop	r24
     912:	7f 91       	pop	r23
     914:	6f 91       	pop	r22
     916:	5f 91       	pop	r21
     918:	4f 91       	pop	r20
     91a:	3f 91       	pop	r19
     91c:	2f 91       	pop	r18
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti

00000928 <timer_init>:
		
		default:	enu_return_value =  TIMER_WRONG_TIMER_USED;	break;
		
	}
	return enu_return_value;
}
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	80 c0       	rjmp	.+256    	; 0xa2e <timer_init+0x106>
     92e:	29 2f       	mov	r18, r25
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	f9 01       	movw	r30, r18
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
     938:	ee 0f       	add	r30, r30
     93a:	ff 1f       	adc	r31, r31
     93c:	e2 59       	subi	r30, 0x92	; 146
     93e:	ff 4f       	sbci	r31, 0xFF	; 255
     940:	40 81       	ld	r20, Z
     942:	41 30       	cpi	r20, 0x01	; 1
     944:	41 f1       	breq	.+80     	; 0x996 <timer_init+0x6e>
     946:	20 f0       	brcs	.+8      	; 0x950 <timer_init+0x28>
     948:	42 30       	cpi	r20, 0x02	; 2
     94a:	09 f4       	brne	.+2      	; 0x94e <timer_init+0x26>
     94c:	44 c0       	rjmp	.+136    	; 0x9d6 <timer_init+0xae>
     94e:	65 c0       	rjmp	.+202    	; 0xa1a <timer_init+0xf2>
     950:	22 0f       	add	r18, r18
     952:	33 1f       	adc	r19, r19
     954:	22 0f       	add	r18, r18
     956:	33 1f       	adc	r19, r19
     958:	f9 01       	movw	r30, r18
     95a:	e2 59       	subi	r30, 0x92	; 146
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	21 81       	ldd	r18, Z+1	; 0x01
     960:	21 30       	cpi	r18, 0x01	; 1
     962:	09 f4       	brne	.+2      	; 0x966 <timer_init+0x3e>
     964:	61 c0       	rjmp	.+194    	; 0xa28 <timer_init+0x100>
     966:	18 f0       	brcs	.+6      	; 0x96e <timer_init+0x46>
     968:	22 30       	cpi	r18, 0x02	; 2
     96a:	59 f0       	breq	.+22     	; 0x982 <timer_init+0x5a>
     96c:	58 c0       	rjmp	.+176    	; 0xa1e <timer_init+0xf6>
     96e:	23 b7       	in	r18, 0x33	; 51
     970:	27 7f       	andi	r18, 0xF7	; 247
     972:	23 bf       	out	0x33, r18	; 51
     974:	23 b7       	in	r18, 0x33	; 51
     976:	2f 7b       	andi	r18, 0xBF	; 191
     978:	23 bf       	out	0x33, r18	; 51
     97a:	29 b7       	in	r18, 0x39	; 57
     97c:	21 60       	ori	r18, 0x01	; 1
     97e:	29 bf       	out	0x39, r18	; 57
     980:	53 c0       	rjmp	.+166    	; 0xa28 <timer_init+0x100>
     982:	23 b7       	in	r18, 0x33	; 51
     984:	28 60       	ori	r18, 0x08	; 8
     986:	23 bf       	out	0x33, r18	; 51
     988:	23 b7       	in	r18, 0x33	; 51
     98a:	2f 7b       	andi	r18, 0xBF	; 191
     98c:	23 bf       	out	0x33, r18	; 51
     98e:	29 b7       	in	r18, 0x39	; 57
     990:	22 60       	ori	r18, 0x02	; 2
     992:	29 bf       	out	0x39, r18	; 57
     994:	49 c0       	rjmp	.+146    	; 0xa28 <timer_init+0x100>
     996:	22 0f       	add	r18, r18
     998:	33 1f       	adc	r19, r19
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	f9 01       	movw	r30, r18
     9a0:	e2 59       	subi	r30, 0x92	; 146
     9a2:	ff 4f       	sbci	r31, 0xFF	; 255
     9a4:	21 81       	ldd	r18, Z+1	; 0x01
     9a6:	22 23       	and	r18, r18
     9a8:	19 f0       	breq	.+6      	; 0x9b0 <timer_init+0x88>
     9aa:	23 30       	cpi	r18, 0x03	; 3
     9ac:	d0 f5       	brcc	.+116    	; 0xa22 <timer_init+0xfa>
     9ae:	3c c0       	rjmp	.+120    	; 0xa28 <timer_init+0x100>
     9b0:	2f b5       	in	r18, 0x2f	; 47
     9b2:	2f 77       	andi	r18, 0x7F	; 127
     9b4:	2f bd       	out	0x2f, r18	; 47
     9b6:	2f b5       	in	r18, 0x2f	; 47
     9b8:	2f 7b       	andi	r18, 0xBF	; 191
     9ba:	2f bd       	out	0x2f, r18	; 47
     9bc:	2e b5       	in	r18, 0x2e	; 46
     9be:	2f 7e       	andi	r18, 0xEF	; 239
     9c0:	2e bd       	out	0x2e, r18	; 46
     9c2:	2e b5       	in	r18, 0x2e	; 46
     9c4:	27 7f       	andi	r18, 0xF7	; 247
     9c6:	2e bd       	out	0x2e, r18	; 46
     9c8:	2f b5       	in	r18, 0x2f	; 47
     9ca:	2d 7f       	andi	r18, 0xFD	; 253
     9cc:	2f bd       	out	0x2f, r18	; 47
     9ce:	2f b5       	in	r18, 0x2f	; 47
     9d0:	2e 7f       	andi	r18, 0xFE	; 254
     9d2:	2f bd       	out	0x2f, r18	; 47
     9d4:	29 c0       	rjmp	.+82     	; 0xa28 <timer_init+0x100>
     9d6:	22 0f       	add	r18, r18
     9d8:	33 1f       	adc	r19, r19
     9da:	22 0f       	add	r18, r18
     9dc:	33 1f       	adc	r19, r19
     9de:	f9 01       	movw	r30, r18
     9e0:	e2 59       	subi	r30, 0x92	; 146
     9e2:	ff 4f       	sbci	r31, 0xFF	; 255
     9e4:	21 81       	ldd	r18, Z+1	; 0x01
     9e6:	21 30       	cpi	r18, 0x01	; 1
     9e8:	f9 f0       	breq	.+62     	; 0xa28 <timer_init+0x100>
     9ea:	18 f0       	brcs	.+6      	; 0x9f2 <timer_init+0xca>
     9ec:	22 30       	cpi	r18, 0x02	; 2
     9ee:	59 f0       	breq	.+22     	; 0xa06 <timer_init+0xde>
     9f0:	1a c0       	rjmp	.+52     	; 0xa26 <timer_init+0xfe>
     9f2:	25 b5       	in	r18, 0x25	; 37
     9f4:	27 7f       	andi	r18, 0xF7	; 247
     9f6:	25 bd       	out	0x25, r18	; 37
     9f8:	25 b5       	in	r18, 0x25	; 37
     9fa:	2f 7b       	andi	r18, 0xBF	; 191
     9fc:	25 bd       	out	0x25, r18	; 37
     9fe:	29 b7       	in	r18, 0x39	; 57
     a00:	20 64       	ori	r18, 0x40	; 64
     a02:	29 bf       	out	0x39, r18	; 57
     a04:	11 c0       	rjmp	.+34     	; 0xa28 <timer_init+0x100>
     a06:	23 b7       	in	r18, 0x33	; 51
     a08:	28 60       	ori	r18, 0x08	; 8
     a0a:	23 bf       	out	0x33, r18	; 51
     a0c:	23 b7       	in	r18, 0x33	; 51
     a0e:	2f 7b       	andi	r18, 0xBF	; 191
     a10:	23 bf       	out	0x33, r18	; 51
     a12:	29 b7       	in	r18, 0x39	; 57
     a14:	20 68       	ori	r18, 0x80	; 128
     a16:	29 bf       	out	0x39, r18	; 57
     a18:	07 c0       	rjmp	.+14     	; 0xa28 <timer_init+0x100>
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <timer_init+0x100>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	03 c0       	rjmp	.+6      	; 0xa28 <timer_init+0x100>
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <timer_init+0x100>
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	81 11       	cpse	r24, r1
     a2a:	04 c0       	rjmp	.+8      	; 0xa34 <timer_init+0x10c>
     a2c:	9f 5f       	subi	r25, 0xFF	; 255
     a2e:	99 23       	and	r25, r25
     a30:	09 f4       	brne	.+2      	; 0xa34 <timer_init+0x10c>
     a32:	7d cf       	rjmp	.-262    	; 0x92e <timer_init+0x6>
     a34:	9f b7       	in	r25, 0x3f	; 63
     a36:	90 68       	ori	r25, 0x80	; 128
     a38:	9f bf       	out	0x3f, r25	; 63
     a3a:	08 95       	ret

00000a3c <timer_set_time>:
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	6a 01       	movw	r12, r20
     a4a:	7b 01       	movw	r14, r22
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	09 f4       	brne	.+2      	; 0xa52 <timer_set_time+0x16>
     a50:	64 c0       	rjmp	.+200    	; 0xb1a <timer_set_time+0xde>
     a52:	20 f0       	brcs	.+8      	; 0xa5c <timer_set_time+0x20>
     a54:	82 30       	cpi	r24, 0x02	; 2
     a56:	09 f4       	brne	.+2      	; 0xa5a <timer_set_time+0x1e>
     a58:	c8 c0       	rjmp	.+400    	; 0xbea <timer_set_time+0x1ae>
     a5a:	33 c1       	rjmp	.+614    	; 0xcc2 <timer_set_time+0x286>
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	fc 01       	movw	r30, r24
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	e2 59       	subi	r30, 0x92	; 146
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	21 81       	ldd	r18, Z+1	; 0x01
     a6e:	22 23       	and	r18, r18
     a70:	29 f0       	breq	.+10     	; 0xa7c <timer_set_time+0x40>
     a72:	23 30       	cpi	r18, 0x03	; 3
     a74:	08 f0       	brcs	.+2      	; 0xa78 <timer_set_time+0x3c>
     a76:	27 c1       	rjmp	.+590    	; 0xcc6 <timer_set_time+0x28a>
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	30 c1       	rjmp	.+608    	; 0xcdc <timer_set_time+0x2a0>
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	fc 01       	movw	r30, r24
     a86:	e2 59       	subi	r30, 0x92	; 146
     a88:	ff 4f       	sbci	r31, 0xFF	; 255
     a8a:	62 81       	ldd	r22, Z+2	; 0x02
     a8c:	73 81       	ldd	r23, Z+3	; 0x03
     a8e:	eb 01       	movw	r28, r22
     a90:	d6 95       	lsr	r29
     a92:	c7 95       	ror	r28
     a94:	d6 95       	lsr	r29
     a96:	c7 95       	ror	r28
     a98:	d6 95       	lsr	r29
     a9a:	c7 95       	ror	r28
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	4a e7       	ldi	r20, 0x7A	; 122
     aa2:	54 e4       	ldi	r21, 0x44	; 68
     aa4:	c7 01       	movw	r24, r14
     aa6:	b6 01       	movw	r22, r12
     aa8:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__mulsf3>
     aac:	6b 01       	movw	r12, r22
     aae:	7c 01       	movw	r14, r24
     ab0:	be 01       	movw	r22, r28
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatunsisf>
     aba:	9b 01       	movw	r18, r22
     abc:	ac 01       	movw	r20, r24
     abe:	c7 01       	movw	r24, r14
     ac0:	b6 01       	movw	r22, r12
     ac2:	0e 94 ab 08 	call	0x1156	; 0x1156 <__divsf3>
     ac6:	0e 94 1d 09 	call	0x123a	; 0x123a <__fixunssfsi>
     aca:	c7 2e       	mov	r12, r23
     acc:	d8 2e       	mov	r13, r24
     ace:	e9 2e       	mov	r14, r25
     ad0:	ff 24       	eor	r15, r15
     ad2:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <gl_uint32_timer0_number_OVFs>
     ad6:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <gl_uint32_timer0_number_OVFs+0x1>
     ada:	e0 92 9a 00 	sts	0x009A, r14	; 0x80009a <gl_uint32_timer0_number_OVFs+0x2>
     ade:	f0 92 9b 00 	sts	0x009B, r15	; 0x80009b <gl_uint32_timer0_number_OVFs+0x3>
     ae2:	60 93 97 00 	sts	0x0097, r22	; 0x800097 <gl_uint8_timer0_rem_ticks>
     ae6:	66 23       	and	r22, r22
     ae8:	09 f4       	brne	.+2      	; 0xaec <timer_set_time+0xb0>
     aea:	ef c0       	rjmp	.+478    	; 0xcca <timer_set_time+0x28e>
     aec:	61 95       	neg	r22
     aee:	62 bf       	out	0x32, r22	; 50
     af0:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <gl_uint32_timer0_number_OVFs>
     af4:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <gl_uint32_timer0_number_OVFs+0x1>
     af8:	a0 91 9a 00 	lds	r26, 0x009A	; 0x80009a <gl_uint32_timer0_number_OVFs+0x2>
     afc:	b0 91 9b 00 	lds	r27, 0x009B	; 0x80009b <gl_uint32_timer0_number_OVFs+0x3>
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	a1 1d       	adc	r26, r1
     b04:	b1 1d       	adc	r27, r1
     b06:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <gl_uint32_timer0_number_OVFs>
     b0a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <gl_uint32_timer0_number_OVFs+0x1>
     b0e:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <gl_uint32_timer0_number_OVFs+0x2>
     b12:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <gl_uint32_timer0_number_OVFs+0x3>
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	e1 c0       	rjmp	.+450    	; 0xcdc <timer_set_time+0x2a0>
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	fc 01       	movw	r30, r24
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	ee 0f       	add	r30, r30
     b24:	ff 1f       	adc	r31, r31
     b26:	e2 59       	subi	r30, 0x92	; 146
     b28:	ff 4f       	sbci	r31, 0xFF	; 255
     b2a:	21 81       	ldd	r18, Z+1	; 0x01
     b2c:	22 23       	and	r18, r18
     b2e:	29 f0       	breq	.+10     	; 0xb3a <timer_set_time+0xfe>
     b30:	23 30       	cpi	r18, 0x03	; 3
     b32:	08 f0       	brcs	.+2      	; 0xb36 <timer_set_time+0xfa>
     b34:	cc c0       	rjmp	.+408    	; 0xcce <timer_set_time+0x292>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	d1 c0       	rjmp	.+418    	; 0xcdc <timer_set_time+0x2a0>
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	fc 01       	movw	r30, r24
     b44:	e2 59       	subi	r30, 0x92	; 146
     b46:	ff 4f       	sbci	r31, 0xFF	; 255
     b48:	62 81       	ldd	r22, Z+2	; 0x02
     b4a:	73 81       	ldd	r23, Z+3	; 0x03
     b4c:	eb 01       	movw	r28, r22
     b4e:	d6 95       	lsr	r29
     b50:	c7 95       	ror	r28
     b52:	d6 95       	lsr	r29
     b54:	c7 95       	ror	r28
     b56:	d6 95       	lsr	r29
     b58:	c7 95       	ror	r28
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	4a e7       	ldi	r20, 0x7A	; 122
     b60:	54 e4       	ldi	r21, 0x44	; 68
     b62:	c7 01       	movw	r24, r14
     b64:	b6 01       	movw	r22, r12
     b66:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__mulsf3>
     b6a:	6b 01       	movw	r12, r22
     b6c:	7c 01       	movw	r14, r24
     b6e:	be 01       	movw	r22, r28
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatunsisf>
     b78:	9b 01       	movw	r18, r22
     b7a:	ac 01       	movw	r20, r24
     b7c:	c7 01       	movw	r24, r14
     b7e:	b6 01       	movw	r22, r12
     b80:	0e 94 ab 08 	call	0x1156	; 0x1156 <__divsf3>
     b84:	0e 94 1d 09 	call	0x123a	; 0x123a <__fixunssfsi>
     b88:	6c 01       	movw	r12, r24
     b8a:	ee 24       	eor	r14, r14
     b8c:	ff 24       	eor	r15, r15
     b8e:	c0 92 8f 00 	sts	0x008F, r12	; 0x80008f <gl_uint32_timer1_number_OVFs>
     b92:	d0 92 90 00 	sts	0x0090, r13	; 0x800090 <gl_uint32_timer1_number_OVFs+0x1>
     b96:	e0 92 91 00 	sts	0x0091, r14	; 0x800091 <gl_uint32_timer1_number_OVFs+0x2>
     b9a:	f0 92 92 00 	sts	0x0092, r15	; 0x800092 <gl_uint32_timer1_number_OVFs+0x3>
     b9e:	70 93 8e 00 	sts	0x008E, r23	; 0x80008e <gl_uint16_timer1_rem_ticks+0x1>
     ba2:	60 93 8d 00 	sts	0x008D, r22	; 0x80008d <gl_uint16_timer1_rem_ticks>
     ba6:	61 15       	cp	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <timer_set_time+0x172>
     bac:	92 c0       	rjmp	.+292    	; 0xcd2 <timer_set_time+0x296>
     bae:	71 95       	neg	r23
     bb0:	61 95       	neg	r22
     bb2:	71 09       	sbc	r23, r1
     bb4:	8c b5       	in	r24, 0x2c	; 44
     bb6:	86 2b       	or	r24, r22
     bb8:	8c bd       	out	0x2c, r24	; 44
     bba:	8d b5       	in	r24, 0x2d	; 45
     bbc:	87 2b       	or	r24, r23
     bbe:	8d bd       	out	0x2d, r24	; 45
     bc0:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <gl_uint32_timer2_number_OVFs>
     bc4:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <gl_uint32_timer2_number_OVFs+0x1>
     bc8:	a0 91 87 00 	lds	r26, 0x0087	; 0x800087 <gl_uint32_timer2_number_OVFs+0x2>
     bcc:	b0 91 88 00 	lds	r27, 0x0088	; 0x800088 <gl_uint32_timer2_number_OVFs+0x3>
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	a1 1d       	adc	r26, r1
     bd4:	b1 1d       	adc	r27, r1
     bd6:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <gl_uint32_timer2_number_OVFs>
     bda:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <gl_uint32_timer2_number_OVFs+0x1>
     bde:	a0 93 87 00 	sts	0x0087, r26	; 0x800087 <gl_uint32_timer2_number_OVFs+0x2>
     be2:	b0 93 88 00 	sts	0x0088, r27	; 0x800088 <gl_uint32_timer2_number_OVFs+0x3>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	79 c0       	rjmp	.+242    	; 0xcdc <timer_set_time+0x2a0>
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	fc 01       	movw	r30, r24
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	e2 59       	subi	r30, 0x92	; 146
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	21 81       	ldd	r18, Z+1	; 0x01
     bfc:	22 23       	and	r18, r18
     bfe:	29 f0       	breq	.+10     	; 0xc0a <timer_set_time+0x1ce>
     c00:	23 30       	cpi	r18, 0x03	; 3
     c02:	08 f0       	brcs	.+2      	; 0xc06 <timer_set_time+0x1ca>
     c04:	68 c0       	rjmp	.+208    	; 0xcd6 <timer_set_time+0x29a>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	69 c0       	rjmp	.+210    	; 0xcdc <timer_set_time+0x2a0>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	fc 01       	movw	r30, r24
     c14:	e2 59       	subi	r30, 0x92	; 146
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	62 81       	ldd	r22, Z+2	; 0x02
     c1a:	73 81       	ldd	r23, Z+3	; 0x03
     c1c:	eb 01       	movw	r28, r22
     c1e:	d6 95       	lsr	r29
     c20:	c7 95       	ror	r28
     c22:	d6 95       	lsr	r29
     c24:	c7 95       	ror	r28
     c26:	d6 95       	lsr	r29
     c28:	c7 95       	ror	r28
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	4a e7       	ldi	r20, 0x7A	; 122
     c30:	54 e4       	ldi	r21, 0x44	; 68
     c32:	c7 01       	movw	r24, r14
     c34:	b6 01       	movw	r22, r12
     c36:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__mulsf3>
     c3a:	6b 01       	movw	r12, r22
     c3c:	7c 01       	movw	r14, r24
     c3e:	be 01       	movw	r22, r28
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatunsisf>
     c48:	9b 01       	movw	r18, r22
     c4a:	ac 01       	movw	r20, r24
     c4c:	c7 01       	movw	r24, r14
     c4e:	b6 01       	movw	r22, r12
     c50:	0e 94 ab 08 	call	0x1156	; 0x1156 <__divsf3>
     c54:	0e 94 1d 09 	call	0x123a	; 0x123a <__fixunssfsi>
     c58:	c7 2e       	mov	r12, r23
     c5a:	d8 2e       	mov	r13, r24
     c5c:	e9 2e       	mov	r14, r25
     c5e:	ff 24       	eor	r15, r15
     c60:	c0 92 85 00 	sts	0x0085, r12	; 0x800085 <gl_uint32_timer2_number_OVFs>
     c64:	d0 92 86 00 	sts	0x0086, r13	; 0x800086 <gl_uint32_timer2_number_OVFs+0x1>
     c68:	e0 92 87 00 	sts	0x0087, r14	; 0x800087 <gl_uint32_timer2_number_OVFs+0x2>
     c6c:	f0 92 88 00 	sts	0x0088, r15	; 0x800088 <gl_uint32_timer2_number_OVFs+0x3>
     c70:	dc 01       	movw	r26, r24
     c72:	cb 01       	movw	r24, r22
     c74:	99 27       	eor	r25, r25
     c76:	aa 27       	eor	r26, r26
     c78:	bb 27       	eor	r27, r27
     c7a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <gl_uint8_timer2_rem_ticks>
     c7e:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <gl_uint8_timer2_rem_ticks+0x1>
     c82:	a0 93 83 00 	sts	0x0083, r26	; 0x800083 <gl_uint8_timer2_rem_ticks+0x2>
     c86:	b0 93 84 00 	sts	0x0084, r27	; 0x800084 <gl_uint8_timer2_rem_ticks+0x3>
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	21 f1       	breq	.+72     	; 0xcda <timer_set_time+0x29e>
     c92:	68 2f       	mov	r22, r24
     c94:	61 95       	neg	r22
     c96:	64 bd       	out	0x24, r22	; 36
     c98:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <gl_uint32_timer2_number_OVFs>
     c9c:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <gl_uint32_timer2_number_OVFs+0x1>
     ca0:	a0 91 87 00 	lds	r26, 0x0087	; 0x800087 <gl_uint32_timer2_number_OVFs+0x2>
     ca4:	b0 91 88 00 	lds	r27, 0x0088	; 0x800088 <gl_uint32_timer2_number_OVFs+0x3>
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	a1 1d       	adc	r26, r1
     cac:	b1 1d       	adc	r27, r1
     cae:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <gl_uint32_timer2_number_OVFs>
     cb2:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <gl_uint32_timer2_number_OVFs+0x1>
     cb6:	a0 93 87 00 	sts	0x0087, r26	; 0x800087 <gl_uint32_timer2_number_OVFs+0x2>
     cba:	b0 93 88 00 	sts	0x0088, r27	; 0x800088 <gl_uint32_timer2_number_OVFs+0x3>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0d c0       	rjmp	.+26     	; 0xcdc <timer_set_time+0x2a0>
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	0b c0       	rjmp	.+22     	; 0xcdc <timer_set_time+0x2a0>
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	09 c0       	rjmp	.+18     	; 0xcdc <timer_set_time+0x2a0>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	07 c0       	rjmp	.+14     	; 0xcdc <timer_set_time+0x2a0>
     cce:	83 e0       	ldi	r24, 0x03	; 3
     cd0:	05 c0       	rjmp	.+10     	; 0xcdc <timer_set_time+0x2a0>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <timer_set_time+0x2a0>
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <timer_set_time+0x2a0>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	08 95       	ret

00000cea <timer_resume>:
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <timer_resume+0x6>
     cee:	52 c0       	rjmp	.+164    	; 0xd94 <timer_resume+0xaa>
     cf0:	20 f0       	brcs	.+8      	; 0xcfa <timer_resume+0x10>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <timer_resume+0xe>
     cf6:	9b c0       	rjmp	.+310    	; 0xe2e <timer_resume+0x144>
     cf8:	e7 c0       	rjmp	.+462    	; 0xec8 <timer_resume+0x1de>
     cfa:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <str_timer_config+0x2>
     cfe:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <str_timer_config+0x3>
     d02:	80 34       	cpi	r24, 0x40	; 64
     d04:	91 05       	cpc	r25, r1
     d06:	29 f1       	breq	.+74     	; 0xd52 <timer_resume+0x68>
     d08:	30 f4       	brcc	.+12     	; 0xd16 <timer_resume+0x2c>
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	91 05       	cpc	r25, r1
     d0e:	59 f0       	breq	.+22     	; 0xd26 <timer_resume+0x3c>
     d10:	08 97       	sbiw	r24, 0x08	; 8
     d12:	a1 f0       	breq	.+40     	; 0xd3c <timer_resume+0x52>
     d14:	db c0       	rjmp	.+438    	; 0xecc <timer_resume+0x1e2>
     d16:	81 15       	cp	r24, r1
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	92 07       	cpc	r25, r18
     d1c:	29 f1       	breq	.+74     	; 0xd68 <timer_resume+0x7e>
     d1e:	81 15       	cp	r24, r1
     d20:	94 40       	sbci	r25, 0x04	; 4
     d22:	69 f1       	breq	.+90     	; 0xd7e <timer_resume+0x94>
     d24:	d3 c0       	rjmp	.+422    	; 0xecc <timer_resume+0x1e2>
     d26:	83 b7       	in	r24, 0x33	; 51
     d28:	8b 7f       	andi	r24, 0xFB	; 251
     d2a:	83 bf       	out	0x33, r24	; 51
     d2c:	83 b7       	in	r24, 0x33	; 51
     d2e:	8d 7f       	andi	r24, 0xFD	; 253
     d30:	83 bf       	out	0x33, r24	; 51
     d32:	83 b7       	in	r24, 0x33	; 51
     d34:	81 60       	ori	r24, 0x01	; 1
     d36:	83 bf       	out	0x33, r24	; 51
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	08 95       	ret
     d3c:	83 b7       	in	r24, 0x33	; 51
     d3e:	8b 7f       	andi	r24, 0xFB	; 251
     d40:	83 bf       	out	0x33, r24	; 51
     d42:	83 b7       	in	r24, 0x33	; 51
     d44:	82 60       	ori	r24, 0x02	; 2
     d46:	83 bf       	out	0x33, r24	; 51
     d48:	83 b7       	in	r24, 0x33	; 51
     d4a:	8e 7f       	andi	r24, 0xFE	; 254
     d4c:	83 bf       	out	0x33, r24	; 51
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	08 95       	ret
     d52:	83 b7       	in	r24, 0x33	; 51
     d54:	8b 7f       	andi	r24, 0xFB	; 251
     d56:	83 bf       	out	0x33, r24	; 51
     d58:	83 b7       	in	r24, 0x33	; 51
     d5a:	82 60       	ori	r24, 0x02	; 2
     d5c:	83 bf       	out	0x33, r24	; 51
     d5e:	83 b7       	in	r24, 0x33	; 51
     d60:	81 60       	ori	r24, 0x01	; 1
     d62:	83 bf       	out	0x33, r24	; 51
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	08 95       	ret
     d68:	83 b7       	in	r24, 0x33	; 51
     d6a:	84 60       	ori	r24, 0x04	; 4
     d6c:	83 bf       	out	0x33, r24	; 51
     d6e:	83 b7       	in	r24, 0x33	; 51
     d70:	8d 7f       	andi	r24, 0xFD	; 253
     d72:	83 bf       	out	0x33, r24	; 51
     d74:	83 b7       	in	r24, 0x33	; 51
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	83 bf       	out	0x33, r24	; 51
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	08 95       	ret
     d7e:	83 b7       	in	r24, 0x33	; 51
     d80:	84 60       	ori	r24, 0x04	; 4
     d82:	83 bf       	out	0x33, r24	; 51
     d84:	83 b7       	in	r24, 0x33	; 51
     d86:	8d 7f       	andi	r24, 0xFD	; 253
     d88:	83 bf       	out	0x33, r24	; 51
     d8a:	83 b7       	in	r24, 0x33	; 51
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	83 bf       	out	0x33, r24	; 51
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	08 95       	ret
     d94:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <counter>
     d98:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <blinkMode>
     d9c:	80 34       	cpi	r24, 0x40	; 64
     d9e:	91 05       	cpc	r25, r1
     da0:	29 f1       	breq	.+74     	; 0xdec <timer_resume+0x102>
     da2:	30 f4       	brcc	.+12     	; 0xdb0 <timer_resume+0xc6>
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	59 f0       	breq	.+22     	; 0xdc0 <timer_resume+0xd6>
     daa:	08 97       	sbiw	r24, 0x08	; 8
     dac:	a1 f0       	breq	.+40     	; 0xdd6 <timer_resume+0xec>
     dae:	90 c0       	rjmp	.+288    	; 0xed0 <timer_resume+0x1e6>
     db0:	81 15       	cp	r24, r1
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	92 07       	cpc	r25, r18
     db6:	29 f1       	breq	.+74     	; 0xe02 <timer_resume+0x118>
     db8:	81 15       	cp	r24, r1
     dba:	94 40       	sbci	r25, 0x04	; 4
     dbc:	69 f1       	breq	.+90     	; 0xe18 <timer_resume+0x12e>
     dbe:	88 c0       	rjmp	.+272    	; 0xed0 <timer_resume+0x1e6>
     dc0:	8e b5       	in	r24, 0x2e	; 46
     dc2:	8b 7f       	andi	r24, 0xFB	; 251
     dc4:	8e bd       	out	0x2e, r24	; 46
     dc6:	8e b5       	in	r24, 0x2e	; 46
     dc8:	8d 7f       	andi	r24, 0xFD	; 253
     dca:	8e bd       	out	0x2e, r24	; 46
     dcc:	8e b5       	in	r24, 0x2e	; 46
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	8e bd       	out	0x2e, r24	; 46
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	08 95       	ret
     dd6:	8e b5       	in	r24, 0x2e	; 46
     dd8:	8b 7f       	andi	r24, 0xFB	; 251
     dda:	8e bd       	out	0x2e, r24	; 46
     ddc:	8e b5       	in	r24, 0x2e	; 46
     dde:	82 60       	ori	r24, 0x02	; 2
     de0:	8e bd       	out	0x2e, r24	; 46
     de2:	8e b5       	in	r24, 0x2e	; 46
     de4:	8e 7f       	andi	r24, 0xFE	; 254
     de6:	8e bd       	out	0x2e, r24	; 46
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	08 95       	ret
     dec:	8e b5       	in	r24, 0x2e	; 46
     dee:	8b 7f       	andi	r24, 0xFB	; 251
     df0:	8e bd       	out	0x2e, r24	; 46
     df2:	8e b5       	in	r24, 0x2e	; 46
     df4:	82 60       	ori	r24, 0x02	; 2
     df6:	8e bd       	out	0x2e, r24	; 46
     df8:	8e b5       	in	r24, 0x2e	; 46
     dfa:	81 60       	ori	r24, 0x01	; 1
     dfc:	8e bd       	out	0x2e, r24	; 46
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	08 95       	ret
     e02:	8e b5       	in	r24, 0x2e	; 46
     e04:	84 60       	ori	r24, 0x04	; 4
     e06:	8e bd       	out	0x2e, r24	; 46
     e08:	8e b5       	in	r24, 0x2e	; 46
     e0a:	8d 7f       	andi	r24, 0xFD	; 253
     e0c:	8e bd       	out	0x2e, r24	; 46
     e0e:	8e b5       	in	r24, 0x2e	; 46
     e10:	8e 7f       	andi	r24, 0xFE	; 254
     e12:	8e bd       	out	0x2e, r24	; 46
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	08 95       	ret
     e18:	8e b5       	in	r24, 0x2e	; 46
     e1a:	84 60       	ori	r24, 0x04	; 4
     e1c:	8e bd       	out	0x2e, r24	; 46
     e1e:	8e b5       	in	r24, 0x2e	; 46
     e20:	8d 7f       	andi	r24, 0xFD	; 253
     e22:	8e bd       	out	0x2e, r24	; 46
     e24:	8e b5       	in	r24, 0x2e	; 46
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	8e bd       	out	0x2e, r24	; 46
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	08 95       	ret
     e2e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <counter>
     e32:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <blinkMode>
     e36:	80 34       	cpi	r24, 0x40	; 64
     e38:	91 05       	cpc	r25, r1
     e3a:	29 f1       	breq	.+74     	; 0xe86 <timer_resume+0x19c>
     e3c:	30 f4       	brcc	.+12     	; 0xe4a <timer_resume+0x160>
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	91 05       	cpc	r25, r1
     e42:	59 f0       	breq	.+22     	; 0xe5a <timer_resume+0x170>
     e44:	08 97       	sbiw	r24, 0x08	; 8
     e46:	a1 f0       	breq	.+40     	; 0xe70 <timer_resume+0x186>
     e48:	45 c0       	rjmp	.+138    	; 0xed4 <timer_resume+0x1ea>
     e4a:	81 15       	cp	r24, r1
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	92 07       	cpc	r25, r18
     e50:	29 f1       	breq	.+74     	; 0xe9c <timer_resume+0x1b2>
     e52:	81 15       	cp	r24, r1
     e54:	94 40       	sbci	r25, 0x04	; 4
     e56:	69 f1       	breq	.+90     	; 0xeb2 <timer_resume+0x1c8>
     e58:	3d c0       	rjmp	.+122    	; 0xed4 <timer_resume+0x1ea>
     e5a:	85 b5       	in	r24, 0x25	; 37
     e5c:	8b 7f       	andi	r24, 0xFB	; 251
     e5e:	85 bd       	out	0x25, r24	; 37
     e60:	85 b5       	in	r24, 0x25	; 37
     e62:	8d 7f       	andi	r24, 0xFD	; 253
     e64:	85 bd       	out	0x25, r24	; 37
     e66:	85 b5       	in	r24, 0x25	; 37
     e68:	81 60       	ori	r24, 0x01	; 1
     e6a:	85 bd       	out	0x25, r24	; 37
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	08 95       	ret
     e70:	85 b5       	in	r24, 0x25	; 37
     e72:	8b 7f       	andi	r24, 0xFB	; 251
     e74:	85 bd       	out	0x25, r24	; 37
     e76:	85 b5       	in	r24, 0x25	; 37
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	85 bd       	out	0x25, r24	; 37
     e7c:	85 b5       	in	r24, 0x25	; 37
     e7e:	8e 7f       	andi	r24, 0xFE	; 254
     e80:	85 bd       	out	0x25, r24	; 37
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	08 95       	ret
     e86:	85 b5       	in	r24, 0x25	; 37
     e88:	84 60       	ori	r24, 0x04	; 4
     e8a:	85 bd       	out	0x25, r24	; 37
     e8c:	85 b5       	in	r24, 0x25	; 37
     e8e:	8d 7f       	andi	r24, 0xFD	; 253
     e90:	85 bd       	out	0x25, r24	; 37
     e92:	85 b5       	in	r24, 0x25	; 37
     e94:	8e 7f       	andi	r24, 0xFE	; 254
     e96:	85 bd       	out	0x25, r24	; 37
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	08 95       	ret
     e9c:	85 b5       	in	r24, 0x25	; 37
     e9e:	84 60       	ori	r24, 0x04	; 4
     ea0:	85 bd       	out	0x25, r24	; 37
     ea2:	85 b5       	in	r24, 0x25	; 37
     ea4:	82 60       	ori	r24, 0x02	; 2
     ea6:	85 bd       	out	0x25, r24	; 37
     ea8:	85 b5       	in	r24, 0x25	; 37
     eaa:	8e 7f       	andi	r24, 0xFE	; 254
     eac:	85 bd       	out	0x25, r24	; 37
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	08 95       	ret
     eb2:	85 b5       	in	r24, 0x25	; 37
     eb4:	84 60       	ori	r24, 0x04	; 4
     eb6:	85 bd       	out	0x25, r24	; 37
     eb8:	85 b5       	in	r24, 0x25	; 37
     eba:	82 60       	ori	r24, 0x02	; 2
     ebc:	85 bd       	out	0x25, r24	; 37
     ebe:	85 b5       	in	r24, 0x25	; 37
     ec0:	81 60       	ori	r24, 0x01	; 1
     ec2:	85 bd       	out	0x25, r24	; 37
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	08 95       	ret
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	08 95       	ret
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	08 95       	ret
     ed0:	83 e0       	ldi	r24, 0x03	; 3
     ed2:	08 95       	ret
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	08 95       	ret

00000ed8 <timer_set_callback>:
*******************************************************************************/
enu_timer_error_t_ timer_set_callback(enu_timer_number_t_ enu_timer_used, void (*funPtr)(void))
{
	enu_timer_error_t_ enu_return_value = TIMER_OK;
	
	if(funPtr != NULL_PTR)	
     ed8:	61 15       	cp	r22, r1
     eda:	71 05       	cpc	r23, r1
     edc:	c1 f0       	breq	.+48     	; 0xf0e <timer_set_callback+0x36>
	{	
		switch(enu_timer_used)
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	51 f0       	breq	.+20     	; 0xef6 <timer_set_callback+0x1e>
     ee2:	18 f0       	brcs	.+6      	; 0xeea <timer_set_callback+0x12>
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	69 f0       	breq	.+26     	; 0xf02 <timer_set_callback+0x2a>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <timer_set_callback+0x3a>
		{
			case TIMER_0:	timer_0_callback = funPtr;			break;
     eea:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <timer_0_callback+0x1>
     eee:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <timer_0_callback>
*											TIMER_WRONG_DESIRED_TIME = 2
*											TIMER_NOK = 3
*******************************************************************************/
enu_timer_error_t_ timer_set_callback(enu_timer_number_t_ enu_timer_used, void (*funPtr)(void))
{
	enu_timer_error_t_ enu_return_value = TIMER_OK;
     ef2:	80 e0       	ldi	r24, 0x00	; 0
	
	if(funPtr != NULL_PTR)	
	{	
		switch(enu_timer_used)
		{
			case TIMER_0:	timer_0_callback = funPtr;			break;
     ef4:	08 95       	ret
			
			case TIMER_1:	timer_1_callback = funPtr;			break;
     ef6:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <timer_1_callback+0x1>
     efa:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <timer_1_callback>
*											TIMER_WRONG_DESIRED_TIME = 2
*											TIMER_NOK = 3
*******************************************************************************/
enu_timer_error_t_ timer_set_callback(enu_timer_number_t_ enu_timer_used, void (*funPtr)(void))
{
	enu_timer_error_t_ enu_return_value = TIMER_OK;
     efe:	80 e0       	ldi	r24, 0x00	; 0
	{	
		switch(enu_timer_used)
		{
			case TIMER_0:	timer_0_callback = funPtr;			break;
			
			case TIMER_1:	timer_1_callback = funPtr;			break;
     f00:	08 95       	ret
			
			case TIMER_2:	timer_2_callback = funPtr;			break;
     f02:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <timer_2_callback+0x1>
     f06:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <timer_2_callback>
*											TIMER_WRONG_DESIRED_TIME = 2
*											TIMER_NOK = 3
*******************************************************************************/
enu_timer_error_t_ timer_set_callback(enu_timer_number_t_ enu_timer_used, void (*funPtr)(void))
{
	enu_timer_error_t_ enu_return_value = TIMER_OK;
     f0a:	80 e0       	ldi	r24, 0x00	; 0
		{
			case TIMER_0:	timer_0_callback = funPtr;			break;
			
			case TIMER_1:	timer_1_callback = funPtr;			break;
			
			case TIMER_2:	timer_2_callback = funPtr;			break;
     f0c:	08 95       	ret
			default:	enu_return_value = TIMER_WRONG_TIMER_USED;	break;
		}
	}
	else
	{
		enu_return_value = TIMER_NOK;
     f0e:	83 e0       	ldi	r24, 0x03	; 3
     f10:	08 95       	ret
			
			case TIMER_1:	timer_1_callback = funPtr;			break;
			
			case TIMER_2:	timer_2_callback = funPtr;			break;
			
			default:	enu_return_value = TIMER_WRONG_TIMER_USED;	break;
     f12:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_return_value = TIMER_NOK;
	}
	return enu_return_value;
}
     f14:	08 95       	ret

00000f16 <__vector_11>:

ISR(TIM0_OVF_INT)
{
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	2f 93       	push	r18
     f22:	3f 93       	push	r19
     f24:	4f 93       	push	r20
     f26:	5f 93       	push	r21
     f28:	6f 93       	push	r22
     f2a:	7f 93       	push	r23
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
	if (gl_uint8_normalToPwm == 0	)
     f38:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gl_uint8_normalToPwm>
     f3c:	81 11       	cpse	r24, r1
     f3e:	3b c0       	rjmp	.+118    	; 0xfb6 <__vector_11+0xa0>
	{
		gl_uint32_timer0_OVF_counter ++;
     f40:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <gl_uint32_timer0_OVF_counter>
     f44:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <gl_uint32_timer0_OVF_counter+0x1>
     f48:	a0 91 95 00 	lds	r26, 0x0095	; 0x800095 <gl_uint32_timer0_OVF_counter+0x2>
     f4c:	b0 91 96 00 	lds	r27, 0x0096	; 0x800096 <gl_uint32_timer0_OVF_counter+0x3>
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	a1 1d       	adc	r26, r1
     f54:	b1 1d       	adc	r27, r1
     f56:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <gl_uint32_timer0_OVF_counter>
     f5a:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <gl_uint32_timer0_OVF_counter+0x1>
     f5e:	a0 93 95 00 	sts	0x0095, r26	; 0x800095 <gl_uint32_timer0_OVF_counter+0x2>
     f62:	b0 93 96 00 	sts	0x0096, r27	; 0x800096 <gl_uint32_timer0_OVF_counter+0x3>
		if (gl_uint32_timer0_OVF_counter == gl_uint32_timer0_number_OVFs)
     f66:	40 91 93 00 	lds	r20, 0x0093	; 0x800093 <gl_uint32_timer0_OVF_counter>
     f6a:	50 91 94 00 	lds	r21, 0x0094	; 0x800094 <gl_uint32_timer0_OVF_counter+0x1>
     f6e:	60 91 95 00 	lds	r22, 0x0095	; 0x800095 <gl_uint32_timer0_OVF_counter+0x2>
     f72:	70 91 96 00 	lds	r23, 0x0096	; 0x800096 <gl_uint32_timer0_OVF_counter+0x3>
     f76:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <gl_uint32_timer0_number_OVFs>
     f7a:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <gl_uint32_timer0_number_OVFs+0x1>
     f7e:	a0 91 9a 00 	lds	r26, 0x009A	; 0x80009a <gl_uint32_timer0_number_OVFs+0x2>
     f82:	b0 91 9b 00 	lds	r27, 0x009B	; 0x80009b <gl_uint32_timer0_number_OVFs+0x3>
     f86:	48 17       	cp	r20, r24
     f88:	59 07       	cpc	r21, r25
     f8a:	6a 07       	cpc	r22, r26
     f8c:	7b 07       	cpc	r23, r27
     f8e:	99 f4       	brne	.+38     	; 0xfb6 <__vector_11+0xa0>
		{
			if(timer_0_callback != NULL_PTR)
     f90:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <timer_0_callback>
     f94:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <timer_0_callback+0x1>
     f98:	30 97       	sbiw	r30, 0x00	; 0
     f9a:	09 f0       	breq	.+2      	; 0xf9e <__vector_11+0x88>
			{
				timer_0_callback();
     f9c:	09 95       	icall
			}
			gl_uint32_timer0_OVF_counter   =	0;
     f9e:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <gl_uint32_timer0_OVF_counter>
     fa2:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <gl_uint32_timer0_OVF_counter+0x1>
     fa6:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <gl_uint32_timer0_OVF_counter+0x2>
     faa:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <gl_uint32_timer0_OVF_counter+0x3>
			TCNT0 = 256 - gl_uint8_timer0_rem_ticks;
     fae:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <gl_uint8_timer0_rem_ticks>
     fb2:	81 95       	neg	r24
     fb4:	82 bf       	out	0x32, r24	; 50
	}
	else
	{
		/*TO BE IMPLEMENTED*/
	}
}
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	bf 91       	pop	r27
     fbc:	af 91       	pop	r26
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	7f 91       	pop	r23
     fc4:	6f 91       	pop	r22
     fc6:	5f 91       	pop	r21
     fc8:	4f 91       	pop	r20
     fca:	3f 91       	pop	r19
     fcc:	2f 91       	pop	r18
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <__vector_9>:

ISR(TIM1_OVF_INT)
{
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	2f 93       	push	r18
     fe4:	3f 93       	push	r19
     fe6:	4f 93       	push	r20
     fe8:	5f 93       	push	r21
     fea:	6f 93       	push	r22
     fec:	7f 93       	push	r23
     fee:	8f 93       	push	r24
     ff0:	9f 93       	push	r25
     ff2:	af 93       	push	r26
     ff4:	bf 93       	push	r27
     ff6:	ef 93       	push	r30
     ff8:	ff 93       	push	r31
	gl_uint32_timer1_OVF_counter ++;
     ffa:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gl_uint32_timer1_OVF_counter>
     ffe:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <gl_uint32_timer1_OVF_counter+0x1>
    1002:	a0 91 8b 00 	lds	r26, 0x008B	; 0x80008b <gl_uint32_timer1_OVF_counter+0x2>
    1006:	b0 91 8c 00 	lds	r27, 0x008C	; 0x80008c <gl_uint32_timer1_OVF_counter+0x3>
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	a1 1d       	adc	r26, r1
    100e:	b1 1d       	adc	r27, r1
    1010:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <gl_uint32_timer1_OVF_counter>
    1014:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <gl_uint32_timer1_OVF_counter+0x1>
    1018:	a0 93 8b 00 	sts	0x008B, r26	; 0x80008b <gl_uint32_timer1_OVF_counter+0x2>
    101c:	b0 93 8c 00 	sts	0x008C, r27	; 0x80008c <gl_uint32_timer1_OVF_counter+0x3>
	if (gl_uint32_timer1_OVF_counter  == gl_uint32_timer1_number_OVFs)
    1020:	40 91 89 00 	lds	r20, 0x0089	; 0x800089 <gl_uint32_timer1_OVF_counter>
    1024:	50 91 8a 00 	lds	r21, 0x008A	; 0x80008a <gl_uint32_timer1_OVF_counter+0x1>
    1028:	60 91 8b 00 	lds	r22, 0x008B	; 0x80008b <gl_uint32_timer1_OVF_counter+0x2>
    102c:	70 91 8c 00 	lds	r23, 0x008C	; 0x80008c <gl_uint32_timer1_OVF_counter+0x3>
    1030:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <gl_uint32_timer1_number_OVFs>
    1034:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <gl_uint32_timer1_number_OVFs+0x1>
    1038:	a0 91 91 00 	lds	r26, 0x0091	; 0x800091 <gl_uint32_timer1_number_OVFs+0x2>
    103c:	b0 91 92 00 	lds	r27, 0x0092	; 0x800092 <gl_uint32_timer1_number_OVFs+0x3>
    1040:	48 17       	cp	r20, r24
    1042:	59 07       	cpc	r21, r25
    1044:	6a 07       	cpc	r22, r26
    1046:	7b 07       	cpc	r23, r27
    1048:	c1 f4       	brne	.+48     	; 0x107a <__vector_9+0xa2>
	{
		if(timer_1_callback != NULL_PTR)
    104a:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <timer_1_callback>
    104e:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <timer_1_callback+0x1>
    1052:	30 97       	sbiw	r30, 0x00	; 0
    1054:	09 f0       	breq	.+2      	; 0x1058 <__vector_9+0x80>
		{
			timer_1_callback();
    1056:	09 95       	icall
		}
		gl_uint32_timer1_OVF_counter  =	0;
    1058:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <gl_uint32_timer1_OVF_counter>
    105c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <gl_uint32_timer1_OVF_counter+0x1>
    1060:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <gl_uint32_timer1_OVF_counter+0x2>
    1064:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <gl_uint32_timer1_OVF_counter+0x3>
		TCNT1 = 65536 - gl_uint16_timer1_rem_ticks;
    1068:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gl_uint16_timer1_rem_ticks>
    106c:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <gl_uint16_timer1_rem_ticks+0x1>
    1070:	91 95       	neg	r25
    1072:	81 95       	neg	r24
    1074:	91 09       	sbc	r25, r1
    1076:	9d bd       	out	0x2d, r25	; 45
    1078:	8c bd       	out	0x2c, r24	; 44
		
	}

}
    107a:	ff 91       	pop	r31
    107c:	ef 91       	pop	r30
    107e:	bf 91       	pop	r27
    1080:	af 91       	pop	r26
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	7f 91       	pop	r23
    1088:	6f 91       	pop	r22
    108a:	5f 91       	pop	r21
    108c:	4f 91       	pop	r20
    108e:	3f 91       	pop	r19
    1090:	2f 91       	pop	r18
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <__vector_5>:

ISR(TIM2_OVF_INT)
{
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
	gl_uint32_timer2_OVF_counter ++;
    10be:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <gl_uint32_timer2_OVF_counter>
    10c2:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <gl_uint32_timer2_OVF_counter+0x1>
    10c6:	a0 91 7f 00 	lds	r26, 0x007F	; 0x80007f <gl_uint32_timer2_OVF_counter+0x2>
    10ca:	b0 91 80 00 	lds	r27, 0x0080	; 0x800080 <gl_uint32_timer2_OVF_counter+0x3>
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	a1 1d       	adc	r26, r1
    10d2:	b1 1d       	adc	r27, r1
    10d4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gl_uint32_timer2_OVF_counter>
    10d8:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <gl_uint32_timer2_OVF_counter+0x1>
    10dc:	a0 93 7f 00 	sts	0x007F, r26	; 0x80007f <gl_uint32_timer2_OVF_counter+0x2>
    10e0:	b0 93 80 00 	sts	0x0080, r27	; 0x800080 <gl_uint32_timer2_OVF_counter+0x3>
	if (gl_uint32_timer2_OVF_counter  == gl_uint32_timer2_number_OVFs)
    10e4:	40 91 7d 00 	lds	r20, 0x007D	; 0x80007d <gl_uint32_timer2_OVF_counter>
    10e8:	50 91 7e 00 	lds	r21, 0x007E	; 0x80007e <gl_uint32_timer2_OVF_counter+0x1>
    10ec:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <gl_uint32_timer2_OVF_counter+0x2>
    10f0:	70 91 80 00 	lds	r23, 0x0080	; 0x800080 <gl_uint32_timer2_OVF_counter+0x3>
    10f4:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <gl_uint32_timer2_number_OVFs>
    10f8:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <gl_uint32_timer2_number_OVFs+0x1>
    10fc:	a0 91 87 00 	lds	r26, 0x0087	; 0x800087 <gl_uint32_timer2_number_OVFs+0x2>
    1100:	b0 91 88 00 	lds	r27, 0x0088	; 0x800088 <gl_uint32_timer2_number_OVFs+0x3>
    1104:	48 17       	cp	r20, r24
    1106:	59 07       	cpc	r21, r25
    1108:	6a 07       	cpc	r22, r26
    110a:	7b 07       	cpc	r23, r27
    110c:	99 f4       	brne	.+38     	; 0x1134 <__vector_5+0x98>
	{
		if(timer_2_callback != NULL_PTR)
    110e:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <timer_2_callback>
    1112:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <timer_2_callback+0x1>
    1116:	30 97       	sbiw	r30, 0x00	; 0
    1118:	09 f0       	breq	.+2      	; 0x111c <__vector_5+0x80>
		{
			timer_2_callback();
    111a:	09 95       	icall
		}
		gl_uint32_timer2_OVF_counter  =	0;
    111c:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <gl_uint32_timer2_OVF_counter>
    1120:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <gl_uint32_timer2_OVF_counter+0x1>
    1124:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <gl_uint32_timer2_OVF_counter+0x2>
    1128:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <gl_uint32_timer2_OVF_counter+0x3>
		TCNT2 = 256 - gl_uint8_timer2_rem_ticks;
    112c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gl_uint8_timer2_rem_ticks>
    1130:	81 95       	neg	r24
    1132:	84 bd       	out	0x24, r24	; 36
		
	}

}
    1134:	ff 91       	pop	r31
    1136:	ef 91       	pop	r30
    1138:	bf 91       	pop	r27
    113a:	af 91       	pop	r26
    113c:	9f 91       	pop	r25
    113e:	8f 91       	pop	r24
    1140:	7f 91       	pop	r23
    1142:	6f 91       	pop	r22
    1144:	5f 91       	pop	r21
    1146:	4f 91       	pop	r20
    1148:	3f 91       	pop	r19
    114a:	2f 91       	pop	r18
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <__divsf3>:
    1156:	0e 94 bf 08 	call	0x117e	; 0x117e <__divsf3x>
    115a:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_round>
    115e:	0e 94 99 09 	call	0x1332	; 0x1332 <__fp_pscB>
    1162:	58 f0       	brcs	.+22     	; 0x117a <__divsf3+0x24>
    1164:	0e 94 92 09 	call	0x1324	; 0x1324 <__fp_pscA>
    1168:	40 f0       	brcs	.+16     	; 0x117a <__divsf3+0x24>
    116a:	29 f4       	brne	.+10     	; 0x1176 <__divsf3+0x20>
    116c:	5f 3f       	cpi	r21, 0xFF	; 255
    116e:	29 f0       	breq	.+10     	; 0x117a <__divsf3+0x24>
    1170:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__fp_inf>
    1174:	51 11       	cpse	r21, r1
    1176:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__fp_szero>
    117a:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__fp_nan>

0000117e <__divsf3x>:
    117e:	0e 94 b1 09 	call	0x1362	; 0x1362 <__fp_split3>
    1182:	68 f3       	brcs	.-38     	; 0x115e <__divsf3+0x8>

00001184 <__divsf3_pse>:
    1184:	99 23       	and	r25, r25
    1186:	b1 f3       	breq	.-20     	; 0x1174 <__divsf3+0x1e>
    1188:	55 23       	and	r21, r21
    118a:	91 f3       	breq	.-28     	; 0x1170 <__divsf3+0x1a>
    118c:	95 1b       	sub	r25, r21
    118e:	55 0b       	sbc	r21, r21
    1190:	bb 27       	eor	r27, r27
    1192:	aa 27       	eor	r26, r26
    1194:	62 17       	cp	r22, r18
    1196:	73 07       	cpc	r23, r19
    1198:	84 07       	cpc	r24, r20
    119a:	38 f0       	brcs	.+14     	; 0x11aa <__divsf3_pse+0x26>
    119c:	9f 5f       	subi	r25, 0xFF	; 255
    119e:	5f 4f       	sbci	r21, 0xFF	; 255
    11a0:	22 0f       	add	r18, r18
    11a2:	33 1f       	adc	r19, r19
    11a4:	44 1f       	adc	r20, r20
    11a6:	aa 1f       	adc	r26, r26
    11a8:	a9 f3       	breq	.-22     	; 0x1194 <__divsf3_pse+0x10>
    11aa:	35 d0       	rcall	.+106    	; 0x1216 <__divsf3_pse+0x92>
    11ac:	0e 2e       	mov	r0, r30
    11ae:	3a f0       	brmi	.+14     	; 0x11be <__divsf3_pse+0x3a>
    11b0:	e0 e8       	ldi	r30, 0x80	; 128
    11b2:	32 d0       	rcall	.+100    	; 0x1218 <__divsf3_pse+0x94>
    11b4:	91 50       	subi	r25, 0x01	; 1
    11b6:	50 40       	sbci	r21, 0x00	; 0
    11b8:	e6 95       	lsr	r30
    11ba:	00 1c       	adc	r0, r0
    11bc:	ca f7       	brpl	.-14     	; 0x11b0 <__divsf3_pse+0x2c>
    11be:	2b d0       	rcall	.+86     	; 0x1216 <__divsf3_pse+0x92>
    11c0:	fe 2f       	mov	r31, r30
    11c2:	29 d0       	rcall	.+82     	; 0x1216 <__divsf3_pse+0x92>
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	bb 1f       	adc	r27, r27
    11cc:	26 17       	cp	r18, r22
    11ce:	37 07       	cpc	r19, r23
    11d0:	48 07       	cpc	r20, r24
    11d2:	ab 07       	cpc	r26, r27
    11d4:	b0 e8       	ldi	r27, 0x80	; 128
    11d6:	09 f0       	breq	.+2      	; 0x11da <__divsf3_pse+0x56>
    11d8:	bb 0b       	sbc	r27, r27
    11da:	80 2d       	mov	r24, r0
    11dc:	bf 01       	movw	r22, r30
    11de:	ff 27       	eor	r31, r31
    11e0:	93 58       	subi	r25, 0x83	; 131
    11e2:	5f 4f       	sbci	r21, 0xFF	; 255
    11e4:	3a f0       	brmi	.+14     	; 0x11f4 <__divsf3_pse+0x70>
    11e6:	9e 3f       	cpi	r25, 0xFE	; 254
    11e8:	51 05       	cpc	r21, r1
    11ea:	78 f0       	brcs	.+30     	; 0x120a <__divsf3_pse+0x86>
    11ec:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__fp_inf>
    11f0:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__fp_szero>
    11f4:	5f 3f       	cpi	r21, 0xFF	; 255
    11f6:	e4 f3       	brlt	.-8      	; 0x11f0 <__divsf3_pse+0x6c>
    11f8:	98 3e       	cpi	r25, 0xE8	; 232
    11fa:	d4 f3       	brlt	.-12     	; 0x11f0 <__divsf3_pse+0x6c>
    11fc:	86 95       	lsr	r24
    11fe:	77 95       	ror	r23
    1200:	67 95       	ror	r22
    1202:	b7 95       	ror	r27
    1204:	f7 95       	ror	r31
    1206:	9f 5f       	subi	r25, 0xFF	; 255
    1208:	c9 f7       	brne	.-14     	; 0x11fc <__divsf3_pse+0x78>
    120a:	88 0f       	add	r24, r24
    120c:	91 1d       	adc	r25, r1
    120e:	96 95       	lsr	r25
    1210:	87 95       	ror	r24
    1212:	97 f9       	bld	r25, 7
    1214:	08 95       	ret
    1216:	e1 e0       	ldi	r30, 0x01	; 1
    1218:	66 0f       	add	r22, r22
    121a:	77 1f       	adc	r23, r23
    121c:	88 1f       	adc	r24, r24
    121e:	bb 1f       	adc	r27, r27
    1220:	62 17       	cp	r22, r18
    1222:	73 07       	cpc	r23, r19
    1224:	84 07       	cpc	r24, r20
    1226:	ba 07       	cpc	r27, r26
    1228:	20 f0       	brcs	.+8      	; 0x1232 <__divsf3_pse+0xae>
    122a:	62 1b       	sub	r22, r18
    122c:	73 0b       	sbc	r23, r19
    122e:	84 0b       	sbc	r24, r20
    1230:	ba 0b       	sbc	r27, r26
    1232:	ee 1f       	adc	r30, r30
    1234:	88 f7       	brcc	.-30     	; 0x1218 <__divsf3_pse+0x94>
    1236:	e0 95       	com	r30
    1238:	08 95       	ret

0000123a <__fixunssfsi>:
    123a:	0e 94 b9 09 	call	0x1372	; 0x1372 <__fp_splitA>
    123e:	88 f0       	brcs	.+34     	; 0x1262 <__fixunssfsi+0x28>
    1240:	9f 57       	subi	r25, 0x7F	; 127
    1242:	98 f0       	brcs	.+38     	; 0x126a <__fixunssfsi+0x30>
    1244:	b9 2f       	mov	r27, r25
    1246:	99 27       	eor	r25, r25
    1248:	b7 51       	subi	r27, 0x17	; 23
    124a:	b0 f0       	brcs	.+44     	; 0x1278 <__fixunssfsi+0x3e>
    124c:	e1 f0       	breq	.+56     	; 0x1286 <__fixunssfsi+0x4c>
    124e:	66 0f       	add	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	88 1f       	adc	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	1a f0       	brmi	.+6      	; 0x125e <__fixunssfsi+0x24>
    1258:	ba 95       	dec	r27
    125a:	c9 f7       	brne	.-14     	; 0x124e <__fixunssfsi+0x14>
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <__fixunssfsi+0x4c>
    125e:	b1 30       	cpi	r27, 0x01	; 1
    1260:	91 f0       	breq	.+36     	; 0x1286 <__fixunssfsi+0x4c>
    1262:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__fp_zero>
    1266:	b1 e0       	ldi	r27, 0x01	; 1
    1268:	08 95       	ret
    126a:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_zero>
    126e:	67 2f       	mov	r22, r23
    1270:	78 2f       	mov	r23, r24
    1272:	88 27       	eor	r24, r24
    1274:	b8 5f       	subi	r27, 0xF8	; 248
    1276:	39 f0       	breq	.+14     	; 0x1286 <__fixunssfsi+0x4c>
    1278:	b9 3f       	cpi	r27, 0xF9	; 249
    127a:	cc f3       	brlt	.-14     	; 0x126e <__fixunssfsi+0x34>
    127c:	86 95       	lsr	r24
    127e:	77 95       	ror	r23
    1280:	67 95       	ror	r22
    1282:	b3 95       	inc	r27
    1284:	d9 f7       	brne	.-10     	; 0x127c <__fixunssfsi+0x42>
    1286:	3e f4       	brtc	.+14     	; 0x1296 <__fixunssfsi+0x5c>
    1288:	90 95       	com	r25
    128a:	80 95       	com	r24
    128c:	70 95       	com	r23
    128e:	61 95       	neg	r22
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	8f 4f       	sbci	r24, 0xFF	; 255
    1294:	9f 4f       	sbci	r25, 0xFF	; 255
    1296:	08 95       	ret

00001298 <__floatunsisf>:
    1298:	e8 94       	clt
    129a:	09 c0       	rjmp	.+18     	; 0x12ae <__floatsisf+0x12>

0000129c <__floatsisf>:
    129c:	97 fb       	bst	r25, 7
    129e:	3e f4       	brtc	.+14     	; 0x12ae <__floatsisf+0x12>
    12a0:	90 95       	com	r25
    12a2:	80 95       	com	r24
    12a4:	70 95       	com	r23
    12a6:	61 95       	neg	r22
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	8f 4f       	sbci	r24, 0xFF	; 255
    12ac:	9f 4f       	sbci	r25, 0xFF	; 255
    12ae:	99 23       	and	r25, r25
    12b0:	a9 f0       	breq	.+42     	; 0x12dc <__floatsisf+0x40>
    12b2:	f9 2f       	mov	r31, r25
    12b4:	96 e9       	ldi	r25, 0x96	; 150
    12b6:	bb 27       	eor	r27, r27
    12b8:	93 95       	inc	r25
    12ba:	f6 95       	lsr	r31
    12bc:	87 95       	ror	r24
    12be:	77 95       	ror	r23
    12c0:	67 95       	ror	r22
    12c2:	b7 95       	ror	r27
    12c4:	f1 11       	cpse	r31, r1
    12c6:	f8 cf       	rjmp	.-16     	; 0x12b8 <__floatsisf+0x1c>
    12c8:	fa f4       	brpl	.+62     	; 0x1308 <__floatsisf+0x6c>
    12ca:	bb 0f       	add	r27, r27
    12cc:	11 f4       	brne	.+4      	; 0x12d2 <__floatsisf+0x36>
    12ce:	60 ff       	sbrs	r22, 0
    12d0:	1b c0       	rjmp	.+54     	; 0x1308 <__floatsisf+0x6c>
    12d2:	6f 5f       	subi	r22, 0xFF	; 255
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255
    12d6:	8f 4f       	sbci	r24, 0xFF	; 255
    12d8:	9f 4f       	sbci	r25, 0xFF	; 255
    12da:	16 c0       	rjmp	.+44     	; 0x1308 <__floatsisf+0x6c>
    12dc:	88 23       	and	r24, r24
    12de:	11 f0       	breq	.+4      	; 0x12e4 <__floatsisf+0x48>
    12e0:	96 e9       	ldi	r25, 0x96	; 150
    12e2:	11 c0       	rjmp	.+34     	; 0x1306 <__floatsisf+0x6a>
    12e4:	77 23       	and	r23, r23
    12e6:	21 f0       	breq	.+8      	; 0x12f0 <__floatsisf+0x54>
    12e8:	9e e8       	ldi	r25, 0x8E	; 142
    12ea:	87 2f       	mov	r24, r23
    12ec:	76 2f       	mov	r23, r22
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <__floatsisf+0x5e>
    12f0:	66 23       	and	r22, r22
    12f2:	71 f0       	breq	.+28     	; 0x1310 <__floatsisf+0x74>
    12f4:	96 e8       	ldi	r25, 0x86	; 134
    12f6:	86 2f       	mov	r24, r22
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	2a f0       	brmi	.+10     	; 0x1308 <__floatsisf+0x6c>
    12fe:	9a 95       	dec	r25
    1300:	66 0f       	add	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	88 1f       	adc	r24, r24
    1306:	da f7       	brpl	.-10     	; 0x12fe <__floatsisf+0x62>
    1308:	88 0f       	add	r24, r24
    130a:	96 95       	lsr	r25
    130c:	87 95       	ror	r24
    130e:	97 f9       	bld	r25, 7
    1310:	08 95       	ret

00001312 <__fp_inf>:
    1312:	97 f9       	bld	r25, 7
    1314:	9f 67       	ori	r25, 0x7F	; 127
    1316:	80 e8       	ldi	r24, 0x80	; 128
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	08 95       	ret

0000131e <__fp_nan>:
    131e:	9f ef       	ldi	r25, 0xFF	; 255
    1320:	80 ec       	ldi	r24, 0xC0	; 192
    1322:	08 95       	ret

00001324 <__fp_pscA>:
    1324:	00 24       	eor	r0, r0
    1326:	0a 94       	dec	r0
    1328:	16 16       	cp	r1, r22
    132a:	17 06       	cpc	r1, r23
    132c:	18 06       	cpc	r1, r24
    132e:	09 06       	cpc	r0, r25
    1330:	08 95       	ret

00001332 <__fp_pscB>:
    1332:	00 24       	eor	r0, r0
    1334:	0a 94       	dec	r0
    1336:	12 16       	cp	r1, r18
    1338:	13 06       	cpc	r1, r19
    133a:	14 06       	cpc	r1, r20
    133c:	05 06       	cpc	r0, r21
    133e:	08 95       	ret

00001340 <__fp_round>:
    1340:	09 2e       	mov	r0, r25
    1342:	03 94       	inc	r0
    1344:	00 0c       	add	r0, r0
    1346:	11 f4       	brne	.+4      	; 0x134c <__fp_round+0xc>
    1348:	88 23       	and	r24, r24
    134a:	52 f0       	brmi	.+20     	; 0x1360 <__fp_round+0x20>
    134c:	bb 0f       	add	r27, r27
    134e:	40 f4       	brcc	.+16     	; 0x1360 <__fp_round+0x20>
    1350:	bf 2b       	or	r27, r31
    1352:	11 f4       	brne	.+4      	; 0x1358 <__fp_round+0x18>
    1354:	60 ff       	sbrs	r22, 0
    1356:	04 c0       	rjmp	.+8      	; 0x1360 <__fp_round+0x20>
    1358:	6f 5f       	subi	r22, 0xFF	; 255
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	08 95       	ret

00001362 <__fp_split3>:
    1362:	57 fd       	sbrc	r21, 7
    1364:	90 58       	subi	r25, 0x80	; 128
    1366:	44 0f       	add	r20, r20
    1368:	55 1f       	adc	r21, r21
    136a:	59 f0       	breq	.+22     	; 0x1382 <__fp_splitA+0x10>
    136c:	5f 3f       	cpi	r21, 0xFF	; 255
    136e:	71 f0       	breq	.+28     	; 0x138c <__fp_splitA+0x1a>
    1370:	47 95       	ror	r20

00001372 <__fp_splitA>:
    1372:	88 0f       	add	r24, r24
    1374:	97 fb       	bst	r25, 7
    1376:	99 1f       	adc	r25, r25
    1378:	61 f0       	breq	.+24     	; 0x1392 <__fp_splitA+0x20>
    137a:	9f 3f       	cpi	r25, 0xFF	; 255
    137c:	79 f0       	breq	.+30     	; 0x139c <__fp_splitA+0x2a>
    137e:	87 95       	ror	r24
    1380:	08 95       	ret
    1382:	12 16       	cp	r1, r18
    1384:	13 06       	cpc	r1, r19
    1386:	14 06       	cpc	r1, r20
    1388:	55 1f       	adc	r21, r21
    138a:	f2 cf       	rjmp	.-28     	; 0x1370 <__fp_split3+0xe>
    138c:	46 95       	lsr	r20
    138e:	f1 df       	rcall	.-30     	; 0x1372 <__fp_splitA>
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <__fp_splitA+0x30>
    1392:	16 16       	cp	r1, r22
    1394:	17 06       	cpc	r1, r23
    1396:	18 06       	cpc	r1, r24
    1398:	99 1f       	adc	r25, r25
    139a:	f1 cf       	rjmp	.-30     	; 0x137e <__fp_splitA+0xc>
    139c:	86 95       	lsr	r24
    139e:	71 05       	cpc	r23, r1
    13a0:	61 05       	cpc	r22, r1
    13a2:	08 94       	sec
    13a4:	08 95       	ret

000013a6 <__fp_zero>:
    13a6:	e8 94       	clt

000013a8 <__fp_szero>:
    13a8:	bb 27       	eor	r27, r27
    13aa:	66 27       	eor	r22, r22
    13ac:	77 27       	eor	r23, r23
    13ae:	cb 01       	movw	r24, r22
    13b0:	97 f9       	bld	r25, 7
    13b2:	08 95       	ret

000013b4 <__mulsf3>:
    13b4:	0e 94 ed 09 	call	0x13da	; 0x13da <__mulsf3x>
    13b8:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_round>
    13bc:	0e 94 92 09 	call	0x1324	; 0x1324 <__fp_pscA>
    13c0:	38 f0       	brcs	.+14     	; 0x13d0 <__mulsf3+0x1c>
    13c2:	0e 94 99 09 	call	0x1332	; 0x1332 <__fp_pscB>
    13c6:	20 f0       	brcs	.+8      	; 0x13d0 <__mulsf3+0x1c>
    13c8:	95 23       	and	r25, r21
    13ca:	11 f0       	breq	.+4      	; 0x13d0 <__mulsf3+0x1c>
    13cc:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__fp_inf>
    13d0:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__fp_nan>
    13d4:	11 24       	eor	r1, r1
    13d6:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__fp_szero>

000013da <__mulsf3x>:
    13da:	0e 94 b1 09 	call	0x1362	; 0x1362 <__fp_split3>
    13de:	70 f3       	brcs	.-36     	; 0x13bc <__mulsf3+0x8>

000013e0 <__mulsf3_pse>:
    13e0:	95 9f       	mul	r25, r21
    13e2:	c1 f3       	breq	.-16     	; 0x13d4 <__mulsf3+0x20>
    13e4:	95 0f       	add	r25, r21
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	55 1f       	adc	r21, r21
    13ea:	62 9f       	mul	r22, r18
    13ec:	f0 01       	movw	r30, r0
    13ee:	72 9f       	mul	r23, r18
    13f0:	bb 27       	eor	r27, r27
    13f2:	f0 0d       	add	r31, r0
    13f4:	b1 1d       	adc	r27, r1
    13f6:	63 9f       	mul	r22, r19
    13f8:	aa 27       	eor	r26, r26
    13fa:	f0 0d       	add	r31, r0
    13fc:	b1 1d       	adc	r27, r1
    13fe:	aa 1f       	adc	r26, r26
    1400:	64 9f       	mul	r22, r20
    1402:	66 27       	eor	r22, r22
    1404:	b0 0d       	add	r27, r0
    1406:	a1 1d       	adc	r26, r1
    1408:	66 1f       	adc	r22, r22
    140a:	82 9f       	mul	r24, r18
    140c:	22 27       	eor	r18, r18
    140e:	b0 0d       	add	r27, r0
    1410:	a1 1d       	adc	r26, r1
    1412:	62 1f       	adc	r22, r18
    1414:	73 9f       	mul	r23, r19
    1416:	b0 0d       	add	r27, r0
    1418:	a1 1d       	adc	r26, r1
    141a:	62 1f       	adc	r22, r18
    141c:	83 9f       	mul	r24, r19
    141e:	a0 0d       	add	r26, r0
    1420:	61 1d       	adc	r22, r1
    1422:	22 1f       	adc	r18, r18
    1424:	74 9f       	mul	r23, r20
    1426:	33 27       	eor	r19, r19
    1428:	a0 0d       	add	r26, r0
    142a:	61 1d       	adc	r22, r1
    142c:	23 1f       	adc	r18, r19
    142e:	84 9f       	mul	r24, r20
    1430:	60 0d       	add	r22, r0
    1432:	21 1d       	adc	r18, r1
    1434:	82 2f       	mov	r24, r18
    1436:	76 2f       	mov	r23, r22
    1438:	6a 2f       	mov	r22, r26
    143a:	11 24       	eor	r1, r1
    143c:	9f 57       	subi	r25, 0x7F	; 127
    143e:	50 40       	sbci	r21, 0x00	; 0
    1440:	9a f0       	brmi	.+38     	; 0x1468 <__mulsf3_pse+0x88>
    1442:	f1 f0       	breq	.+60     	; 0x1480 <__mulsf3_pse+0xa0>
    1444:	88 23       	and	r24, r24
    1446:	4a f0       	brmi	.+18     	; 0x145a <__mulsf3_pse+0x7a>
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	bb 1f       	adc	r27, r27
    144e:	66 1f       	adc	r22, r22
    1450:	77 1f       	adc	r23, r23
    1452:	88 1f       	adc	r24, r24
    1454:	91 50       	subi	r25, 0x01	; 1
    1456:	50 40       	sbci	r21, 0x00	; 0
    1458:	a9 f7       	brne	.-22     	; 0x1444 <__mulsf3_pse+0x64>
    145a:	9e 3f       	cpi	r25, 0xFE	; 254
    145c:	51 05       	cpc	r21, r1
    145e:	80 f0       	brcs	.+32     	; 0x1480 <__mulsf3_pse+0xa0>
    1460:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__fp_inf>
    1464:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__fp_szero>
    1468:	5f 3f       	cpi	r21, 0xFF	; 255
    146a:	e4 f3       	brlt	.-8      	; 0x1464 <__mulsf3_pse+0x84>
    146c:	98 3e       	cpi	r25, 0xE8	; 232
    146e:	d4 f3       	brlt	.-12     	; 0x1464 <__mulsf3_pse+0x84>
    1470:	86 95       	lsr	r24
    1472:	77 95       	ror	r23
    1474:	67 95       	ror	r22
    1476:	b7 95       	ror	r27
    1478:	f7 95       	ror	r31
    147a:	e7 95       	ror	r30
    147c:	9f 5f       	subi	r25, 0xFF	; 255
    147e:	c1 f7       	brne	.-16     	; 0x1470 <__mulsf3_pse+0x90>
    1480:	fe 2b       	or	r31, r30
    1482:	88 0f       	add	r24, r24
    1484:	91 1d       	adc	r25, r1
    1486:	96 95       	lsr	r25
    1488:	87 95       	ror	r24
    148a:	97 f9       	bld	r25, 7
    148c:	08 95       	ret

0000148e <__tablejump2__>:
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	05 90       	lpm	r0, Z+
    1494:	f4 91       	lpm	r31, Z
    1496:	e0 2d       	mov	r30, r0
    1498:	09 94       	ijmp

0000149a <_exit>:
    149a:	f8 94       	cli

0000149c <__stop_program>:
    149c:	ff cf       	rjmp	.-2      	; 0x149c <__stop_program>
