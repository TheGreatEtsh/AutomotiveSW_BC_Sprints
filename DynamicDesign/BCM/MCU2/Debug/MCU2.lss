
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000b6a  00000bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000062a  00800078  00800078  00000c16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000248f  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e29  00000000  00000000  00003303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013b1  00000000  00000000  0000412c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  000054e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eb9  00000000  00000000  00005880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000168f  00000000  00000000  00006739  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00007dc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_13>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	1d 02       	muls	r17, r29
  56:	21 02       	muls	r18, r17
  58:	25 02       	muls	r18, r21
  5a:	29 02       	muls	r18, r25
  5c:	2d 02       	muls	r18, r29
  5e:	31 02       	muls	r19, r17
  60:	35 02       	muls	r19, r21
  62:	39 02       	muls	r19, r25
  64:	3d 02       	muls	r19, r29
  66:	41 02       	muls	r20, r17
  68:	45 02       	muls	r20, r21
  6a:	49 02       	muls	r20, r25

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf e5       	ldi	r28, 0x5F	; 95
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	10 e0       	ldi	r17, 0x00	; 0
  7a:	a0 e6       	ldi	r26, 0x60	; 96
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	ea e6       	ldi	r30, 0x6A	; 106
  80:	fb e0       	ldi	r31, 0x0B	; 11
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a8 37       	cpi	r26, 0x78	; 120
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	26 e0       	ldi	r18, 0x06	; 6
  90:	a8 e7       	ldi	r26, 0x78	; 120
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a2 3a       	cpi	r26, 0xA2	; 162
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  a2:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <APP_saveReceivedTask>:
void APP_saveReceivedTask(void)
{
// 	uint8_t** ptr_uint8_receivedData = NULL_PTR;
// 	uint16_t uint16_dataSize = 0;
	
	LED_toggle(LED_1);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_toggle>
  b0:	08 95       	ret

000000b2 <APP_dataSentTask>:
// 	BCM_send_n(&glstr_exchangeDataInstance);
}

void APP_dataSentTask(void)
{
	LED_toggle(LED_0);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_toggle>
  b8:	08 95       	ret

000000ba <APP_init>:

str_BCM_instance_t glstr_exchangeDataInstance;

void APP_init (void)
{
	LED_init();
  ba:	0e 94 9d 00 	call	0x13a	; 0x13a <LED_init>
	
	glstr_exchangeDataInstance.dataType = BCM_EXCHANGE;
  be:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <glstr_exchangeDataInstance>
	BCM_init(&glstr_exchangeDataInstance);
  c2:	87 e8       	ldi	r24, 0x87	; 135
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 07 03 	call	0x60e	; 0x60e <BCM_init>
	BCM_setCallBack(&glstr_exchangeDataInstance,APP_saveReceivedTask);
  ca:	65 e5       	ldi	r22, 0x55	; 85
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	87 e8       	ldi	r24, 0x87	; 135
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 c2 04 	call	0x984	; 0x984 <BCM_setCallBack>
	BCM_dataSentCallBack(APP_dataSentTask);
  d6:	89 e5       	ldi	r24, 0x59	; 89
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <BCM_dataSentCallBack>
  de:	08 95       	ret

000000e0 <APP_superLoop>:
}

void APP_superLoop(void)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	c0 59       	subi	r28, 0x90	; 144
  ea:	d1 40       	sbci	r29, 0x01	; 1
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
	glstr_exchangeDataInstance.dataSize = SIZE_OF_FIRST_INSTANCE;
  f6:	80 e9       	ldi	r24, 0x90	; 144
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <glstr_exchangeDataInstance+0x2>
  fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <glstr_exchangeDataInstance+0x1>
	uint16_t counter = 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t dataArr [SIZE_OF_FIRST_INSTANCE];
	for (; counter < SIZE_OF_FIRST_INSTANCE; counter++)
 106:	08 c0       	rjmp	.+16     	; 0x118 <APP_superLoop+0x38>
	{
		dataArr[counter] = counter;
 108:	e1 e0       	ldi	r30, 0x01	; 1
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ec 0f       	add	r30, r28
 10e:	fd 1f       	adc	r31, r29
 110:	e8 0f       	add	r30, r24
 112:	f9 1f       	adc	r31, r25
 114:	80 83       	st	Z, r24
void APP_superLoop(void)
{
	glstr_exchangeDataInstance.dataSize = SIZE_OF_FIRST_INSTANCE;
	uint16_t counter = 0;
	uint8_t dataArr [SIZE_OF_FIRST_INSTANCE];
	for (; counter < SIZE_OF_FIRST_INSTANCE; counter++)
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	80 39       	cpi	r24, 0x90	; 144
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	92 07       	cpc	r25, r18
 11e:	a0 f3       	brcs	.-24     	; 0x108 <APP_superLoop+0x28>
	{
		dataArr[counter] = counter;
	}
	
	glstr_exchangeDataInstance.data = dataArr;
 120:	ce 01       	movw	r24, r28
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <glstr_exchangeDataInstance+0x4>
 128:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <glstr_exchangeDataInstance+0x3>
	BCM_send_n(&glstr_exchangeDataInstance);
 12c:	87 e8       	ldi	r24, 0x87	; 135
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 31 03 	call	0x662	; 0x662 <BCM_send_n>
	
	while(1)
	{
		BCM_dispatcher();
 134:	0e 94 da 03 	call	0x7b4	; 0x7b4 <BCM_dispatcher>
 138:	fd cf       	rjmp	.-6      	; 0x134 <APP_superLoop+0x54>

0000013a <LED_init>:
					DIO_LOW);
		en_a_error = LED_OK;
	}
	
	return en_a_error;
}
 13a:	cf 93       	push	r28
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	20 c0       	rjmp	.+64     	; 0x182 <LED_init+0x48>
 142:	2c 2f       	mov	r18, r28
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	e2 0f       	add	r30, r18
 14e:	f3 1f       	adc	r31, r19
 150:	ec 59       	subi	r30, 0x9C	; 156
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	81 81       	ldd	r24, Z+1	; 0x01
 156:	85 34       	cpi	r24, 0x45	; 69
 158:	80 f4       	brcc	.+32     	; 0x17a <LED_init+0x40>
 15a:	f9 01       	movw	r30, r18
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	2e 0f       	add	r18, r30
 162:	3f 1f       	adc	r19, r31
 164:	f9 01       	movw	r30, r18
 166:	ec 59       	subi	r30, 0x9C	; 156
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	62 81       	ldd	r22, Z+2	; 0x02
 16c:	68 30       	cpi	r22, 0x08	; 8
 16e:	38 f4       	brcc	.+14     	; 0x17e <LED_init+0x44>
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_init>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	03 c0       	rjmp	.+6      	; 0x180 <LED_init+0x46>
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	01 c0       	rjmp	.+2      	; 0x180 <LED_init+0x46>
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	cf 5f       	subi	r28, 0xFF	; 255
 182:	c2 30       	cpi	r28, 0x02	; 2
 184:	f0 f2       	brcs	.-68     	; 0x142 <LED_init+0x8>
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <LED_toggle>:
enu_LED_status_t LED_toggle(uint8_t uint8_ledID)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	uint8_t counter = 0;
 18a:	20 e0       	ldi	r18, 0x00	; 0
	for (;counter < LED_NUMBER_OF_LEDS; counter++)
 18c:	0e c0       	rjmp	.+28     	; 0x1aa <LED_toggle+0x20>
	{
		if (uint8_ledID == cst_str_LED_config[counter].uint8_ledID)
 18e:	42 2f       	mov	r20, r18
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	fa 01       	movw	r30, r20
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	4e 0f       	add	r20, r30
 19a:	5f 1f       	adc	r21, r31
 19c:	fa 01       	movw	r30, r20
 19e:	ec 59       	subi	r30, 0x9C	; 156
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	90 81       	ld	r25, Z
 1a4:	98 17       	cp	r25, r24
 1a6:	19 f0       	breq	.+6      	; 0x1ae <LED_toggle+0x24>
enu_LED_status_t LED_toggle(uint8_t uint8_ledID)
{
	enu_LED_status_t en_a_error = LED_OK;
	
	uint8_t counter = 0;
	for (;counter < LED_NUMBER_OF_LEDS; counter++)
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	22 30       	cpi	r18, 0x02	; 2
 1ac:	80 f3       	brcs	.-32     	; 0x18e <LED_toggle+0x4>
		{
			break;
		}
	}
	
	if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	f9 01       	movw	r30, r18
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	e2 0f       	add	r30, r18
 1b8:	f3 1f       	adc	r31, r19
 1ba:	ec 59       	subi	r30, 0x9C	; 156
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	81 81       	ldd	r24, Z+1	; 0x01
 1c0:	85 34       	cpi	r24, 0x45	; 69
 1c2:	78 f4       	brcc	.+30     	; 0x1e2 <LED_toggle+0x58>
	{
		en_a_error = LED_WRONG_LED_PORT;
	}
	else if (cst_str_LED_config[counter].uint8_ledPin > 7)
 1c4:	f9 01       	movw	r30, r18
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	2e 0f       	add	r18, r30
 1cc:	3f 1f       	adc	r19, r31
 1ce:	f9 01       	movw	r30, r18
 1d0:	ec 59       	subi	r30, 0x9C	; 156
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	62 81       	ldd	r22, Z+2	; 0x02
 1d6:	68 30       	cpi	r22, 0x08	; 8
 1d8:	30 f4       	brcc	.+12     	; 0x1e6 <LED_toggle+0x5c>
	{
		en_a_error = LED_WRONG_LED_PIN;
	}
	else
	{
		DIO_toggle(cst_str_LED_config[counter].uint8_ledPort, cst_str_LED_config[counter].uint8_ledPin);
 1da:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_toggle>
		en_a_error = LED_OK;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	08 95       	ret
		}
	}
	
	if (cst_str_LED_config[counter].uint8_ledPort > DIO_PORT_D)
	{
		en_a_error = LED_WRONG_LED_PORT;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	08 95       	ret
	}
	else if (cst_str_LED_config[counter].uint8_ledPin > 7)
	{
		en_a_error = LED_WRONG_LED_PIN;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
		DIO_toggle(cst_str_LED_config[counter].uint8_ledPort, cst_str_LED_config[counter].uint8_ledPin);
		en_a_error = LED_OK;
	}
	
	return en_a_error;
}
 1e8:	08 95       	ret

000001ea <main>:
#include "APP/app_interface.h"

int main(void)
{
    /* Replace with your application code */
	APP_init();
 1ea:	0e 94 5d 00 	call	0xba	; 0xba <APP_init>
	APP_superLoop();
 1ee:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_superLoop>
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <main+0x8>

000001f4 <DIO_init>:
	{
		error = DIO_WRONG_PIN_NUMBER;
	}
	return error;

}
 1f4:	68 30       	cpi	r22, 0x08	; 8
 1f6:	08 f0       	brcs	.+2      	; 0x1fa <DIO_init+0x6>
 1f8:	80 c0       	rjmp	.+256    	; 0x2fa <DIO_init+0x106>
 1fa:	44 23       	and	r20, r20
 1fc:	21 f0       	breq	.+8      	; 0x206 <DIO_init+0x12>
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	09 f4       	brne	.+2      	; 0x204 <DIO_init+0x10>
 202:	40 c0       	rjmp	.+128    	; 0x284 <DIO_init+0x90>
 204:	7c c0       	rjmp	.+248    	; 0x2fe <DIO_init+0x10a>
 206:	82 34       	cpi	r24, 0x42	; 66
 208:	b1 f0       	breq	.+44     	; 0x236 <DIO_init+0x42>
 20a:	18 f4       	brcc	.+6      	; 0x212 <DIO_init+0x1e>
 20c:	81 34       	cpi	r24, 0x41	; 65
 20e:	31 f0       	breq	.+12     	; 0x21c <DIO_init+0x28>
 210:	78 c0       	rjmp	.+240    	; 0x302 <DIO_init+0x10e>
 212:	83 34       	cpi	r24, 0x43	; 67
 214:	e9 f0       	breq	.+58     	; 0x250 <DIO_init+0x5c>
 216:	84 34       	cpi	r24, 0x44	; 68
 218:	41 f1       	breq	.+80     	; 0x26a <DIO_init+0x76>
 21a:	73 c0       	rjmp	.+230    	; 0x302 <DIO_init+0x10e>
 21c:	2a b3       	in	r18, 0x1a	; 26
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_init+0x34>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_init+0x30>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	8a bb       	out	0x1a, r24	; 26
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret
 236:	27 b3       	in	r18, 0x17	; 23
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_init+0x4e>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_init+0x4a>
 246:	80 95       	com	r24
 248:	82 23       	and	r24, r18
 24a:	87 bb       	out	0x17, r24	; 23
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	08 95       	ret
 250:	24 b3       	in	r18, 0x14	; 20
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_init+0x68>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_init+0x64>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	84 bb       	out	0x14, r24	; 20
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret
 26a:	21 b3       	in	r18, 0x11	; 17
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_init+0x82>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_init+0x7e>
 27a:	80 95       	com	r24
 27c:	82 23       	and	r24, r18
 27e:	81 bb       	out	0x11, r24	; 17
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	08 95       	ret
 284:	82 34       	cpi	r24, 0x42	; 66
 286:	a9 f0       	breq	.+42     	; 0x2b2 <DIO_init+0xbe>
 288:	18 f4       	brcc	.+6      	; 0x290 <DIO_init+0x9c>
 28a:	81 34       	cpi	r24, 0x41	; 65
 28c:	31 f0       	breq	.+12     	; 0x29a <DIO_init+0xa6>
 28e:	3b c0       	rjmp	.+118    	; 0x306 <DIO_init+0x112>
 290:	83 34       	cpi	r24, 0x43	; 67
 292:	d9 f0       	breq	.+54     	; 0x2ca <DIO_init+0xd6>
 294:	84 34       	cpi	r24, 0x44	; 68
 296:	29 f1       	breq	.+74     	; 0x2e2 <DIO_init+0xee>
 298:	36 c0       	rjmp	.+108    	; 0x306 <DIO_init+0x112>
 29a:	2a b3       	in	r18, 0x1a	; 26
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_init+0xb2>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_init+0xae>
 2aa:	82 2b       	or	r24, r18
 2ac:	8a bb       	out	0x1a, r24	; 26
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	08 95       	ret
 2b2:	27 b3       	in	r18, 0x17	; 23
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_init+0xca>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_init+0xc6>
 2c2:	82 2b       	or	r24, r18
 2c4:	87 bb       	out	0x17, r24	; 23
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	08 95       	ret
 2ca:	24 b3       	in	r18, 0x14	; 20
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_init+0xe2>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_init+0xde>
 2da:	82 2b       	or	r24, r18
 2dc:	84 bb       	out	0x14, r24	; 20
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	08 95       	ret
 2e2:	21 b3       	in	r18, 0x11	; 17
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_init+0xfa>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_init+0xf6>
 2f2:	82 2b       	or	r24, r18
 2f4:	81 bb       	out	0x11, r24	; 17
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	08 95       	ret
 2fe:	84 e0       	ldi	r24, 0x04	; 4
 300:	08 95       	ret
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	08 95       	ret
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	08 95       	ret

0000030a <DIO_toggle>:
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_DIO_status_t DIO_toggle(uint8_t uint8_portNumber, uint8_t uint8_pinNumber)						// Toggle dio
{
	enu_DIO_status_t error = DIO_OK;
	if (uint8_pinNumber < 8)
 30a:	68 30       	cpi	r22, 0x08	; 8
 30c:	d8 f5       	brcc	.+118    	; 0x384 <DIO_toggle+0x7a>
	{
		switch(uint8_portNumber)
 30e:	82 34       	cpi	r24, 0x42	; 66
 310:	a9 f0       	breq	.+42     	; 0x33c <DIO_toggle+0x32>
 312:	18 f4       	brcc	.+6      	; 0x31a <DIO_toggle+0x10>
 314:	81 34       	cpi	r24, 0x41	; 65
 316:	31 f0       	breq	.+12     	; 0x324 <DIO_toggle+0x1a>
 318:	37 c0       	rjmp	.+110    	; 0x388 <DIO_toggle+0x7e>
 31a:	83 34       	cpi	r24, 0x43	; 67
 31c:	d9 f0       	breq	.+54     	; 0x354 <DIO_toggle+0x4a>
 31e:	84 34       	cpi	r24, 0x44	; 68
 320:	29 f1       	breq	.+74     	; 0x36c <DIO_toggle+0x62>
 322:	32 c0       	rjmp	.+100    	; 0x388 <DIO_toggle+0x7e>
		{
			case DIO_PORT_A:	TGL_BIT(PORTA,uint8_pinNumber);		break;
 324:	2b b3       	in	r18, 0x1b	; 27
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_toggle+0x26>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_toggle+0x22>
 334:	82 27       	eor	r24, r18
 336:	8b bb       	out	0x1b, r24	; 27
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_DIO_status_t DIO_toggle(uint8_t uint8_portNumber, uint8_t uint8_pinNumber)						// Toggle dio
{
	enu_DIO_status_t error = DIO_OK;
 338:	80 e0       	ldi	r24, 0x00	; 0
	if (uint8_pinNumber < 8)
	{
		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	TGL_BIT(PORTA,uint8_pinNumber);		break;
 33a:	08 95       	ret
			case DIO_PORT_B:	TGL_BIT(PORTB,uint8_pinNumber);		break;
 33c:	28 b3       	in	r18, 0x18	; 24
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_toggle+0x3e>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_toggle+0x3a>
 34c:	82 27       	eor	r24, r18
 34e:	88 bb       	out	0x18, r24	; 24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_DIO_status_t DIO_toggle(uint8_t uint8_portNumber, uint8_t uint8_pinNumber)						// Toggle dio
{
	enu_DIO_status_t error = DIO_OK;
 350:	80 e0       	ldi	r24, 0x00	; 0
	if (uint8_pinNumber < 8)
	{
		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	TGL_BIT(PORTA,uint8_pinNumber);		break;
			case DIO_PORT_B:	TGL_BIT(PORTB,uint8_pinNumber);		break;
 352:	08 95       	ret
			case DIO_PORT_C:	TGL_BIT(PORTC,uint8_pinNumber);		break;
 354:	25 b3       	in	r18, 0x15	; 21
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_toggle+0x56>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_toggle+0x52>
 364:	82 27       	eor	r24, r18
 366:	85 bb       	out	0x15, r24	; 21
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_DIO_status_t DIO_toggle(uint8_t uint8_portNumber, uint8_t uint8_pinNumber)						// Toggle dio
{
	enu_DIO_status_t error = DIO_OK;
 368:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	TGL_BIT(PORTA,uint8_pinNumber);		break;
			case DIO_PORT_B:	TGL_BIT(PORTB,uint8_pinNumber);		break;
			case DIO_PORT_C:	TGL_BIT(PORTC,uint8_pinNumber);		break;
 36a:	08 95       	ret
			case DIO_PORT_D:	TGL_BIT(PORTD,uint8_pinNumber);		break;
 36c:	22 b3       	in	r18, 0x12	; 18
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_toggle+0x6e>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_toggle+0x6a>
 37c:	82 27       	eor	r24, r18
 37e:	82 bb       	out	0x12, r24	; 18
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
enu_DIO_status_t DIO_toggle(uint8_t uint8_portNumber, uint8_t uint8_pinNumber)						// Toggle dio
{
	enu_DIO_status_t error = DIO_OK;
 380:	80 e0       	ldi	r24, 0x00	; 0
		switch(uint8_portNumber)
		{
			case DIO_PORT_A:	TGL_BIT(PORTA,uint8_pinNumber);		break;
			case DIO_PORT_B:	TGL_BIT(PORTB,uint8_pinNumber);		break;
			case DIO_PORT_C:	TGL_BIT(PORTC,uint8_pinNumber);		break;
			case DIO_PORT_D:	TGL_BIT(PORTD,uint8_pinNumber);		break;
 382:	08 95       	ret
			default:		error = DIO_WRONG_PORT_NUMBER;		break;
		}	
	}
	else
	{
		error = DIO_WRONG_PIN_NUMBER;
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	08 95       	ret
		{
			case DIO_PORT_A:	TGL_BIT(PORTA,uint8_pinNumber);		break;
			case DIO_PORT_B:	TGL_BIT(PORTB,uint8_pinNumber);		break;
			case DIO_PORT_C:	TGL_BIT(PORTC,uint8_pinNumber);		break;
			case DIO_PORT_D:	TGL_BIT(PORTD,uint8_pinNumber);		break;
			default:		error = DIO_WRONG_PORT_NUMBER;		break;
 388:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = DIO_WRONG_PIN_NUMBER;
	}
	return error;
}
 38a:	08 95       	ret

0000038c <UART_init>:
{
	enu_UART_status_t returnValue = UART_OK;
	*ptr_uint8_receivedData =  arr_g_recieveBuffer;
	*uint16_dataSize = gluint16_dataSize;
	return returnValue;
}
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	84 e4       	ldi	r24, 0x44	; 68
 392:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_init>
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	84 e4       	ldi	r24, 0x44	; 68
 39c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_init>
 3a0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <cst_str_UART_config+0x4>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	29 f4       	brne	.+10     	; 0x3b2 <UART_init+0x26>
 3a8:	8a b1       	in	r24, 0x0a	; 10
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	8a b9       	out	0x0a, r24	; 10
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <UART_init+0x36>
 3b2:	81 11       	cpse	r24, r1
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <UART_init+0x34>
 3b6:	8a b1       	in	r24, 0x0a	; 10
 3b8:	8f 77       	andi	r24, 0x7F	; 127
 3ba:	8a b9       	out	0x0a, r24	; 10
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <UART_init+0x36>
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <cst_str_UART_config+0x6>
 3c6:	91 30       	cpi	r25, 0x01	; 1
 3c8:	21 f4       	brne	.+8      	; 0x3d2 <UART_init+0x46>
 3ca:	9a b1       	in	r25, 0x0a	; 10
 3cc:	90 64       	ori	r25, 0x40	; 64
 3ce:	9a b9       	out	0x0a, r25	; 10
 3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <UART_init+0x54>
 3d2:	91 11       	cpse	r25, r1
 3d4:	04 c0       	rjmp	.+8      	; 0x3de <UART_init+0x52>
 3d6:	9a b1       	in	r25, 0x0a	; 10
 3d8:	9f 7b       	andi	r25, 0xBF	; 191
 3da:	9a b9       	out	0x0a, r25	; 10
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <UART_init+0x54>
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <cst_str_UART_config+0x3>
 3e4:	91 30       	cpi	r25, 0x01	; 1
 3e6:	21 f4       	brne	.+8      	; 0x3f0 <UART_init+0x64>
 3e8:	9a b1       	in	r25, 0x0a	; 10
 3ea:	90 61       	ori	r25, 0x10	; 16
 3ec:	9a b9       	out	0x0a, r25	; 10
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <UART_init+0x72>
 3f0:	91 11       	cpse	r25, r1
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <UART_init+0x70>
 3f4:	9a b1       	in	r25, 0x0a	; 10
 3f6:	9f 7e       	andi	r25, 0xEF	; 239
 3f8:	9a b9       	out	0x0a, r25	; 10
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <UART_init+0x72>
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <cst_str_UART_config+0x5>
 402:	91 30       	cpi	r25, 0x01	; 1
 404:	21 f4       	brne	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 406:	9a b1       	in	r25, 0x0a	; 10
 408:	98 60       	ori	r25, 0x08	; 8
 40a:	9a b9       	out	0x0a, r25	; 10
 40c:	07 c0       	rjmp	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 40e:	91 11       	cpse	r25, r1
 410:	04 c0       	rjmp	.+8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 412:	9a b1       	in	r25, 0x0a	; 10
 414:	97 7f       	andi	r25, 0xF7	; 247
 416:	9a b9       	out	0x0a, r25	; 10
 418:	01 c0       	rjmp	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	9b b1       	in	r25, 0x0b	; 11
 41e:	9d 7f       	andi	r25, 0xFD	; 253
 420:	9b b9       	out	0x0b, r25	; 11
 422:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <cst_str_UART_config+0x2>
 426:	4e 2f       	mov	r20, r30
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	4c 30       	cpi	r20, 0x0C	; 12
 42c:	51 05       	cpc	r21, r1
 42e:	a8 f5       	brcc	.+106    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 430:	fa 01       	movw	r30, r20
 432:	e6 5d       	subi	r30, 0xD6	; 214
 434:	ff 4f       	sbci	r31, 0xFF	; 255
 436:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__tablejump2__>
 43a:	9f ec       	ldi	r25, 0xCF	; 207
 43c:	99 b9       	out	0x09, r25	; 9
 43e:	10 bc       	out	0x20, r1	; 32
 440:	2d c0       	rjmp	.+90     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 442:	97 e6       	ldi	r25, 0x67	; 103
 444:	99 b9       	out	0x09, r25	; 9
 446:	10 bc       	out	0x20, r1	; 32
 448:	29 c0       	rjmp	.+82     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 44a:	93 e3       	ldi	r25, 0x33	; 51
 44c:	99 b9       	out	0x09, r25	; 9
 44e:	10 bc       	out	0x20, r1	; 32
 450:	25 c0       	rjmp	.+74     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 452:	91 e2       	ldi	r25, 0x21	; 33
 454:	99 b9       	out	0x09, r25	; 9
 456:	10 bc       	out	0x20, r1	; 32
 458:	21 c0       	rjmp	.+66     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 45a:	99 e1       	ldi	r25, 0x19	; 25
 45c:	99 b9       	out	0x09, r25	; 9
 45e:	10 bc       	out	0x20, r1	; 32
 460:	1d c0       	rjmp	.+58     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 462:	90 e1       	ldi	r25, 0x10	; 16
 464:	99 b9       	out	0x09, r25	; 9
 466:	10 bc       	out	0x20, r1	; 32
 468:	19 c0       	rjmp	.+50     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 46a:	9c e0       	ldi	r25, 0x0C	; 12
 46c:	99 b9       	out	0x09, r25	; 9
 46e:	10 bc       	out	0x20, r1	; 32
 470:	15 c0       	rjmp	.+42     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 472:	97 e0       	ldi	r25, 0x07	; 7
 474:	99 b9       	out	0x09, r25	; 9
 476:	10 bc       	out	0x20, r1	; 32
 478:	11 c0       	rjmp	.+34     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 47a:	95 e0       	ldi	r25, 0x05	; 5
 47c:	99 b9       	out	0x09, r25	; 9
 47e:	10 bc       	out	0x20, r1	; 32
 480:	0d c0       	rjmp	.+26     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 482:	93 e0       	ldi	r25, 0x03	; 3
 484:	99 b9       	out	0x09, r25	; 9
 486:	10 bc       	out	0x20, r1	; 32
 488:	09 c0       	rjmp	.+18     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	99 b9       	out	0x09, r25	; 9
 48e:	10 bc       	out	0x20, r1	; 32
 490:	05 c0       	rjmp	.+10     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	99 b9       	out	0x09, r25	; 9
 496:	10 bc       	out	0x20, r1	; 32
 498:	01 c0       	rjmp	.+2      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <cst_str_UART_config+0x1>
 4a0:	92 30       	cpi	r25, 0x02	; 2
 4a2:	69 f0       	breq	.+26     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4a4:	28 f4       	brcc	.+10     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4a6:	99 23       	and	r25, r25
 4a8:	41 f0       	breq	.+16     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4aa:	91 30       	cpi	r25, 0x01	; 1
 4ac:	89 f0       	breq	.+34     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ae:	0d c0       	rjmp	.+26     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4b0:	93 30       	cpi	r25, 0x03	; 3
 4b2:	39 f0       	breq	.+14     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4b4:	94 30       	cpi	r25, 0x04	; 4
 4b6:	39 f0       	breq	.+14     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4b8:	08 c0       	rjmp	.+16     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4be:	94 e0       	ldi	r25, 0x04	; 4
 4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4c2:	96 e0       	ldi	r25, 0x06	; 6
 4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4c6:	96 e0       	ldi	r25, 0x06	; 6
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4d0:	92 e0       	ldi	r25, 0x02	; 2
 4d2:	81 11       	cpse	r24, r1
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d6:	90 68       	ori	r25, 0x80	; 128
 4d8:	90 bd       	out	0x20, r25	; 32
 4da:	9f b7       	in	r25, 0x3f	; 63
 4dc:	90 68       	ori	r25, 0x80	; 128
 4de:	9f bf       	out	0x3f, r25	; 63
 4e0:	08 95       	ret

000004e2 <UART_isEmpty>:
 4e2:	5d 9b       	sbis	0x0b, 5	; 11
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <UART_isEmpty+0x8>
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	08 95       	ret
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret

000004ee <UART_sendByte>:
 4ee:	5d 9b       	sbis	0x0b, 5	; 11
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <UART_sendByte+0xa>
 4f2:	8c b9       	out	0x0c, r24	; 12
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	08 95       	ret
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	08 95       	ret

000004fc <UART_setCallBack>:

enu_UART_status_t UART_setCallBack (void (*ptr_func)(void))
{
	/*TO BE IMPLEMENTED*/
	enu_UART_status_t returnValue = UART_OK;
	if(NULL_PTR != ptr_func)
 4fc:	00 97       	sbiw	r24, 0x00	; 0
 4fe:	31 f0       	breq	.+12     	; 0x50c <UART_setCallBack+0x10>
	{
		glptr_callBackFunc = ptr_func;
 500:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <glptr_callBackFunc+0x1>
 504:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <glptr_callBackFunc>


enu_UART_status_t UART_setCallBack (void (*ptr_func)(void))
{
	/*TO BE IMPLEMENTED*/
	enu_UART_status_t returnValue = UART_OK;
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	08 95       	ret
	{
		glptr_callBackFunc = ptr_func;
	}
	else
	{
		returnValue = UART_NOK;
 50c:	82 e0       	ldi	r24, 0x02	; 2
	}
	return returnValue;
}
 50e:	08 95       	ret

00000510 <__vector_13>:
  
 
 ISR(USART_RXC_INT)
 {
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
	 static uint16_t counter = 0;
	 static enu_UART_rcvMode_t receiveMode = UART_DATA_SIZE;
	  

	if (receiveMode == UART_DATA_SIZE)
 532:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <receiveMode.1797>
 536:	81 11       	cpse	r24, r1
 538:	2a c0       	rjmp	.+84     	; 0x58e <__vector_13+0x7e>
	{
		if(counter == 0)
 53a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 53e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 542:	00 97       	sbiw	r24, 0x00	; 0
 544:	71 f4       	brne	.+28     	; 0x562 <__vector_13+0x52>
		{
			gluint16_dataSize = (UDR * 256);
 546:	2c b1       	in	r18, 0x0c	; 12
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	92 2f       	mov	r25, r18
 54c:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <gluint16_dataSize+0x1>
 550:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <gluint16_dataSize>
			counter = 1;
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 55c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 560:	45 c0       	rjmp	.+138    	; 0x5ec <__vector_13+0xdc>
		}
		else if (counter == 1)
 562:	01 97       	sbiw	r24, 0x01	; 1
 564:	09 f0       	breq	.+2      	; 0x568 <__vector_13+0x58>
 566:	42 c0       	rjmp	.+132    	; 0x5ec <__vector_13+0xdc>
		{
			gluint16_dataSize += UDR;
 568:	2c b1       	in	r18, 0x0c	; 12
 56a:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <gluint16_dataSize>
 56e:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <gluint16_dataSize+0x1>
 572:	82 0f       	add	r24, r18
 574:	91 1d       	adc	r25, r1
 576:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <gluint16_dataSize+0x1>
 57a:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <gluint16_dataSize>
			receiveMode = UART_DATA;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <receiveMode.1797>
			counter = 0;
 584:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__data_end+0x1>
 588:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
 58c:	2f c0       	rjmp	.+94     	; 0x5ec <__vector_13+0xdc>
		{
			
			/*DO NOTHING*/
		}
	}
	else if (receiveMode == UART_DATA)
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	69 f5       	brne	.+90     	; 0x5ec <__vector_13+0xdc>
	{
		
		if(counter < gluint16_dataSize)
 592:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 596:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 59a:	20 91 8c 04 	lds	r18, 0x048C	; 0x80048c <gluint16_dataSize>
 59e:	30 91 8d 04 	lds	r19, 0x048D	; 0x80048d <gluint16_dataSize+0x1>
 5a2:	82 17       	cp	r24, r18
 5a4:	93 07       	cpc	r25, r19
 5a6:	10 f5       	brcc	.+68     	; 0x5ec <__vector_13+0xdc>
		{
			arr_g_recieveBuffer[counter] = UDR;
 5a8:	2c b1       	in	r18, 0x0c	; 12
 5aa:	fc 01       	movw	r30, r24
 5ac:	e4 57       	subi	r30, 0x74	; 116
 5ae:	ff 4f       	sbci	r31, 0xFF	; 255
 5b0:	20 83       	st	Z, r18
			counter++;
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 5b8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
			if(counter == gluint16_dataSize)
 5bc:	20 91 8c 04 	lds	r18, 0x048C	; 0x80048c <gluint16_dataSize>
 5c0:	30 91 8d 04 	lds	r19, 0x048D	; 0x80048d <gluint16_dataSize+0x1>
 5c4:	82 17       	cp	r24, r18
 5c6:	93 07       	cpc	r25, r19
 5c8:	89 f4       	brne	.+34     	; 0x5ec <__vector_13+0xdc>
			{
				
				if (NULL_PTR != glptr_callBackFunc)
 5ca:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <glptr_callBackFunc>
 5ce:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <glptr_callBackFunc+0x1>
 5d2:	30 97       	sbiw	r30, 0x00	; 0
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <__vector_13+0xc8>
				{
					glptr_callBackFunc();
 5d6:	09 95       	icall
				}
				else
				{
					/*DO NOTHING*/
				}
				counter = 0;
 5d8:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__data_end+0x1>
 5dc:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
				gluint16_dataSize = 0;
 5e0:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <gluint16_dataSize+0x1>
 5e4:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <gluint16_dataSize>
				receiveMode = UART_DATA_SIZE;
 5e8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <receiveMode.1797>
			/*DO NOTHING*/
		}
	}
	 
	 
 }
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <BCM_init>:
{
	enu_BCM_status_t returnValue = BCM_OK;
	UART_receiveData(ptr_uint8_receivedData, uint16_dataSize);
	
	return returnValue;
}
 60e:	dc 01       	movw	r26, r24
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	1f c0       	rjmp	.+62     	; 0x654 <BCM_init+0x46>
 616:	29 2f       	mov	r18, r25
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	f9 01       	movw	r30, r18
 61c:	ee 0f       	add	r30, r30
 61e:	ff 1f       	adc	r31, r31
 620:	ef 58       	subi	r30, 0x8F	; 143
 622:	ff 4f       	sbci	r31, 0xFF	; 255
 624:	50 81       	ld	r21, Z
 626:	4c 91       	ld	r20, X
 628:	54 13       	cpse	r21, r20
 62a:	12 c0       	rjmp	.+36     	; 0x650 <BCM_init+0x42>
 62c:	22 0f       	add	r18, r18
 62e:	33 1f       	adc	r19, r19
 630:	f9 01       	movw	r30, r18
 632:	ef 58       	subi	r30, 0x8F	; 143
 634:	ff 4f       	sbci	r31, 0xFF	; 255
 636:	81 81       	ldd	r24, Z+1	; 0x01
 638:	81 11       	cpse	r24, r1
 63a:	04 c0       	rjmp	.+8      	; 0x644 <BCM_init+0x36>
 63c:	0e 94 c6 01 	call	0x38c	; 0x38c <UART_init>
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	08 95       	ret
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	49 f0       	breq	.+18     	; 0x65a <BCM_init+0x4c>
 648:	82 30       	cpi	r24, 0x02	; 2
 64a:	49 f0       	breq	.+18     	; 0x65e <BCM_init+0x50>
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	08 95       	ret
 650:	9f 5f       	subi	r25, 0xFF	; 255
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	93 30       	cpi	r25, 0x03	; 3
 656:	f8 f2       	brcs	.-66     	; 0x616 <BCM_init+0x8>
 658:	08 95       	ret
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	08 95       	ret
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	08 95       	ret

00000662 <BCM_send_n>:
 662:	ef 92       	push	r14
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	dc 01       	movw	r26, r24
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	10 e0       	ldi	r17, 0x00	; 0
 674:	1c c0       	rjmp	.+56     	; 0x6ae <BCM_send_n+0x4c>
 676:	29 2f       	mov	r18, r25
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	f9 01       	movw	r30, r18
 67c:	ee 0f       	add	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	ef 58       	subi	r30, 0x8F	; 143
 682:	ff 4f       	sbci	r31, 0xFF	; 255
 684:	40 81       	ld	r20, Z
 686:	8c 91       	ld	r24, X
 688:	48 13       	cpse	r20, r24
 68a:	0f c0       	rjmp	.+30     	; 0x6aa <BCM_send_n+0x48>
 68c:	22 0f       	add	r18, r18
 68e:	33 1f       	adc	r19, r19
 690:	f9 01       	movw	r30, r18
 692:	ef 58       	subi	r30, 0x8F	; 143
 694:	ff 4f       	sbci	r31, 0xFF	; 255
 696:	81 81       	ldd	r24, Z+1	; 0x01
 698:	88 23       	and	r24, r24
 69a:	69 f0       	breq	.+26     	; 0x6b6 <BCM_send_n+0x54>
 69c:	81 30       	cpi	r24, 0x01	; 1
 69e:	71 f0       	breq	.+28     	; 0x6bc <BCM_send_n+0x5a>
 6a0:	82 30       	cpi	r24, 0x02	; 2
 6a2:	79 f0       	breq	.+30     	; 0x6c2 <BCM_send_n+0x60>
 6a4:	00 e0       	ldi	r16, 0x00	; 0
 6a6:	11 e0       	ldi	r17, 0x01	; 1
 6a8:	0e c0       	rjmp	.+28     	; 0x6c6 <BCM_send_n+0x64>
 6aa:	9f 5f       	subi	r25, 0xFF	; 255
 6ac:	11 e0       	ldi	r17, 0x01	; 1
 6ae:	93 30       	cpi	r25, 0x03	; 3
 6b0:	10 f3       	brcs	.-60     	; 0x676 <BCM_send_n+0x14>
 6b2:	00 e0       	ldi	r16, 0x00	; 0
 6b4:	08 c0       	rjmp	.+16     	; 0x6c6 <BCM_send_n+0x64>
 6b6:	00 e0       	ldi	r16, 0x00	; 0
 6b8:	10 e0       	ldi	r17, 0x00	; 0
 6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <BCM_send_n+0x64>
 6bc:	01 e0       	ldi	r16, 0x01	; 1
 6be:	10 e0       	ldi	r17, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <BCM_send_n+0x64>
 6c2:	02 e0       	ldi	r16, 0x02	; 2
 6c4:	10 e0       	ldi	r17, 0x00	; 0
 6c6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6ca:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <glsint16_front>
 6d2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <glsint16_front+0x1>
 6d6:	28 17       	cp	r18, r24
 6d8:	39 07       	cpc	r19, r25
 6da:	4c f4       	brge	.+18     	; 0x6ee <BCM_send_n+0x8c>
 6dc:	82 0f       	add	r24, r18
 6de:	93 1f       	adc	r25, r19
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	32 e0       	ldi	r19, 0x02	; 2
 6e4:	a9 01       	movw	r20, r18
 6e6:	48 1b       	sub	r20, r24
 6e8:	59 0b       	sbc	r21, r25
 6ea:	ca 01       	movw	r24, r20
 6ec:	0f c0       	rjmp	.+30     	; 0x70c <BCM_send_n+0xaa>
 6ee:	82 17       	cp	r24, r18
 6f0:	93 07       	cpc	r25, r19
 6f2:	54 f4       	brge	.+20     	; 0x708 <BCM_send_n+0xa6>
 6f4:	f9 01       	movw	r30, r18
 6f6:	e8 1b       	sub	r30, r24
 6f8:	f9 0b       	sbc	r31, r25
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	32 e0       	ldi	r19, 0x02	; 2
 6fe:	a9 01       	movw	r20, r18
 700:	4e 1b       	sub	r20, r30
 702:	5f 0b       	sbc	r21, r31
 704:	ca 01       	movw	r24, r20
 706:	02 c0       	rjmp	.+4      	; 0x70c <BCM_send_n+0xaa>
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	92 e0       	ldi	r25, 0x02	; 2
 70c:	11 96       	adiw	r26, 0x01	; 1
 70e:	2d 91       	ld	r18, X+
 710:	3c 91       	ld	r19, X
 712:	12 97       	sbiw	r26, 0x02	; 2
 714:	28 17       	cp	r18, r24
 716:	39 07       	cpc	r19, r25
 718:	08 f0       	brcs	.+2      	; 0x71c <BCM_send_n+0xba>
 71a:	43 c0       	rjmp	.+134    	; 0x7a2 <BCM_send_n+0x140>
 71c:	7d 01       	movw	r14, r26
 71e:	20 e0       	ldi	r18, 0x00	; 0
 720:	32 e0       	ldi	r19, 0x02	; 2
 722:	4e e8       	ldi	r20, 0x8E	; 142
 724:	54 e0       	ldi	r21, 0x04	; 4
 726:	60 e6       	ldi	r22, 0x60	; 96
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	82 e6       	ldi	r24, 0x62	; 98
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 17 05 	call	0xa2e	; 0xa2e <QUEUE_enQueue>
 732:	d7 01       	movw	r26, r14
 734:	11 96       	adiw	r26, 0x01	; 1
 736:	cc 91       	ld	r28, X
 738:	11 97       	sbiw	r26, 0x01	; 1
 73a:	12 96       	adiw	r26, 0x02	; 2
 73c:	0c 91       	ld	r16, X
 73e:	20 e0       	ldi	r18, 0x00	; 0
 740:	32 e0       	ldi	r19, 0x02	; 2
 742:	4e e8       	ldi	r20, 0x8E	; 142
 744:	54 e0       	ldi	r21, 0x04	; 4
 746:	60 e6       	ldi	r22, 0x60	; 96
 748:	70 e0       	ldi	r23, 0x00	; 0
 74a:	82 e6       	ldi	r24, 0x62	; 98
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 17 05 	call	0xa2e	; 0xa2e <QUEUE_enQueue>
 752:	0c 2f       	mov	r16, r28
 754:	20 e0       	ldi	r18, 0x00	; 0
 756:	32 e0       	ldi	r19, 0x02	; 2
 758:	4e e8       	ldi	r20, 0x8E	; 142
 75a:	54 e0       	ldi	r21, 0x04	; 4
 75c:	60 e6       	ldi	r22, 0x60	; 96
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	82 e6       	ldi	r24, 0x62	; 98
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 17 05 	call	0xa2e	; 0xa2e <QUEUE_enQueue>
 768:	c0 e0       	ldi	r28, 0x00	; 0
 76a:	d0 e0       	ldi	r29, 0x00	; 0
 76c:	13 c0       	rjmp	.+38     	; 0x794 <BCM_send_n+0x132>
 76e:	d7 01       	movw	r26, r14
 770:	13 96       	adiw	r26, 0x03	; 3
 772:	ed 91       	ld	r30, X+
 774:	fc 91       	ld	r31, X
 776:	14 97       	sbiw	r26, 0x04	; 4
 778:	ec 0f       	add	r30, r28
 77a:	fd 1f       	adc	r31, r29
 77c:	00 81       	ld	r16, Z
 77e:	20 e0       	ldi	r18, 0x00	; 0
 780:	32 e0       	ldi	r19, 0x02	; 2
 782:	4e e8       	ldi	r20, 0x8E	; 142
 784:	54 e0       	ldi	r21, 0x04	; 4
 786:	60 e6       	ldi	r22, 0x60	; 96
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	82 e6       	ldi	r24, 0x62	; 98
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 17 05 	call	0xa2e	; 0xa2e <QUEUE_enQueue>
 792:	21 96       	adiw	r28, 0x01	; 1
 794:	f7 01       	movw	r30, r14
 796:	81 81       	ldd	r24, Z+1	; 0x01
 798:	92 81       	ldd	r25, Z+2	; 0x02
 79a:	c8 17       	cp	r28, r24
 79c:	d9 07       	cpc	r29, r25
 79e:	38 f3       	brcs	.-50     	; 0x76e <BCM_send_n+0x10c>
 7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <BCM_send_n+0x142>
 7a2:	13 e0       	ldi	r17, 0x03	; 3
 7a4:	81 2f       	mov	r24, r17
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	ff 90       	pop	r15
 7b0:	ef 90       	pop	r14
 7b2:	08 95       	ret

000007b4 <BCM_dispatcher>:
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	1f 92       	push	r1
 7be:	cd b7       	in	r28, 0x3d	; 61
 7c0:	de b7       	in	r29, 0x3e	; 62
 7c2:	19 82       	std	Y+1, r1	; 0x01
 7c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <glsint16_front>
 7c8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <glsint16_front+0x1>
 7cc:	0e 94 11 05 	call	0xa22	; 0xa22 <QUEUE_isEmpty>
 7d0:	82 30       	cpi	r24, 0x02	; 2
 7d2:	09 f0       	breq	.+2      	; 0x7d6 <BCM_dispatcher+0x22>
 7d4:	c4 c0       	rjmp	.+392    	; 0x95e <__stack+0xff>
 7d6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <enu_BCM_dispatcherStatus.1863>
 7da:	82 30       	cpi	r24, 0x02	; 2
 7dc:	e1 f1       	breq	.+120    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 7de:	28 f4       	brcc	.+10     	; 0x7ea <BCM_dispatcher+0x36>
 7e0:	88 23       	and	r24, r24
 7e2:	51 f0       	breq	.+20     	; 0x7f8 <BCM_dispatcher+0x44>
 7e4:	81 30       	cpi	r24, 0x01	; 1
 7e6:	a1 f0       	breq	.+40     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7e8:	bc c0       	rjmp	.+376    	; 0x962 <__stack+0x103>
 7ea:	83 30       	cpi	r24, 0x03	; 3
 7ec:	09 f4       	brne	.+2      	; 0x7f0 <BCM_dispatcher+0x3c>
 7ee:	5c c0       	rjmp	.+184    	; 0x8a8 <__stack+0x49>
 7f0:	84 30       	cpi	r24, 0x04	; 4
 7f2:	09 f4       	brne	.+2      	; 0x7f6 <BCM_dispatcher+0x42>
 7f4:	69 c0       	rjmp	.+210    	; 0x8c8 <__stack+0x69>
 7f6:	b5 c0       	rjmp	.+362    	; 0x962 <__stack+0x103>
 7f8:	03 e8       	ldi	r16, 0x83	; 131
 7fa:	10 e0       	ldi	r17, 0x00	; 0
 7fc:	20 e0       	ldi	r18, 0x00	; 0
 7fe:	32 e0       	ldi	r19, 0x02	; 2
 800:	4e e8       	ldi	r20, 0x8E	; 142
 802:	54 e0       	ldi	r21, 0x04	; 4
 804:	60 e6       	ldi	r22, 0x60	; 96
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	82 e6       	ldi	r24, 0x62	; 98
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <QUEUE_deQueue>
 810:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <dataBusUsed.1866>
 814:	88 23       	and	r24, r24
 816:	29 f0       	breq	.+10     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 818:	83 30       	cpi	r24, 0x03	; 3
 81a:	08 f0       	brcs	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81c:	a4 c0       	rjmp	.+328    	; 0x966 <__stack+0x107>
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	ab c0       	rjmp	.+342    	; 0x978 <__stack+0x119>
 822:	0e 94 71 02 	call	0x4e2	; 0x4e2 <UART_isEmpty>
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	09 f0       	breq	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 82a:	9f c0       	rjmp	.+318    	; 0x96a <__stack+0x10b>
 82c:	02 e8       	ldi	r16, 0x82	; 130
 82e:	10 e0       	ldi	r17, 0x00	; 0
 830:	20 e0       	ldi	r18, 0x00	; 0
 832:	32 e0       	ldi	r19, 0x02	; 2
 834:	4e e8       	ldi	r20, 0x8E	; 142
 836:	54 e0       	ldi	r21, 0x04	; 4
 838:	60 e6       	ldi	r22, 0x60	; 96
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	82 e6       	ldi	r24, 0x62	; 98
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 52 05 	call	0xaa4	; 0xaa4 <QUEUE_deQueue>
 844:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <sizeHigherByte.1867>
 848:	0e 94 77 02 	call	0x4ee	; 0x4ee <UART_sendByte>
 84c:	82 e0       	ldi	r24, 0x02	; 2
 84e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <enu_BCM_dispatcherStatus.1863>
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	91 c0       	rjmp	.+290    	; 0x978 <__stack+0x119>
 856:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <dataBusUsed.1866>
 85a:	88 23       	and	r24, r24
 85c:	21 f0       	breq	.+8      	; 0x866 <__stack+0x7>
 85e:	83 30       	cpi	r24, 0x03	; 3
 860:	d8 f4       	brcc	.+54     	; 0x898 <__stack+0x39>
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	1c c0       	rjmp	.+56     	; 0x89e <__stack+0x3f>
 866:	0e 94 71 02 	call	0x4e2	; 0x4e2 <UART_isEmpty>
 86a:	81 30       	cpi	r24, 0x01	; 1
 86c:	b9 f4       	brne	.+46     	; 0x89c <__stack+0x3d>
 86e:	01 e8       	ldi	r16, 0x81	; 129
 870:	10 e0       	ldi	r17, 0x00	; 0
 872:	20 e0       	ldi	r18, 0x00	; 0
 874:	32 e0       	ldi	r19, 0x02	; 2
 876:	4e e8       	ldi	r20, 0x8E	; 142
 878:	54 e0       	ldi	r21, 0x04	; 4
 87a:	60 e6       	ldi	r22, 0x60	; 96
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	82 e6       	ldi	r24, 0x62	; 98
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 52 05 	call	0xaa4	; 0xaa4 <QUEUE_deQueue>
 886:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <sizeLowerByte.1868>
 88a:	0e 94 77 02 	call	0x4ee	; 0x4ee <UART_sendByte>
 88e:	83 e0       	ldi	r24, 0x03	; 3
 890:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <enu_BCM_dispatcherStatus.1863>
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	03 c0       	rjmp	.+6      	; 0x89e <__stack+0x3f>
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	01 c0       	rjmp	.+2      	; 0x89e <__stack+0x3f>
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <enu_BCM_dispatcherStatus.1863>
 8a2:	93 30       	cpi	r25, 0x03	; 3
 8a4:	09 f0       	breq	.+2      	; 0x8a8 <__stack+0x49>
 8a6:	68 c0       	rjmp	.+208    	; 0x978 <__stack+0x119>
 8a8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <sizeHigherByte.1867>
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	98 2f       	mov	r25, r24
 8b0:	88 27       	eor	r24, r24
 8b2:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <sizeLowerByte.1868>
 8b6:	82 0f       	add	r24, r18
 8b8:	91 1d       	adc	r25, r1
 8ba:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <dataSize.1864+0x1>
 8be:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <dataSize.1864>
 8c2:	84 e0       	ldi	r24, 0x04	; 4
 8c4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <enu_BCM_dispatcherStatus.1863>
 8c8:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <dataBusUsed.1866>
 8cc:	81 11       	cpse	r24, r1
 8ce:	4f c0       	rjmp	.+158    	; 0x96e <__stack+0x10f>
 8d0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <UART_isEmpty>
 8d4:	81 30       	cpi	r24, 0x01	; 1
 8d6:	09 f0       	breq	.+2      	; 0x8da <__stack+0x7b>
 8d8:	4c c0       	rjmp	.+152    	; 0x972 <__stack+0x113>
 8da:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <dataIndex.1865>
 8de:	30 91 7e 00 	lds	r19, 0x007E	; 0x80007e <dataIndex.1865+0x1>
 8e2:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <dataSize.1864>
 8e6:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <dataSize.1864+0x1>
 8ea:	28 17       	cp	r18, r24
 8ec:	39 07       	cpc	r19, r25
 8ee:	c8 f4       	brcc	.+50     	; 0x922 <__stack+0xc3>
 8f0:	8e 01       	movw	r16, r28
 8f2:	0f 5f       	subi	r16, 0xFF	; 255
 8f4:	1f 4f       	sbci	r17, 0xFF	; 255
 8f6:	20 e0       	ldi	r18, 0x00	; 0
 8f8:	32 e0       	ldi	r19, 0x02	; 2
 8fa:	4e e8       	ldi	r20, 0x8E	; 142
 8fc:	54 e0       	ldi	r21, 0x04	; 4
 8fe:	60 e6       	ldi	r22, 0x60	; 96
 900:	70 e0       	ldi	r23, 0x00	; 0
 902:	82 e6       	ldi	r24, 0x62	; 98
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 52 05 	call	0xaa4	; 0xaa4 <QUEUE_deQueue>
 90a:	89 81       	ldd	r24, Y+1	; 0x01
 90c:	0e 94 77 02 	call	0x4ee	; 0x4ee <UART_sendByte>
 910:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <dataIndex.1865>
 914:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <dataIndex.1865+0x1>
 918:	01 96       	adiw	r24, 0x01	; 1
 91a:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <dataIndex.1865+0x1>
 91e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <dataIndex.1865>
 922:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <dataIndex.1865>
 926:	30 91 7e 00 	lds	r19, 0x007E	; 0x80007e <dataIndex.1865+0x1>
 92a:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <dataSize.1864>
 92e:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <dataSize.1864+0x1>
 932:	28 17       	cp	r18, r24
 934:	39 07       	cpc	r19, r25
 936:	f9 f4       	brne	.+62     	; 0x976 <__stack+0x117>
 938:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <ptr_BCM_callBackFunc>
 93c:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <ptr_BCM_callBackFunc+0x1>
 940:	30 97       	sbiw	r30, 0x00	; 0
 942:	09 f0       	breq	.+2      	; 0x946 <__stack+0xe7>
 944:	09 95       	icall
 946:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <dataSize.1864+0x1>
 94a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <dataSize.1864>
 94e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <dataIndex.1865+0x1>
 952:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <dataIndex.1865>
 956:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <enu_BCM_dispatcherStatus.1863>
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	0d c0       	rjmp	.+26     	; 0x978 <__stack+0x119>
 95e:	82 e0       	ldi	r24, 0x02	; 2
 960:	0b c0       	rjmp	.+22     	; 0x978 <__stack+0x119>
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	09 c0       	rjmp	.+18     	; 0x978 <__stack+0x119>
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	07 c0       	rjmp	.+14     	; 0x978 <__stack+0x119>
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	05 c0       	rjmp	.+10     	; 0x978 <__stack+0x119>
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	03 c0       	rjmp	.+6      	; 0x978 <__stack+0x119>
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	01 c0       	rjmp	.+2      	; 0x978 <__stack+0x119>
 976:	81 e0       	ldi	r24, 0x01	; 1
 978:	0f 90       	pop	r0
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	08 95       	ret

00000984 <BCM_setCallBack>:

enu_BCM_status_t BCM_setCallBack(str_BCM_instance_t* ptr_str_BCM_instance, void(*ptr_func) (void))
{
 984:	dc 01       	movw	r26, r24
	enu_BCM_status_t returnValue = BCM_OK;
	
	if (NULL_PTR != ptr_func)
 986:	61 15       	cp	r22, r1
 988:	71 05       	cpc	r23, r1
 98a:	19 f5       	brne	.+70     	; 0x9d2 <BCM_setCallBack+0x4e>
			}
		}
	}
	else
	{
		returnValue = BCM_NOK;
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	08 95       	ret
	if (NULL_PTR != ptr_func)
	{
		for(uint8_t counter = 0; counter < BCM_NUMBER_OF_CHANNELS; counter++)
		{
			returnValue = BCM_NOK;
			if (cst_str_BCM_config[counter].dataID == ptr_str_BCM_instance->dataType)
 990:	29 2f       	mov	r18, r25
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	f9 01       	movw	r30, r18
 996:	ee 0f       	add	r30, r30
 998:	ff 1f       	adc	r31, r31
 99a:	ef 58       	subi	r30, 0x8F	; 143
 99c:	ff 4f       	sbci	r31, 0xFF	; 255
 99e:	50 81       	ld	r21, Z
 9a0:	4c 91       	ld	r20, X
 9a2:	54 13       	cpse	r21, r20
 9a4:	13 c0       	rjmp	.+38     	; 0x9cc <BCM_setCallBack+0x48>
			{
				if(cst_str_BCM_config[counter].busID == BCM_UART)
 9a6:	22 0f       	add	r18, r18
 9a8:	33 1f       	adc	r19, r19
 9aa:	f9 01       	movw	r30, r18
 9ac:	ef 58       	subi	r30, 0x8F	; 143
 9ae:	ff 4f       	sbci	r31, 0xFF	; 255
 9b0:	81 81       	ldd	r24, Z+1	; 0x01
 9b2:	81 11       	cpse	r24, r1
 9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <BCM_setCallBack+0x3c>
 9b6:	cb 01       	movw	r24, r22
				{
					returnValue = BCM_OK;
					UART_setCallBack(ptr_func);
 9b8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <UART_setCallBack>
			returnValue = BCM_NOK;
			if (cst_str_BCM_config[counter].dataID == ptr_str_BCM_instance->dataType)
			{
				if(cst_str_BCM_config[counter].busID == BCM_UART)
				{
					returnValue = BCM_OK;
 9bc:	80 e0       	ldi	r24, 0x00	; 0
					UART_setCallBack(ptr_func);
					break;
 9be:	08 95       	ret
				}
				else if (cst_str_BCM_config[counter].busID == BCM_SPI)
 9c0:	81 30       	cpi	r24, 0x01	; 1
 9c2:	61 f0       	breq	.+24     	; 0x9dc <BCM_setCallBack+0x58>
				{
					returnValue = BCM_OK;
					/*SPI_init()*/
					break;
				}
				else if (cst_str_BCM_config[counter].busID == BCM_I2C)
 9c4:	82 30       	cpi	r24, 0x02	; 2
 9c6:	61 f0       	breq	.+24     	; 0x9e0 <BCM_setCallBack+0x5c>
	
	if (NULL_PTR != ptr_func)
	{
		for(uint8_t counter = 0; counter < BCM_NUMBER_OF_CHANNELS; counter++)
		{
			returnValue = BCM_NOK;
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	08 95       	ret
{
	enu_BCM_status_t returnValue = BCM_OK;
	
	if (NULL_PTR != ptr_func)
	{
		for(uint8_t counter = 0; counter < BCM_NUMBER_OF_CHANNELS; counter++)
 9cc:	9f 5f       	subi	r25, 0xFF	; 255
		{
			returnValue = BCM_NOK;
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <BCM_setCallBack+0x52>
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	80 e0       	ldi	r24, 0x00	; 0
{
	enu_BCM_status_t returnValue = BCM_OK;
	
	if (NULL_PTR != ptr_func)
	{
		for(uint8_t counter = 0; counter < BCM_NUMBER_OF_CHANNELS; counter++)
 9d6:	93 30       	cpi	r25, 0x03	; 3
 9d8:	d8 f2       	brcs	.-74     	; 0x990 <BCM_setCallBack+0xc>
 9da:	08 95       	ret
					UART_setCallBack(ptr_func);
					break;
				}
				else if (cst_str_BCM_config[counter].busID == BCM_SPI)
				{
					returnValue = BCM_OK;
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	08 95       	ret
					/*SPI_init()*/
					break;
				}
				else if (cst_str_BCM_config[counter].busID == BCM_I2C)
				{
					returnValue = BCM_OK;
 9e0:	80 e0       	ldi	r24, 0x00	; 0
	{
		returnValue = BCM_NOK;
	}
	
	return returnValue;
}
 9e2:	08 95       	ret

000009e4 <BCM_dataSentCallBack>:

enu_BCM_status_t	BCM_dataSentCallBack	(void(*ptr_func) (void))
{
	enu_BCM_status_t returnValue = BCM_OK;
	if(NULL_PTR != ptr_func)
 9e4:	00 97       	sbiw	r24, 0x00	; 0
 9e6:	31 f0       	breq	.+12     	; 0x9f4 <BCM_dataSentCallBack+0x10>
	{
		ptr_BCM_callBackFunc = ptr_func;
 9e8:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <ptr_BCM_callBackFunc+0x1>
 9ec:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <ptr_BCM_callBackFunc>
	return returnValue;
}

enu_BCM_status_t	BCM_dataSentCallBack	(void(*ptr_func) (void))
{
	enu_BCM_status_t returnValue = BCM_OK;
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	08 95       	ret
	{
		ptr_BCM_callBackFunc = ptr_func;
	}
	else
	{
		returnValue = BCM_NOK;
 9f4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return returnValue;
 9f6:	08 95       	ret

000009f8 <QUEUE_isFull>:

// Check if the queue is full
enu_QUEUE_status_t QUEUE_isFull(sint16_t sint16_front, sint16_t sint16_rear, uint16_t uint16_queueSize) 
{
	enu_QUEUE_status_t returnValue = QUEUE_NFULL;
	if ((sint16_front == sint16_rear + 1) || (sint16_front == 0 && sint16_rear == uint16_queueSize - 1)) 
 9f8:	9b 01       	movw	r18, r22
 9fa:	2f 5f       	subi	r18, 0xFF	; 255
 9fc:	3f 4f       	sbci	r19, 0xFF	; 255
 9fe:	28 17       	cp	r18, r24
 a00:	39 07       	cpc	r19, r25
 a02:	49 f0       	breq	.+18     	; 0xa16 <QUEUE_isFull+0x1e>
 a04:	89 2b       	or	r24, r25
 a06:	49 f4       	brne	.+18     	; 0xa1a <QUEUE_isFull+0x22>
 a08:	41 50       	subi	r20, 0x01	; 1
 a0a:	51 09       	sbc	r21, r1
 a0c:	46 17       	cp	r20, r22
 a0e:	57 07       	cpc	r21, r23
 a10:	31 f0       	breq	.+12     	; 0xa1e <QUEUE_isFull+0x26>
	}
	else
	{
		/*QUEUE IS NOT FULL*/
	}
	return returnValue;
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	08 95       	ret
enu_QUEUE_status_t QUEUE_isFull(sint16_t sint16_front, sint16_t sint16_rear, uint16_t uint16_queueSize) 
{
	enu_QUEUE_status_t returnValue = QUEUE_NFULL;
	if ((sint16_front == sint16_rear + 1) || (sint16_front == 0 && sint16_rear == uint16_queueSize - 1)) 
	{
		return returnValue = QUEUE_FULL;
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	08 95       	ret
	}
	else
	{
		/*QUEUE IS NOT FULL*/
	}
	return returnValue;
 a1a:	80 e0       	ldi	r24, 0x00	; 0
 a1c:	08 95       	ret
enu_QUEUE_status_t QUEUE_isFull(sint16_t sint16_front, sint16_t sint16_rear, uint16_t uint16_queueSize) 
{
	enu_QUEUE_status_t returnValue = QUEUE_NFULL;
	if ((sint16_front == sint16_rear + 1) || (sint16_front == 0 && sint16_rear == uint16_queueSize - 1)) 
	{
		return returnValue = QUEUE_FULL;
 a1e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/*QUEUE IS NOT FULL*/
	}
	return returnValue;
}
 a20:	08 95       	ret

00000a22 <QUEUE_isEmpty>:

// Check if the queue is empty
enu_QUEUE_status_t QUEUE_isEmpty(sint16_t sint16_front)
{
	enu_QUEUE_status_t returnValue = QUEUE_NEMPTY;
	if (sint16_front == -1) 
 a22:	01 96       	adiw	r24, 0x01	; 1
 a24:	11 f0       	breq	.+4      	; 0xa2a <QUEUE_isEmpty+0x8>
}

// Check if the queue is empty
enu_QUEUE_status_t QUEUE_isEmpty(sint16_t sint16_front)
{
	enu_QUEUE_status_t returnValue = QUEUE_NEMPTY;
 a26:	82 e0       	ldi	r24, 0x02	; 2
 a28:	08 95       	ret
	if (sint16_front == -1) 
	{
		returnValue = QUEUE_EMPTY;
 a2a:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		/*QUEUE IS NOT EMPTY*/
	}
	return returnValue;
}
 a2c:	08 95       	ret

00000a2e <QUEUE_enQueue>:
enu_QUEUE_status_t QUEUE_enQueue(	sint16_t*  sint16_front,
									sint16_t*  sint16_rear,
									uint8_t* ptr_uint8_queue,
									uint16_t  uint16_queueSize,
									uint8_t  uint8_element)
{
 a2e:	8f 92       	push	r8
 a30:	9f 92       	push	r9
 a32:	af 92       	push	r10
 a34:	bf 92       	push	r11
 a36:	cf 92       	push	r12
 a38:	df 92       	push	r13
 a3a:	ef 92       	push	r14
 a3c:	ff 92       	push	r15
 a3e:	0f 93       	push	r16
 a40:	cf 93       	push	r28
 a42:	df 93       	push	r29
 a44:	4c 01       	movw	r8, r24
 a46:	eb 01       	movw	r28, r22
 a48:	7a 01       	movw	r14, r20
 a4a:	69 01       	movw	r12, r18
	enu_QUEUE_status_t returnValue = QUEUE_NFULL;
	if (QUEUE_FULL == QUEUE_isFull(*sint16_front, *sint16_rear, uint16_queueSize))
 a4c:	fc 01       	movw	r30, r24
 a4e:	a0 80       	ld	r10, Z
 a50:	b1 80       	ldd	r11, Z+1	; 0x01
 a52:	68 81       	ld	r22, Y
 a54:	79 81       	ldd	r23, Y+1	; 0x01
 a56:	a9 01       	movw	r20, r18
 a58:	c5 01       	movw	r24, r10
 a5a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <QUEUE_isFull>
 a5e:	81 30       	cpi	r24, 0x01	; 1
 a60:	a1 f0       	breq	.+40     	; 0xa8a <QUEUE_enQueue+0x5c>
		/*QUEUE IS FULL*/
		returnValue = QUEUE_FULL;
	}
	else 
	{
		if (-1 == *sint16_front) 
 a62:	ab 20       	and	r10, r11
 a64:	a0 94       	com	r10
 a66:	19 f4       	brne	.+6      	; 0xa6e <QUEUE_enQueue+0x40>
		{
			*sint16_front = 0;
 a68:	f4 01       	movw	r30, r8
 a6a:	11 82       	std	Z+1, r1	; 0x01
 a6c:	10 82       	st	Z, r1
		}
		
		*sint16_rear = (*sint16_rear + 1) % uint16_queueSize;
 a6e:	88 81       	ld	r24, Y
 a70:	99 81       	ldd	r25, Y+1	; 0x01
 a72:	01 96       	adiw	r24, 0x01	; 1
 a74:	b6 01       	movw	r22, r12
 a76:	0e 94 99 05 	call	0xb32	; 0xb32 <__udivmodhi4>
 a7a:	99 83       	std	Y+1, r25	; 0x01
 a7c:	88 83       	st	Y, r24
		ptr_uint8_queue[*sint16_rear] = uint8_element;
 a7e:	f7 01       	movw	r30, r14
 a80:	e8 0f       	add	r30, r24
 a82:	f9 1f       	adc	r31, r25
 a84:	00 83       	st	Z, r16
									sint16_t*  sint16_rear,
									uint8_t* ptr_uint8_queue,
									uint16_t  uint16_queueSize,
									uint8_t  uint8_element)
{
	enu_QUEUE_status_t returnValue = QUEUE_NFULL;
 a86:	80 e0       	ldi	r24, 0x00	; 0
 a88:	01 c0       	rjmp	.+2      	; 0xa8c <QUEUE_enQueue+0x5e>
	if (QUEUE_FULL == QUEUE_isFull(*sint16_front, *sint16_rear, uint16_queueSize))
	{
		/*QUEUE IS FULL*/
		returnValue = QUEUE_FULL;
 a8a:	81 e0       	ldi	r24, 0x01	; 1
		
		*sint16_rear = (*sint16_rear + 1) % uint16_queueSize;
		ptr_uint8_queue[*sint16_rear] = uint8_element;
	}
	return returnValue;
}
 a8c:	df 91       	pop	r29
 a8e:	cf 91       	pop	r28
 a90:	0f 91       	pop	r16
 a92:	ff 90       	pop	r15
 a94:	ef 90       	pop	r14
 a96:	df 90       	pop	r13
 a98:	cf 90       	pop	r12
 a9a:	bf 90       	pop	r11
 a9c:	af 90       	pop	r10
 a9e:	9f 90       	pop	r9
 aa0:	8f 90       	pop	r8
 aa2:	08 95       	ret

00000aa4 <QUEUE_deQueue>:
enu_QUEUE_status_t QUEUE_deQueue(	sint16_t*  sint16_front,
									sint16_t*  sint16_rear,
									uint8_t* ptr_uint8_queue,
									uint16_t  uint16_queueSize,
									uint8_t* ptr_uint8_element)
{
 aa4:	8f 92       	push	r8
 aa6:	9f 92       	push	r9
 aa8:	af 92       	push	r10
 aaa:	bf 92       	push	r11
 aac:	cf 92       	push	r12
 aae:	df 92       	push	r13
 ab0:	ef 92       	push	r14
 ab2:	ff 92       	push	r15
 ab4:	0f 93       	push	r16
 ab6:	1f 93       	push	r17
 ab8:	cf 93       	push	r28
 aba:	df 93       	push	r29
 abc:	7c 01       	movw	r14, r24
 abe:	6b 01       	movw	r12, r22
 ac0:	5a 01       	movw	r10, r20
 ac2:	49 01       	movw	r8, r18
	enu_QUEUE_status_t returnValue = QUEUE_NEMPTY;
	if (QUEUE_EMPTY == QUEUE_isEmpty(*sint16_front)) 
 ac4:	fc 01       	movw	r30, r24
 ac6:	c0 81       	ld	r28, Z
 ac8:	d1 81       	ldd	r29, Z+1	; 0x01
 aca:	ce 01       	movw	r24, r28
 acc:	0e 94 11 05 	call	0xa22	; 0xa22 <QUEUE_isEmpty>
 ad0:	83 30       	cpi	r24, 0x03	; 3
 ad2:	09 f1       	breq	.+66     	; 0xb16 <QUEUE_deQueue+0x72>
		/*QUEUE IS EMPTY*/
		returnValue = QUEUE_EMPTY;
	} 
	else 
	{
		*ptr_uint8_element = ptr_uint8_queue[*sint16_front];
 ad4:	ca 0d       	add	r28, r10
 ad6:	db 1d       	adc	r29, r11
 ad8:	88 81       	ld	r24, Y
 ada:	f8 01       	movw	r30, r16
 adc:	80 83       	st	Z, r24
		if (*sint16_front == *sint16_rear) 
 ade:	f7 01       	movw	r30, r14
 ae0:	80 81       	ld	r24, Z
 ae2:	91 81       	ldd	r25, Z+1	; 0x01
 ae4:	f6 01       	movw	r30, r12
 ae6:	20 81       	ld	r18, Z
 ae8:	31 81       	ldd	r19, Z+1	; 0x01
 aea:	82 17       	cp	r24, r18
 aec:	93 07       	cpc	r25, r19
 aee:	51 f4       	brne	.+20     	; 0xb04 <QUEUE_deQueue+0x60>
		{
 			/*Q has only one element, so we reset the
 			queue after dequeing it*/
			*sint16_front = -1;
 af0:	8f ef       	ldi	r24, 0xFF	; 255
 af2:	9f ef       	ldi	r25, 0xFF	; 255
 af4:	f7 01       	movw	r30, r14
 af6:	91 83       	std	Z+1, r25	; 0x01
 af8:	80 83       	st	Z, r24
			*sint16_rear = -1;
 afa:	f6 01       	movw	r30, r12
 afc:	91 83       	std	Z+1, r25	; 0x01
 afe:	80 83       	st	Z, r24
									sint16_t*  sint16_rear,
									uint8_t* ptr_uint8_queue,
									uint16_t  uint16_queueSize,
									uint8_t* ptr_uint8_element)
{
	enu_QUEUE_status_t returnValue = QUEUE_NEMPTY;
 b00:	82 e0       	ldi	r24, 0x02	; 2
 b02:	0a c0       	rjmp	.+20     	; 0xb18 <QUEUE_deQueue+0x74>
			*sint16_front = -1;
			*sint16_rear = -1;
		}
		else 
		{
			*sint16_front = (*sint16_front + 1) % uint16_queueSize;
 b04:	01 96       	adiw	r24, 0x01	; 1
 b06:	b4 01       	movw	r22, r8
 b08:	0e 94 99 05 	call	0xb32	; 0xb32 <__udivmodhi4>
 b0c:	f7 01       	movw	r30, r14
 b0e:	91 83       	std	Z+1, r25	; 0x01
 b10:	80 83       	st	Z, r24
									sint16_t*  sint16_rear,
									uint8_t* ptr_uint8_queue,
									uint16_t  uint16_queueSize,
									uint8_t* ptr_uint8_element)
{
	enu_QUEUE_status_t returnValue = QUEUE_NEMPTY;
 b12:	82 e0       	ldi	r24, 0x02	; 2
 b14:	01 c0       	rjmp	.+2      	; 0xb18 <QUEUE_deQueue+0x74>
	if (QUEUE_EMPTY == QUEUE_isEmpty(*sint16_front)) 
	{
		/*QUEUE IS EMPTY*/
		returnValue = QUEUE_EMPTY;
 b16:	83 e0       	ldi	r24, 0x03	; 3
			*sint16_front = (*sint16_front + 1) % uint16_queueSize;
		}
		
	}
	return returnValue;
 b18:	df 91       	pop	r29
 b1a:	cf 91       	pop	r28
 b1c:	1f 91       	pop	r17
 b1e:	0f 91       	pop	r16
 b20:	ff 90       	pop	r15
 b22:	ef 90       	pop	r14
 b24:	df 90       	pop	r13
 b26:	cf 90       	pop	r12
 b28:	bf 90       	pop	r11
 b2a:	af 90       	pop	r10
 b2c:	9f 90       	pop	r9
 b2e:	8f 90       	pop	r8
 b30:	08 95       	ret

00000b32 <__udivmodhi4>:
 b32:	aa 1b       	sub	r26, r26
 b34:	bb 1b       	sub	r27, r27
 b36:	51 e1       	ldi	r21, 0x11	; 17
 b38:	07 c0       	rjmp	.+14     	; 0xb48 <__udivmodhi4_ep>

00000b3a <__udivmodhi4_loop>:
 b3a:	aa 1f       	adc	r26, r26
 b3c:	bb 1f       	adc	r27, r27
 b3e:	a6 17       	cp	r26, r22
 b40:	b7 07       	cpc	r27, r23
 b42:	10 f0       	brcs	.+4      	; 0xb48 <__udivmodhi4_ep>
 b44:	a6 1b       	sub	r26, r22
 b46:	b7 0b       	sbc	r27, r23

00000b48 <__udivmodhi4_ep>:
 b48:	88 1f       	adc	r24, r24
 b4a:	99 1f       	adc	r25, r25
 b4c:	5a 95       	dec	r21
 b4e:	a9 f7       	brne	.-22     	; 0xb3a <__udivmodhi4_loop>
 b50:	80 95       	com	r24
 b52:	90 95       	com	r25
 b54:	bc 01       	movw	r22, r24
 b56:	cd 01       	movw	r24, r26
 b58:	08 95       	ret

00000b5a <__tablejump2__>:
 b5a:	ee 0f       	add	r30, r30
 b5c:	ff 1f       	adc	r31, r31
 b5e:	05 90       	lpm	r0, Z+
 b60:	f4 91       	lpm	r31, Z
 b62:	e0 2d       	mov	r30, r0
 b64:	09 94       	ijmp

00000b66 <_exit>:
 b66:	f8 94       	cli

00000b68 <__stop_program>:
 b68:	ff cf       	rjmp	.-2      	; 0xb68 <__stop_program>
